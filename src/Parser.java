//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
import EtapaLexico.Semantica.*;
import EtapaLexico.AnalisisLexico;
import EtapaLexico.Token;
import Compilador;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//#line 26 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short WHEN=268;
public final static short WHILE=269;
public final static short MAYOR_IGUAL=270;
public final static short MENOR_IGUAL=271;
public final static short ASIGNACION=272;
public final static short DISTINTO=273;
public final static short ENTERO=274;
public final static short DOUBLE=275;
public final static short CONST=276;
public final static short DEFER=277;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    1,    3,    3,    3,    3,    5,
    5,    7,    7,    7,    8,    8,   10,   10,   10,   10,
   10,   12,   12,   13,   13,   13,    4,    4,   11,   11,
   11,   14,   14,   16,   16,   16,   16,   18,   18,   22,
   22,   23,   23,   19,   19,   19,   19,   19,   19,   19,
   19,   20,   20,   20,   20,   20,   20,   20,   20,   20,
    9,   24,   24,    2,    2,   17,   17,   28,   28,   28,
   28,   28,   28,   31,   31,   31,   31,   31,   31,   31,
   32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
   32,   32,   32,   33,   33,   33,   33,   33,   33,   34,
   34,   34,   34,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   37,   37,   37,   37,   37,   37,   27,   27,
   38,   38,   38,   38,   38,   38,   36,   36,   29,   29,
   29,   29,   29,   29,   29,   39,   39,   39,   39,   39,
   40,   40,   40,   40,   21,   21,   21,   21,   21,   25,
   25,   25,   25,   41,   41,   41,   41,   41,   41,   42,
   42,    6,   26,   15,   15,   15,   15,   15,   15,   15,
   15,   43,   43,   43,   45,   45,   45,   44,   44,   44,
   44,   30,   30,   30,   30,
};
final static short yylen[] = {                            2,
    4,    1,    3,    3,    1,    3,    2,    2,    1,    3,
    1,    1,    1,    1,    2,    1,    7,    6,    6,    5,
    6,    1,    3,    2,    1,    1,    1,    1,    9,    8,
    9,    2,    1,    1,    1,    1,    1,    4,    5,    9,
    6,    9,    6,   13,   10,    9,    7,    6,   12,   11,
   10,   16,   18,   15,   13,   12,   13,   17,   14,   15,
    2,    2,    1,    2,    1,    1,    1,    2,    2,    2,
    2,    2,    2,    9,    7,    5,    7,    7,    6,    5,
   12,   10,   14,   12,    9,   11,   11,   11,   11,    9,
    7,    9,    8,    4,    5,    3,    3,    3,    3,    5,
    3,    4,    4,    5,    6,    5,    5,    3,    2,    4,
    3,    3,    9,    7,    8,    8,    6,    5,    2,    1,
    2,    2,    2,    2,    2,    2,    1,    2,    4,    5,
    7,    7,    4,    5,    5,    5,    3,    3,    3,    3,
    5,    3,    4,    4,    3,    2,    2,    1,    2,    3,
    2,    2,    1,    1,    1,    1,    1,    1,    1,    2,
    1,    2,    3,    3,    3,    1,    6,    6,    4,    5,
    5,    3,    3,    1,    1,    1,    2,    1,    6,    4,
    3,    5,    3,    1,    2,
};
final static short yydefred[] = {                         0,
    5,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   27,   28,    0,    0,    4,    0,   12,    0,    0,
    0,   67,   13,   14,    0,   65,    0,   66,    0,    0,
    0,    0,   73,    0,    0,    0,  176,  157,  158,  159,
    0,    0,  154,  155,  156,    0,    0,    0,    0,    0,
    0,  174,  178,  185,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  161,    0,    0,   61,    1,   64,   11,
    0,    8,    0,    7,    0,   15,   68,   69,   70,   71,
   72,    0,    0,    0,  177,  149,    0,    0,    0,    0,
    0,    0,    0,    0,  146,    0,    0,    0,    0,  183,
    0,   25,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  160,    6,   10,    0,    0,    0,    0,
    0,    0,   33,   34,   35,   36,   37,    0,  175,  181,
    0,  145,    0,    0,    0,    0,    0,    0,  133,    0,
    0,    0,    0,    0,   63,    0,  129,    0,    0,  172,
  173,    0,    0,    0,    0,   24,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   32,    0,    0,  180,    0,    0,  169,    0,    0,
    0,  139,    0,  140,   62,  137,  135,    0,  134,    0,
  130,  182,    0,    0,   20,    0,   23,   80,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  170,    0,  171,    0,    0,
    0,    0,  142,    0,    0,    0,   18,    0,   21,   19,
    0,    0,    0,    0,   79,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   38,    0,    0,    0,    0,
    0,    0,  179,  167,  168,  143,    0,  144,  136,  131,
  132,   17,   77,    0,   75,   78,    0,    0,    0,    0,
    0,   91,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  120,    0,    0,    0,    0,    0,   39,    0,
    0,    0,    0,    0,  141,    0,    0,    0,    0,    0,
    0,    0,   93,    0,    0,    0,    0,    0,  128,    0,
    0,  121,    0,  119,  123,  125,  122,  126,  124,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   74,    0,    0,   90,    0,   92,    0,    0,    0,    0,
    0,    0,    0,    0,   97,    0,   98,   99,    0,    0,
    0,   85,    0,    0,    0,    0,    0,   30,   47,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   82,    0,    0,    0,  108,    0,    0,  112,   94,    0,
    0,    0,    0,    0,   41,    0,    0,    0,    0,    0,
    0,   29,   31,    0,    0,   88,   86,   89,   87,    0,
    0,  103,  102,    0,    0,    0,   95,    0,    0,    0,
  118,    0,    0,   43,    0,    0,    0,    0,    0,    0,
   84,   81,  100,  106,    0,  104,    0,  117,    0,    0,
    0,    0,    0,   45,    0,    0,    0,    0,  105,    0,
    0,  114,    0,   40,    0,    0,   50,    0,   83,  116,
    0,  115,    0,   42,    0,    0,    0,    0,  113,    0,
   44,   55,    0,   57,    0,    0,    0,    0,   60,    0,
    0,   52,    0,   53,
};
final static short yydgoto[] = {                          2,
    3,   17,   18,   46,   20,   21,   22,   23,   24,   25,
   76,  105,  106,  122,   47,  123,  124,  125,  126,  127,
   48,  209,  247,  141,   49,   27,  277,  185,   29,   30,
   31,   32,  280,  307,  308,  281,  282,  283,   94,  143,
   50,   65,   51,   52,   53,
};
final static short yysindex[] = {                      -229,
    0,    0,  -85, 1019,   -7,  -12,  532,  -26,  -11,   24,
    8,    0,    0, -166,  403,    0, 1045,    0, -149,    1,
   64,    0,    0,    0,   33,    0,  112,    0,  129,  136,
  190,  208,    0,   -1,    2,  256,    0,    0,    0,    0,
   58,  279,    0,    0,    0,  288,   32, -104,  296,   -1,
  167,    0,    0,    0,  -30,  312,   60,  222,  557,  101,
  617,  341,   97,    0, -166,  -12,    0,    0,    0,    0,
   52,    0,  125,    0, 1514,    0,    0,    0,    0,    0,
    0,  162,  346,   74,    0,    0,  355,   -1,  -42,  -42,
   -1, 1122,  403,  -76,    0,  162,  -42,  -42,  371,    0,
   79,    0,  389,  193,  419,  425,  403,  219,  423,  358,
  426,  447, -166,    0,    0,    0,   15,  532,  457,  412,
   40, 1536,    0,    0,    0,    0,    0,  595,    0,    0,
  -10,    0,  270,   41,  167,  167,  162, 1132,    0,  185,
 1071,  440,  257, 1291,    0,  -84,    0,  403,  258,    0,
    0,  468,  471,  491, -158,    0,  475, -150, 1293,  416,
  -58,  403,  495,   63,  499,  282,  -55,   -1,  557,  617,
  508,    0,  516,  -23,    0,  103,  120,    0, 1310, 1329,
  497,    0, 1331,    0,    0,    0,    0,  297,    0, 1347,
    0,    0, -158,   -9,    0, -158,    0,    0,  403, 1157,
  403, 1349, -166, -166,  135,  435,  520,  581, -122,  376,
  522,  523,   -1,  509,  542,    0,   89,    0,  414,  525,
 1364,  526,    0,  530,  327,  337,    0, -158,    0,    0,
 1370,  403,  545, 1384,    0,  565,  566,  -39,  119,  550,
  274,  595,  574,  185, -117,    0,  352,  567,  -51,   70,
  444,  576,    0,    0,    0,    0,  569,    0,    0,    0,
    0,    0,    0, 1386,    0,    0,  504, 1163, 1177,  590,
  573,    0,  -20,  378,  551,  586, 1399,  592,  593,  606,
  615,  622,    0,  613,   -1, 1228,  636,  403,    0,  563,
  874,  515,  630, -166,    0,  633,  274,  274,  634,  274,
  637, 1183,    0,  -56, -114,   81,  448,  449,    0,  639,
  436,    0,  654,    0,    0,    0,    0,    0,    0,  657,
  466,  677,   -1,  616,  659,   22,  403,  -39, 1069,  680,
    0, 1413, 1427,    0, 1433,    0, 1446,  663,  274, 1452,
  666,   38,  274,  732,    0,  175,    0,    0,  482,  694,
  477,    0,  717,  704,   -1,  473,  724,    0,    0,   -1,
 1248,  725,  706, 1091, 1193,  709,  711,  714,  718, 1465,
    0,  528,  719,    0,    0,   18, 1471,    0,    0,  517,
  -97,  521,  722, -166,    0,  474,  727,   -1,  554,  -27,
 1207,    0,    0,  274,  728,    0,    0,    0,    0,  734,
  735,    0,    0,  739,  560,  740,    0,  274,  742,  -93,
    0,  763,  685,    0,  579,  752,   -1,   13, 1446, 1485,
    0,    0,    0,    0,  754,    0, 1498,    0,  274,  757,
 1213,  760,  692,    0,  580,  761, 1262,  764,    0,  770,
  715,    0,  274,    0,  774,  710,    0,  -35,    0,    0,
  775,    0, 1277,    0,  777,  780,   -1,   59,    0,  -13,
    0,    0,  623,    0,   -1,  377,  721,  664,    0,  789,
  729,    0,  792,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,  855,    0,    0,  133,    0,  798,    0,    0,
    0,    0,    0,    0,    0,    0,  858,    0,    0,  202,
    0,    0,    0,    0,  226,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  463,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -116,    9,
  305,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  800,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  434,    0,    0,    0,    0,  -80,    0,    0,    0,
   16,    0,    0,    0,    0,   46,    0,    0,    0,    0,
    0,    0,    0,   93,    0,  819,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  651,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  329,  373,  485,   94,    0,    0,    0,
    0, 1500,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1500,    0,  -69,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  802,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  401,    0,  420,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  803,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -69,    0,    0,    0,    0,
  802,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  758,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  600,    0,    0,    0,  805,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  693,    0,    0,  604,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  608,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  807,    0,    0,    0,    0,
    0,    0,    0,    0,  614,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  844,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  900,    0,    0,  924,    0,    0,
    0,    0,    0,    0,    0,  949,    0,    0,    0,  972,
    0,    0,  997,    0,
};
final static short yygindex[] = {                         0,
    0,    0,    0,    4,  860,    0,    0,    0,    0,    0,
    0,  785,  723,  564,  -17, -121,   72,    0,    0,    0,
 -106,    0,    0,  568,   -6,  -14, 1072,   20,    0,  601,
    0,  708,    0,  583,  548, -281,    0,  726,    0,  -79,
  853,    0,  336,  203,  -68,
};
final static int YYTABLESIZE=1813;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         64,
  172,  269,   41,   60,  457,  288,  148,   19,  343,   41,
  100,  167,  417,   55,  149,  131,   82,   41,   93,   42,
   19,   41,  341,   28,   41,  408,  465,    1,   57,  429,
  175,   41,   96,  174,   67,   87,   28,    4,  179,   44,
   45,   43,  147,   41,   73,   35,  148,   61,  228,  153,
  114,   33,  109,  138,  112,   89,  151,   90,  404,   72,
  104,  360,   41,   59,  201,   62,  339,   93,   41,  383,
  133,  201,  166,  137,   89,   26,   90,  376,   19,  170,
  359,  178,   97,   44,   45,   43,  152,   98,   69,  456,
   63,   44,   45,   43,   28,   73,  375,   62,  165,  409,
  103,   89,  204,   90,  104,  215,  102,   70,  225,  204,
  115,  142,  145,   60,  130,   12,   13,  464,   41,  153,
  205,  173,   74,   12,   13,   19,  145,  292,  430,  254,
   97,  153,   11,   26,  150,   98,   26,  436,  151,  245,
  246,   28,   66,  216,  148,  273,  148,   41,  287,    8,
  210,  342,  274,  275,   11,   75,   92,  181,  195,  145,
  218,  104,  211,  212,   41,  181,  306,  145,  152,  274,
   77,    5,   66,  274,  238,    7,   11,   77,  189,    8,
  147,  145,  147,   10,   11,  146,  147,   78,  236,  237,
  239,   11,  138,  138,   79,  251,  227,  229,  145,  230,
   66,    9,  200,  273,   89,  208,   90,    8,   97,  291,
  274,  275,   11,   98,   36,   37,  150,   63,  145,  233,
  145,   36,   37,  270,  240,   16,  276,  142,   99,   36,
   37,  262,   54,  129,   37,  284,   36,   37,   12,   13,
  304,  305,  172,   36,   37,   56,   12,   13,   80,   38,
   39,  145,   40,   12,   13,   36,   37,   11,  271,   34,
   12,   13,  276,  145,   12,   13,   81,  321,  311,  153,
   83,  153,   12,   13,   36,   37,  151,  239,  151,  330,
   36,   37,  276,  276,   58,  276,   34,  299,  301,  276,
  276,   12,   13,   38,   39,   84,   40,   12,   13,  150,
  151,   38,   39,  350,   40,  356,  152,  145,  152,  182,
  233,  240,  176,  362,  177,   85,  102,  276,  276,   86,
  276,  338,  276,   41,  276,  276,    9,   88,  276,  276,
  129,   37,   19,   12,   13,  102,   95,  386,   44,   45,
   43,  304,  389,  345,  107,  166,  145,  166,   28,  166,
   16,  101,   12,   13,  150,  276,  150,  276,  405,   36,
   37,  110,  276,  166,  166,  166,  166,   19,   34,  412,
  415,  166,  418,  166,    5,   66,   36,   37,    7,  276,
  113,  116,    8,   28,  395,  128,   10,   11,   11,   11,
    5,   66,   11,  276,    7,  132,   11,   11,    8,  435,
   11,   11,   10,   11,  276,  276,   11,   11,   11,   11,
  338,  152,  276,  164,  276,  164,  248,  164,   89,   89,
   90,   90,  276,  134,  135,  136,  276,  166,  276,  166,
  458,  164,  164,  164,  164,  469,  305,  379,  276,  463,
    5,   66,  466,  164,    7,  164,  155,  468,    8,  156,
  395,  169,   10,   11,  255,   97,   41,    9,    9,  157,
   98,    9,  165,  161,  165,    9,    9,    9,  158,    9,
    9,   44,   45,   43,  163,    9,    9,    9,    9,  160,
  162,   16,   16,  163,  293,   16,   89,  164,   90,   16,
   16,   16,  163,   16,   16,  164,  168,  164,  186,   16,
   16,   16,   16,  175,  175,  175,  354,  175,   89,  175,
   90,  217,  219,  387,  413,   89,   89,   90,   90,  187,
  191,  175,  175,  175,  175,  165,  192,  165,  193,  165,
   66,  194,  196,  273,  203,   36,   37,    8,  199,  206,
  274,  275,   11,  165,  165,  165,  165,  213,   38,   39,
  207,   40,   12,   13,  328,  223,  214,  241,  138,  242,
  166,  166,  249,  250,  166,  166,  252,  166,  166,  166,
  166,   42,  166,  166,  166,  166,   41,  166,  166,  166,
  166,  166,  253,  256,  258,  175,  402,  175,  259,  260,
  310,   44,   45,   43,  416,   41,   89,  108,   90,  261,
  425,   41,   89,  265,   90,  267,  268,  165,  272,  165,
   44,   45,   43,  285,  289,  294,   44,   45,   43,  433,
  446,   89,   89,   90,   90,  290,  297,  295,  164,  164,
  302,  303,  164,  164,  309,  164,  164,  164,  164,   41,
  164,  164,  164,  164,  312,  164,  164,  164,  164,  164,
  315,  316,  401,  320,   44,   45,   43,  111,    5,   66,
  144,   41,    7,  467,  317,   89,    8,   90,   36,   37,
   10,   11,   58,  318,  159,  323,   44,   45,   43,  349,
  319,   38,   39,   41,   40,   12,   13,  325,  329,  163,
  163,  331,  334,  163,   11,  336,  351,  163,   44,   45,
   43,  163,  163,  244,  471,  180,   89,  183,   90,   11,
  347,  348,  352,  180,  353,  190,  355,  358,  175,  175,
  365,  371,  175,  175,  374,  175,  175,  175,  175,  202,
  175,  175,  175,  175,  382,  175,  175,  175,  175,  175,
  165,  165,  381,  274,  165,  165,  221,  165,  165,  165,
  165,  101,  165,  165,  165,  165,  384,  165,  165,  165,
  165,  165,  385,  388,  392,  391,  231,  396,  234,  397,
    5,   66,  398,  452,    7,   11,  399,  403,    8,  407,
  411,  410,   10,   11,   66,  414,  421,  273,   36,   37,
  378,    8,  422,  423,  274,  275,   11,  424,  426,  264,
  428,   38,   39,  431,   40,   12,   13,   36,   37,  432,
  434,  286,  439,   36,   37,  442,  445,  126,  444,  447,
   38,   39,  449,   40,   12,   13,   38,   39,  450,   40,
   12,   13,  454,  459,  455,  461,    5,   66,  462,  451,
    7,  278,  138,  139,    8,  470,  243,  472,   10,   11,
  474,   36,   37,  473,    2,  324,  184,    3,  162,   22,
   76,  127,  109,   96,   38,   39,  111,   40,   12,   13,
  110,    5,   66,   36,   37,    7,  107,  278,   71,    8,
  197,  357,   48,   10,   11,  154,   38,   39,  346,   40,
   12,   13,  364,  380,  361,   36,   37,  278,  278,   91,
  278,    0,    0,    0,  278,  278,   11,   11,   38,   39,
   11,   40,   12,   13,   11,   11,   11,    0,   11,   11,
    0,    0,    0,    0,   11,   11,   11,   11,    0,    0,
    0,   46,  278,  278,    0,  278,    0,  278,    0,  278,
  278,    0,    0,  278,  278,    0,    0,    0,  279,  126,
    0,    0,  126,    0,  101,  101,  126,    0,    0,  126,
  126,  126,    0,    0,    0,    0,    0,    0,   51,    0,
  278,   66,  278,    0,  273,    0,    0,  278,    8,    0,
    0,  274,  275,   11,  279,    0,    0,    0,   66,    0,
    0,  273,    0,    0,  278,    8,  327,    0,  274,  275,
   11,    0,  314,    0,  279,  279,    0,  279,  278,    0,
    0,  279,  279,   48,   48,    0,    0,   48,    0,  278,
  278,   48,   48,   48,   49,   48,   48,  278,    0,  278,
    0,   48,   48,   48,   48,    0,    0,  278,    0,  279,
  279,  278,  279,  278,  279,    0,  279,  279,   56,    0,
  279,  279,    0,  278,    0,    0,    0,  314,  314,    0,
  314,    0,   46,   46,    0,  314,   46,    0,    0,  314,
   46,   46,   46,   59,   46,   46,    0,  279,    0,  279,
   46,   46,   46,   46,  279,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  314,   54,  314,    0,   51,
   51,  279,  314,   51,    0,    0,    0,   51,   51,   51,
    0,   51,   51,    0,    0,  279,    0,   51,   51,   51,
   51,   58,    0,    0,    0,    0,  279,  279,    0,    5,
   66,    0,    0,    7,  279,    0,  279,    8,    0,  326,
    0,   10,   11,   16,  279,  314,    0,    0,  279,    0,
  279,    0,  314,    0,    0,   49,   49,    0,    0,   49,
  279,    0,  314,   49,   49,   49,  314,   49,   49,   68,
    0,    0,    0,   49,   49,   49,   49,    0,  314,   56,
   56,    0,    0,   56,    0,    0,    0,   56,   56,   56,
    0,   56,   56,  363,    0,  184,    0,   56,   56,   56,
   56,    0,    0,    0,   59,   59,    0,    0,   59,    0,
    0,    0,   59,   59,   59,  393,   59,   59,    0,    0,
    0,    0,   59,   59,   59,   59,    0,   54,   54,    0,
    0,   54,    0,    0,    0,   54,   54,   54,    0,   54,
   54,    0,    0,    0,  140,   54,   54,   54,   54,    0,
    0,    0,   58,   58,  179,    0,   58,    0,    0,    0,
   58,   58,   58,    0,   58,   58,    0,    0,    0,    0,
   58,   58,   58,   58,    5,    6,    0,    0,    7,  232,
    0,    0,    8,    9,    0,  298,   10,   11,    0,    0,
    0,    0,   12,   13,   14,   15,    0,    0,    0,  300,
    5,    6,    0,    0,    7,  337,    0,    0,    8,    9,
    0,    0,   10,   11,    0,  394,    0,    0,   12,   13,
   14,   15,    0,    0,    5,  117,    5,   66,  118,  419,
    7,    0,    8,    9,    8,  443,  120,  121,   10,   11,
    0,    0,   12,   13,   14,   15,    5,  117,    0,    0,
  118,    0,  224,    0,    8,    9,    0,    0,  120,  121,
    0,    0,    0,    0,   12,   13,   14,   15,  332,  333,
    0,  335,  296,    0,    0,  340,  344,    5,   66,    0,
    0,    7,    0,  138,  139,    8,  400,    5,   66,   10,
   11,    7,    0,    0,    0,    8,    0,    0,    0,   10,
   11,  438,    0,    0,    0,    0,    0,    0,  370,    0,
  372,    0,    5,   66,  377,  188,    7,  198,    5,   66,
    8,    0,    7,    0,   10,   11,    8,    0,    0,    0,
   10,   11,    5,   66,  220,    0,    7,    0,    5,   66,
    8,    0,    7,    0,   10,   11,    8,    0,    5,   66,
   10,   11,    7,  222,    0,  224,    8,    0,    0,    0,
   10,   11,    5,   66,    0,  420,    7,    0,    5,   66,
    8,  226,    7,  235,   10,   11,    8,    0,    0,  427,
   10,   11,    0,    5,   66,    0,    0,    7,  257,    0,
  437,    8,    0,  322,  263,   10,   11,    0,    0,    0,
  441,    0,    0,    5,   66,    0,    0,    7,  266,    0,
  296,    8,    0,  390,  453,   10,   11,    0,   66,    0,
    0,  273,    0,  313,    0,    8,    0,  448,  274,  275,
   11,    0,    0,   66,    0,    0,  273,  366,    0,    0,
    8,    0,  460,  274,  275,   11,    5,   66,    5,   66,
    7,  367,    7,    0,    8,    0,    8,  368,   10,   11,
   10,   11,    0,    0,    0,    5,   66,    0,    0,    7,
  369,    0,    0,    8,    0,    0,  373,   10,   11,    0,
    0,    0,    0,    0,    5,   66,    5,   66,    7,  400,
    7,    0,    8,    0,    8,  406,   10,   11,   10,   11,
    0,    0,    5,   66,    5,   66,    7,    0,    7,  438,
    8,    0,    8,    0,   10,   11,   10,   11,    0,    5,
   66,    0,  440,    7,   63,    5,   66,    8,    0,    7,
    0,   10,   11,    8,    0,    0,    0,   10,   11,    5,
   66,    5,   66,    7,    0,    7,    0,    8,    0,    8,
    0,   10,   11,   10,   11,   66,    0,    0,  273,    0,
    0,    0,    8,    0,    0,  274,  275,   11,    0,   66,
    0,    0,  273,    0,    0,    0,    8,    0,    0,  274,
  275,   11,    0,   66,    0,    0,  273,    0,    0,   66,
    8,    0,  273,  274,  275,   11,    8,    0,    0,  274,
  275,   11,   66,    0,    0,  273,    0,    0,   66,    8,
    0,  273,  274,  275,   11,    8,    0,    0,  274,  275,
   11,   66,    0,    0,  273,    0,    0,   66,    8,    0,
  273,  274,  275,   11,    8,    0,    0,  274,  275,   11,
    0,   66,    0,    0,  273,    0,    0,    0,    8,    0,
    0,  274,  275,   11,   66,   63,   63,  273,    0,   63,
    0,    8,    0,   63,  274,  275,   11,   63,   63,    5,
  117,    0,    0,  118,    0,    0,    0,    8,    9,  119,
    0,  120,  121,    0,    0,    0,    0,   12,   13,   14,
   15,    5,  117,    0,    0,  118,    0,    0,    0,    8,
    9,  171,    0,  120,  121,    0,    0,    0,    0,   12,
   13,   14,   15,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         14,
  122,   41,   45,   10,   40,  123,  123,    4,  123,   45,
   41,  118,   40,   40,   94,   84,   34,   45,  123,   40,
   17,   45,  304,    4,   45,  123,   40,  257,   40,  123,
   41,   45,   50,   44,   15,   42,   17,  123,  123,   60,
   61,   62,  123,   45,   44,   58,  123,   40,   58,   41,
   65,   59,   59,  123,   61,   43,   41,   45,   41,   59,
   57,   40,   45,   40,  123,   58,  123,  123,   45,  351,
   88,  123,   58,   91,   43,    4,   45,   40,   75,   40,
   59,   41,   42,   60,   61,   62,   41,   47,   17,  125,
  257,   60,   61,   62,   75,   44,   59,   58,  113,  381,
   41,   43,   40,   45,  101,  174,  257,  257,  188,   40,
   59,   92,   93,  120,   41,  274,  275,   59,   45,   41,
   58,  128,   59,  274,  275,  122,  107,   58,  410,   41,
   42,  123,    0,   41,   41,   47,   44,  125,  123,  262,
  263,  122,  257,   41,  261,  260,  263,   45,  266,  264,
  168,  266,  267,  268,  269,  123,  261,  138,  155,  140,
   41,  158,  169,  170,   45,  146,  273,  148,  123,  267,
   59,  256,  257,  267,   40,  260,   44,   59,  263,  264,
  261,  162,  263,  268,  269,  262,  263,   59,  203,  204,
  205,   59,  262,  263,   59,  213,  193,  194,  179,  196,
  257,    0,  261,  260,   43,  261,   45,  264,   42,  261,
  267,  268,  269,   47,  257,  258,  123,  257,  199,  200,
  201,  257,  258,  238,  205,    0,  241,  208,  259,  257,
  258,  228,  259,  257,  258,  242,  257,  258,  274,  275,
  261,  262,  364,  257,  258,  257,  274,  275,   59,  270,
  271,  232,  273,  274,  275,  257,  258,  125,  239,  272,
  274,  275,  277,  244,  274,  275,   59,  285,  275,  261,
  269,  263,  274,  275,  257,  258,  261,  292,  263,  294,
  257,  258,  297,  298,  261,  300,  272,  268,  269,  304,
  305,  274,  275,  270,  271,   40,  273,  274,  275,   97,
   98,  270,  271,  310,  273,  323,  261,  288,  263,  125,
  291,  292,   43,  328,   45,  258,  257,  332,  333,   41,
  335,  302,  337,   45,  339,  340,  125,   40,  343,  344,
  257,  258,  329,  274,  275,  257,   41,  355,   60,   61,
   62,  261,  360,  263,  123,   41,  327,   43,  329,   45,
  125,   40,  274,  275,  261,  370,  263,  372,  376,  257,
  258,  261,  377,   59,   60,   61,   62,  364,  272,  384,
  388,   43,  390,   45,  256,  257,  257,  258,  260,  394,
   40,  257,  264,  364,  365,   40,  268,  269,  256,  257,
  256,  257,  260,  408,  260,   41,  264,  265,  264,  417,
  268,  269,  268,  269,  419,  420,  274,  275,  276,  277,
  391,   41,  427,   41,  429,   43,   41,   45,   43,   43,
   45,   45,  437,   88,   89,   90,  441,  123,  443,  125,
  448,   59,   60,   61,   62,   59,  262,  263,  453,  457,
  256,  257,  460,   43,  260,   45,   58,  465,  264,  257,
  431,   40,  268,  269,   41,   42,   45,  256,  257,   41,
   47,  260,   43,   41,   45,  264,  265,  266,   44,  268,
  269,   60,   61,   62,   41,  274,  275,  276,  277,  261,
  123,  256,  257,   58,   41,  260,   43,   41,   45,  264,
  265,  266,   59,  268,  269,  123,   40,  125,   59,  274,
  275,  276,  277,   41,   42,   43,   41,   45,   43,   47,
   45,  176,  177,   41,   41,   43,   43,   45,   45,  263,
  263,   59,   60,   61,   62,   41,   59,   43,   58,   45,
  257,   41,   58,  260,   40,  257,  258,  264,  123,   41,
  267,  268,  269,   59,   60,   61,   62,   40,  270,  271,
  269,  273,  274,  275,   40,   59,   41,  123,  262,   40,
  256,  257,   41,   41,  260,  261,   58,  263,  264,  265,
  266,   40,  268,  269,  270,  271,   45,  273,  274,  275,
  276,  277,   41,   59,   59,  123,   59,  125,   59,  263,
   40,   60,   61,   62,   41,   45,   43,   41,   45,  263,
   41,   45,   43,   59,   45,   41,   41,  123,   59,  125,
   60,   61,   62,   40,  263,   40,   60,   61,   62,   41,
   41,   43,   43,   45,   45,   59,  123,   59,  256,  257,
   41,   59,  260,  261,  257,  263,  264,  265,  266,   45,
  268,  269,  270,  271,   59,  273,  274,  275,  276,  277,
   59,   59,  125,   41,   60,   61,   62,   41,  256,  257,
   93,   45,  260,   41,   59,   43,  264,   45,  257,  258,
  268,  269,  261,   59,  107,   40,   60,   61,   62,   41,
   59,  270,  271,   45,  273,  274,  275,  125,   59,  256,
  257,   59,   59,  260,   44,   59,  261,  264,   60,   61,
   62,  268,  269,  123,   41,  138,   43,  140,   45,   59,
  263,  263,   59,  146,   58,  148,   40,   59,  256,  257,
   41,   59,  260,  261,   59,  263,  264,  265,  266,  162,
  268,  269,  270,  271,   41,  273,  274,  275,  276,  277,
  256,  257,  261,  267,  260,  261,  179,  263,  264,  265,
  266,   59,  268,  269,  270,  271,   40,  273,  274,  275,
  276,  277,   59,   40,   59,   41,  199,   59,  201,   59,
  256,  257,   59,   59,  260,  125,   59,   59,  264,  263,
   59,  261,  268,  269,  257,   59,   59,  260,  257,  258,
   59,  264,   59,   59,  267,  268,  269,   59,   59,  232,
   59,  270,  271,   41,  273,  274,  275,  257,  258,  125,
   59,  244,   59,  257,  258,   59,  125,  125,   59,   59,
  270,  271,   59,  273,  274,  275,  270,  271,   59,  273,
  274,  275,   59,   59,  125,   59,  256,  257,   59,  125,
  260,  241,  262,  263,  264,  125,  266,   59,  268,  269,
   59,  257,  258,  125,    0,  288,   59,    0,   59,   41,
   59,   59,  263,   59,  270,  271,  263,  273,  274,  275,
  263,  256,  257,  257,  258,  260,  263,  277,   19,  264,
  158,  266,  125,  268,  269,  101,  270,  271,  306,  273,
  274,  275,  329,  346,  327,  257,  258,  297,  298,   47,
  300,   -1,   -1,   -1,  304,  305,  256,  257,  270,  271,
  260,  273,  274,  275,  264,  265,  266,   -1,  268,  269,
   -1,   -1,   -1,   -1,  274,  275,  276,  277,   -1,   -1,
   -1,  125,  332,  333,   -1,  335,   -1,  337,   -1,  339,
  340,   -1,   -1,  343,  344,   -1,   -1,   -1,  241,  257,
   -1,   -1,  260,   -1,  262,  263,  264,   -1,   -1,  267,
  268,  269,   -1,   -1,   -1,   -1,   -1,   -1,  125,   -1,
  370,  257,  372,   -1,  260,   -1,   -1,  377,  264,   -1,
   -1,  267,  268,  269,  277,   -1,   -1,   -1,  257,   -1,
   -1,  260,   -1,   -1,  394,  264,  123,   -1,  267,  268,
  269,   -1,  277,   -1,  297,  298,   -1,  300,  408,   -1,
   -1,  304,  305,  256,  257,   -1,   -1,  260,   -1,  419,
  420,  264,  265,  266,  125,  268,  269,  427,   -1,  429,
   -1,  274,  275,  276,  277,   -1,   -1,  437,   -1,  332,
  333,  441,  335,  443,  337,   -1,  339,  340,  125,   -1,
  343,  344,   -1,  453,   -1,   -1,   -1,  332,  333,   -1,
  335,   -1,  256,  257,   -1,  340,  260,   -1,   -1,  344,
  264,  265,  266,  125,  268,  269,   -1,  370,   -1,  372,
  274,  275,  276,  277,  377,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  370,  125,  372,   -1,  256,
  257,  394,  377,  260,   -1,   -1,   -1,  264,  265,  266,
   -1,  268,  269,   -1,   -1,  408,   -1,  274,  275,  276,
  277,  125,   -1,   -1,   -1,   -1,  419,  420,   -1,  256,
  257,   -1,   -1,  260,  427,   -1,  429,  264,   -1,  266,
   -1,  268,  269,  125,  437,  420,   -1,   -1,  441,   -1,
  443,   -1,  427,   -1,   -1,  256,  257,   -1,   -1,  260,
  453,   -1,  437,  264,  265,  266,  441,  268,  269,  125,
   -1,   -1,   -1,  274,  275,  276,  277,   -1,  453,  256,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,  265,  266,
   -1,  268,  269,  125,   -1,  125,   -1,  274,  275,  276,
  277,   -1,   -1,   -1,  256,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,  265,  266,  125,  268,  269,   -1,   -1,
   -1,   -1,  274,  275,  276,  277,   -1,  256,  257,   -1,
   -1,  260,   -1,   -1,   -1,  264,  265,  266,   -1,  268,
  269,   -1,   -1,   -1,  123,  274,  275,  276,  277,   -1,
   -1,   -1,  256,  257,  123,   -1,  260,   -1,   -1,   -1,
  264,  265,  266,   -1,  268,  269,   -1,   -1,   -1,   -1,
  274,  275,  276,  277,  256,  257,   -1,   -1,  260,  123,
   -1,   -1,  264,  265,   -1,  123,  268,  269,   -1,   -1,
   -1,   -1,  274,  275,  276,  277,   -1,   -1,   -1,  123,
  256,  257,   -1,   -1,  260,  123,   -1,   -1,  264,  265,
   -1,   -1,  268,  269,   -1,  123,   -1,   -1,  274,  275,
  276,  277,   -1,   -1,  256,  257,  256,  257,  260,  123,
  260,   -1,  264,  265,  264,  123,  268,  269,  268,  269,
   -1,   -1,  274,  275,  276,  277,  256,  257,   -1,   -1,
  260,   -1,  125,   -1,  264,  265,   -1,   -1,  268,  269,
   -1,   -1,   -1,   -1,  274,  275,  276,  277,  297,  298,
   -1,  300,  125,   -1,   -1,  304,  305,  256,  257,   -1,
   -1,  260,   -1,  262,  263,  264,  125,  256,  257,  268,
  269,  260,   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,
  269,  125,   -1,   -1,   -1,   -1,   -1,   -1,  337,   -1,
  339,   -1,  256,  257,  343,  125,  260,  125,  256,  257,
  264,   -1,  260,   -1,  268,  269,  264,   -1,   -1,   -1,
  268,  269,  256,  257,  125,   -1,  260,   -1,  256,  257,
  264,   -1,  260,   -1,  268,  269,  264,   -1,  256,  257,
  268,  269,  260,  125,   -1,  125,  264,   -1,   -1,   -1,
  268,  269,  256,  257,   -1,  394,  260,   -1,  256,  257,
  264,  125,  260,  125,  268,  269,  264,   -1,   -1,  408,
  268,  269,   -1,  256,  257,   -1,   -1,  260,  125,   -1,
  419,  264,   -1,  266,  125,  268,  269,   -1,   -1,   -1,
  429,   -1,   -1,  256,  257,   -1,   -1,  260,  125,   -1,
  125,  264,   -1,  266,  443,  268,  269,   -1,  257,   -1,
   -1,  260,   -1,  125,   -1,  264,   -1,  266,  267,  268,
  269,   -1,   -1,  257,   -1,   -1,  260,  125,   -1,   -1,
  264,   -1,  266,  267,  268,  269,  256,  257,  256,  257,
  260,  125,  260,   -1,  264,   -1,  264,  125,  268,  269,
  268,  269,   -1,   -1,   -1,  256,  257,   -1,   -1,  260,
  125,   -1,   -1,  264,   -1,   -1,  125,  268,  269,   -1,
   -1,   -1,   -1,   -1,  256,  257,  256,  257,  260,  125,
  260,   -1,  264,   -1,  264,  125,  268,  269,  268,  269,
   -1,   -1,  256,  257,  256,  257,  260,   -1,  260,  125,
  264,   -1,  264,   -1,  268,  269,  268,  269,   -1,  256,
  257,   -1,  125,  260,  125,  256,  257,  264,   -1,  260,
   -1,  268,  269,  264,   -1,   -1,   -1,  268,  269,  256,
  257,  256,  257,  260,   -1,  260,   -1,  264,   -1,  264,
   -1,  268,  269,  268,  269,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,   -1,   -1,  267,  268,  269,   -1,  257,
   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,   -1,  267,
  268,  269,   -1,  257,   -1,   -1,  260,   -1,   -1,  257,
  264,   -1,  260,  267,  268,  269,  264,   -1,   -1,  267,
  268,  269,  257,   -1,   -1,  260,   -1,   -1,  257,  264,
   -1,  260,  267,  268,  269,  264,   -1,   -1,  267,  268,
  269,  257,   -1,   -1,  260,   -1,   -1,  257,  264,   -1,
  260,  267,  268,  269,  264,   -1,   -1,  267,  268,  269,
   -1,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,
   -1,  267,  268,  269,  257,  256,  257,  260,   -1,  260,
   -1,  264,   -1,  264,  267,  268,  269,  268,  269,  256,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,  265,  266,
   -1,  268,  269,   -1,   -1,   -1,   -1,  274,  275,  276,
  277,  256,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,
  265,  266,   -1,  268,  269,   -1,   -1,   -1,   -1,  274,
  275,  276,  277,
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=277;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","WHEN","WHILE","MAYOR_IGUAL","MENOR_IGUAL",
"ASIGNACION","DISTINTO","ENTERO","DOUBLE","CONST","DEFER",
};
final static String yyrule[] = {
"$accept : program",
"program : header_program '{' ejecucion '}'",
"program : header_program",
"program : header_program '{' ejecucion",
"program : header_program '{' '}'",
"header_program : ID",
"declaracion_variables : tipo lista_variables ';'",
"declaracion_variables : definicion_constante ';'",
"declaracion_variables : lista_variables ';'",
"declaracion_variables : lista_variables",
"lista_variables : lista_variables ',' ID",
"lista_variables : ID",
"sentencia_declarable : declaracion_variables",
"sentencia_declarable : funcion",
"sentencia_declarable : diferimiento",
"funcion : header_funcion ejecucion_funcion",
"funcion : header_funcion",
"header_funcion : FUN ID '(' lista_parametros ')' ':' tipo",
"header_funcion : FUN ID '(' ')' ':' tipo",
"header_funcion : FUN '(' lista_parametros ')' ':' tipo",
"header_funcion : FUN '(' ')' ':' tipo",
"header_funcion : FUN ID '(' lista_parametros ')' tipo",
"lista_parametros : parametro",
"lista_parametros : parametro ',' parametro",
"parametro : tipo ID",
"parametro : ID",
"parametro : tipo",
"tipo : ENTERO",
"tipo : DOUBLE",
"ejecucion_funcion : '{' bloque_funcion RETURN '(' expresion ')' ';' '}' ';'",
"ejecucion_funcion : '{' RETURN '(' expresion ')' ';' '}' ';'",
"ejecucion_funcion : '{' bloque_funcion RETURN '(' expresion ')' ';' bloque_funcion '}'",
"bloque_funcion : bloque_funcion sentencia_funcion",
"bloque_funcion : sentencia_funcion",
"sentencia_funcion : sentencia",
"sentencia_funcion : seleccion_funcion",
"sentencia_funcion : seleccion_when_funcion",
"sentencia_funcion : iteracion_while_funcion",
"seleccion_funcion : IF condicion_salto_if then_seleccion_funcion ENDIF",
"seleccion_funcion : IF condicion_salto_if then_seleccion_funcion else_seleccion_funcion ENDIF",
"then_seleccion_funcion : THEN '{' ejecucion_control RETURN '(' expresion ')' '}' ';'",
"then_seleccion_funcion : THEN RETURN '(' expresion ')' ';'",
"else_seleccion_funcion : ELSE '{' ejecucion_control RETURN '(' expresion ')' '}' ';'",
"else_seleccion_funcion : ELSE RETURN '(' expresion ')' ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control RETURN '(' expresion ')' '}' ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN RETURN '(' expresion ')' ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN RETURN '(' expresion ')'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN RETURN ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN RETURN",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control RETURN '(' expresion ')' '}'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control RETURN expresion '}' ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control RETURN expresion '}'",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '(' expresion ')' '}' ';'",
"iteracion_while_funcion : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '(' expresion ')' '}' ';'",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '(' expresion ')' '}'",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '}' ';'",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN expresion",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN expresion ';'",
"iteracion_while_funcion : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '(' expresion ')' '}'",
"iteracion_while_funcion : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN expresion",
"iteracion_while_funcion : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN expresion ';'",
"diferimiento : DEFER sentencia_ejecutable",
"ejecucion_control : ejecucion_control sentencia_ejecutable",
"ejecucion_control : sentencia_ejecutable",
"ejecucion : ejecucion sentencia",
"ejecucion : sentencia",
"sentencia : sentencia_ejecutable",
"sentencia : sentencia_declarable",
"sentencia_ejecutable : asignacion ';'",
"sentencia_ejecutable : seleccion ';'",
"sentencia_ejecutable : impresion ';'",
"sentencia_ejecutable : seleccion_when ';'",
"sentencia_ejecutable : iteracion_while ';'",
"sentencia_ejecutable : error ';'",
"seleccion_when : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control '}' ';'",
"seleccion_when : WHEN '(' comparacion_bool ')' THEN sentencia_ejecutable ';'",
"seleccion_when : WHEN '(' comparacion_bool ')' THEN",
"seleccion_when : WHEN '(' ')' THEN '{' ejecucion_control '}'",
"seleccion_when : WHEN '(' comparacion_bool ')' '{' ejecucion_control '}'",
"seleccion_when : WHEN comparacion_bool THEN '{' ejecucion_control '}'",
"seleccion_when : WHEN THEN '{' ejecucion_control '}'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' sentencia_ejecutable ';'",
"iteracion_while : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' sentencia_ejecutable ';'",
"iteracion_while : WHILE ':' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' '}' ';'",
"iteracion_while : WHILE '(' ')' ':' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' '(' asignacion ')' sentencia_ejecutable ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' sentencia_ejecutable ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' ')' sentencia_ejecutable ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' asignacion sentencia_ejecutable ';'",
"seleccion_iteracion : IF condicion_salto_if then_seleccion_iteracion ENDIF",
"seleccion_iteracion : IF condicion_salto_if then_seleccion_iteracion else_seleccion_iteracion ENDIF",
"seleccion_iteracion : IF condicion_salto_if then_seleccion_iteracion",
"seleccion_iteracion : IF condicion_salto_if ENDIF",
"seleccion_iteracion : IF then_seleccion_iteracion ENDIF",
"seleccion_iteracion : IF else_seleccion_iteracion ENDIF",
"then_seleccion_iteracion : THEN '{' ejecucion_iteracion '}' ';'",
"then_seleccion_iteracion : THEN break ';'",
"then_seleccion_iteracion : THEN ejecucion_iteracion '}' ';'",
"then_seleccion_iteracion : THEN '{' ejecucion_iteracion ';'",
"else_seleccion_iteracion : ELSE '{' ejecucion_iteracion '}' ';'",
"else_seleccion_iteracion : ELSE RETURN '(' expresion ')' ';'",
"else_seleccion_iteracion : ELSE RETURN '(' ')' ';'",
"else_seleccion_iteracion : ELSE RETURN '(' expresion ')'",
"else_seleccion_iteracion : ELSE RETURN ';'",
"else_seleccion_iteracion : ELSE RETURN",
"else_seleccion_iteracion : ELSE '{' ejecucion_iteracion '}'",
"else_seleccion_iteracion : ELSE '{' ejecucion_iteracion",
"else_seleccion_iteracion : ELSE ejecucion_iteracion ';'",
"seleccion_when_iteracion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_iteracion '}' ';'",
"seleccion_when_iteracion : WHEN '(' comparacion_bool ')' THEN break ';'",
"seleccion_when_iteracion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_iteracion ';'",
"seleccion_when_iteracion : WHEN '(' ')' THEN '{' ejecucion_iteracion '}' ';'",
"seleccion_when_iteracion : WHEN '(' ')' THEN break ';'",
"seleccion_when_iteracion : WHEN comparacion_bool THEN break ';'",
"ejecucion_iteracion : ejecucion_iteracion sentencia_iteracion",
"ejecucion_iteracion : sentencia_iteracion",
"sentencia_iteracion : asignacion ';'",
"sentencia_iteracion : seleccion_iteracion ';'",
"sentencia_iteracion : impresion ';'",
"sentencia_iteracion : seleccion_when_iteracion ';'",
"sentencia_iteracion : iteracion_while ';'",
"sentencia_iteracion : break ';'",
"break : BREAK",
"break : BREAK ID",
"seleccion : IF condicion_salto_if then_seleccion ENDIF",
"seleccion : IF condicion_salto_if then_seleccion else_seleccion ENDIF",
"seleccion : IF condicion_salto_if '{' ejecucion_control '}' else_seleccion ENDIF",
"seleccion : IF condicion_salto_if then_seleccion '{' ejecucion_control '}' ENDIF",
"seleccion : IF condicion_salto_if THEN ENDIF",
"seleccion : IF condicion_salto_if then_seleccion ELSE ENDIF",
"seleccion : IF condicion_salto_if THEN else_seleccion ENDIF",
"then_seleccion : THEN '{' ejecucion_control '}' ';'",
"then_seleccion : THEN sentencia_ejecutable ';'",
"then_seleccion : THEN '{' ejecucion_control",
"then_seleccion : THEN '{' '}'",
"then_seleccion : THEN ejecucion_control '}'",
"else_seleccion : ELSE '{' ejecucion_control '}' ';'",
"else_seleccion : ELSE sentencia_ejecutable ';'",
"else_seleccion : ELSE '{' '}' ';'",
"else_seleccion : ELSE ejecucion_control '}' ';'",
"condicion_salto_if : '(' comparacion_bool ')'",
"condicion_salto_if : comparacion_bool ')'",
"condicion_salto_if : '(' comparacion_bool",
"condicion_salto_if : comparacion_bool",
"condicion_salto_if : '(' ')'",
"comparacion_bool : expresion comparador expresion",
"comparacion_bool : expresion comparador",
"comparacion_bool : comparador expresion",
"comparacion_bool : comparador",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"comparador : MAYOR_IGUAL",
"comparador : MENOR_IGUAL",
"comparador : DISTINTO",
"lista_asignaciones : lista_asignaciones asignacion",
"lista_asignaciones : asignacion",
"definicion_constante : CONST lista_asignaciones",
"asignacion : ID ASIGNACION expresion",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"expresion : tipo '(' expresion '+' termino ')'",
"expresion : tipo '(' expresion '-' termino ')'",
"expresion : tipo '(' termino ')'",
"expresion : tipo '(' expresion '+' ')'",
"expresion : tipo '(' expresion '-' ')'",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"combinacion_terminales : ID",
"combinacion_terminales : CTE",
"combinacion_terminales : '-' CTE",
"factor : combinacion_terminales",
"factor : ID '(' combinacion_terminales ',' combinacion_terminales ')'",
"factor : ID '(' combinacion_terminales ')'",
"factor : ID '(' ')'",
"impresion : OUT '(' CADENA ')' ';'",
"impresion : OUT '(' ')'",
"impresion : OUT",
"impresion : OUT CADENA",
};

//#line 423 "gramatica.y"


public static final String ERROR = "Error";
public static final String WARNING = "Warning";

//public static List<Character> buffer = new ArrayList();
public static final List<String> errores_sintacticos = new ArrayList<>();
public static final List<Character> buffer = new ArrayList<>();
public static AnalisisLexico AL;

void yyerror(String mensaje) {
        // funcion utilizada para imprimir errores que produce yacc
        System.out.println("Error yacc: " + mensaje);
}

public static void agregarError(List<String> errores, String tipo, String error) {
        if (tipo.equals("ERROR")) {
                errores_compilacion = true;
        }

        int linea_actual = AnalisisLexico.getLineaActual();

        errores.add(tipo + " (Linea " + linea_actual + "): " + error);
}


int yylex() {
    //AnalisisLexico AL = new AnalisisLexico(); // ESTO ESTA MAL ? CADA VEZ QUE ENTRE A YYLEX VA A CREAR UNA TABLA DE SIMBOLOS NUEVA
    int tok = 0;
    AL.estado_actual = 0;
    boolean tieneToken = false;
    while (tieneToken == false) {
        if (!buffer.isEmpty) {
            Character c = buffer.get(0);
            Token t = AL.cambiarEstado(c,buffer);
            if (t != null) {
                tieneToken = true;
                tok = t.getId();
                if (t.getAtributo() != null) {
                    yylval = new ParserVal(t.getAtributo());
                }
            }
        } else {
            tieneToken = true;
        }
    }
    return tok;
}

public Double getDouble(String d){
    if (d.contains("D")){
        var w = d.split("D");
        return Math.pow(Double.valueOf(w[0]),Double.valueOf(w[1]));
    } else {
        return Double.valueOf(d);
    }

}

public String negarConstante(String c) { // AHORA?
    String ptr = TablaSimbolos.obtenerSimbolo(c);
    String nuevo = '-' + c;
    if (c.contains(".")) {
        Double d = getDouble(c);
        if ((d > Math.pow(-1.7976931348623157,308) && d < Math.pow(-2.2250738585072014,-308))){
            TablaSimbolos.negarConstante(ptr,c);
        } else {
            agregarError(errores_sintacticos, "ERROR", "El numero " + constante + " esta fuera de rango.");
            nuevo = "";
        }
    } else {
        agregarError(errores_sintacticos, "WARNING", "El numero " + constante + " fue truncado al valor minimo (0), ya que es menor que este mismo");
        nuevo = "0";
        TablaSimbolos.truncarEntero(ptr,nuevo);
    }
}

public static void main(String[] args) {
    AL = new AnalisisLexico();
    buffer = Compilador.crearBuffer();
}
//#line 994 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 3:
//#line 23 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se esperaba un '}' al final del programa");}
break;
case 4:
//#line 24 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se esperaba una sentencia de ejecucion");}
break;
case 8:
//#line 40 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un tipo para declaracion_variable");}
break;
case 9:
//#line 41 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' al final de la declaracion");}
break;
case 16:
//#line 59 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una ejecucion_funcion");}
break;
case 19:
//#line 64 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el nombre de la funcion");}
break;
case 20:
//#line 65 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el nombre de la funcion");}
break;
case 21:
//#line 67 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el ':' luego de asignar los parametros");}
break;
case 25:
//#line 78 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el tipo del parametro");}
break;
case 26:
//#line 79 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el nombre del parametro");}
break;
case 31:
//#line 90 "gramatica.y"
{agregarError(errores_sintacticos,"Error", "El RETURN debe ser la ultima sentencia de la funcion");}
break;
case 46:
//#line 146 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' al final de la expresion");}
break;
case 47:
//#line 147 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera la expresion de retorno");}
break;
case 48:
//#line 148 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una expresion de retorno y un ';' al final");}
break;
case 49:
//#line 151 "gramatica.y"
{agregarError(erroes_sintacticos,"Error","Se espera un ';' al final de '}'");}
break;
case 50:
//#line 153 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la expresion este entre parentesis");}
break;
case 51:
//#line 154 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' al final y que la expresion se encuentre entre parentesis");}
break;
case 54:
//#line 161 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' luego de '}' ");}
break;
case 55:
//#line 163 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una expresion luego del RETURN");}
break;
case 56:
//#line 164 "gramatica.y"
{agregarError(errores_sintacticos,"Error","falta los parentesis en la expresion, falta '}' y un ';'");}
break;
case 57:
//#line 165 "gramatica.y"
{agregarError(errores_sintacticos,"Error","falta los parentesis en la expresion y un '}' para el cierre");}
break;
case 58:
//#line 169 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' luego de '}' ");}
break;
case 59:
//#line 172 "gramatica.y"
{agregarError(errores_sintacticos,"Error","falta los parentesis en la expresion, falta '}' y un ';'");}
break;
case 60:
//#line 173 "gramatica.y"
{agregarError(errores_sintacticos,"Error","falta los parentesis en la expresion y un '}' para el cierre");}
break;
case 76:
//#line 218 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una ejecucion y un ';' ");}
break;
case 77:
//#line 219 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una comparacion_bool dentro de '(' ')' ");}
break;
case 78:
//#line 220 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un THEN luego de la comparacion_bool");}
break;
case 79:
//#line 222 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la comparacion_bool se encuentre encerrada con '(' ')' ");}
break;
case 80:
//#line 223 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una comparacion_bool encerrado entre '(' ')' ");}
break;
case 85:
//#line 232 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una comparacion_bool antes del ':' ");}
break;
case 86:
//#line 233 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera ':' luego de la comparacion_bool");}
break;
case 87:
//#line 236 "gramatica.y"
{agregarError(errores_sintactico,"Error","Se espera una ejecucion luego de la ASIGNACION");}
break;
case 88:
//#line 237 "gramatica.y"
{agregarError(errores_sintactico,"Error","Se espera una comparacion_bool dentro de los '(' ')' ");}
break;
case 89:
//#line 238 "gramatica.y"
{agregarError(errores_sintactico,"Error","Se espera una asignacion dentro de los '(' ')'  ");}
break;
case 90:
//#line 241 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ':' luego de la comparacion_bool");}
break;
case 91:
//#line 242 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una asignacion luego del ':' ");}
break;
case 92:
//#line 243 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una asignacion entre los parentesis");}
break;
case 93:
//#line 244 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la asignacion se encuentre entre parentesis");}
break;
case 96:
//#line 250 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ENDIF al final del IF");}
break;
case 97:
//#line 251 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya then_seleccion_iteracion ");}
break;
case 98:
//#line 253 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una condicion_salto_if");}
break;
case 99:
//#line 254 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una condicion_salto_if");}
break;
case 102:
//#line 259 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que antes de la ejecucucion_iteracion haya una { ");}
break;
case 103:
//#line 260 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que luego de la ejecucion_iteracion haya una llave");}
break;
case 106:
//#line 270 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una expresion entre los parentesis");}
break;
case 107:
//#line 271 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya un ';' luego de la expresion ");}
break;
case 108:
//#line 272 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que luego del return haya una expresion entre parentesis");}
break;
case 109:
//#line 273 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que luego del return haya una expresion entre parentesis y un ';'al final");}
break;
case 110:
//#line 274 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya un ';' luego de '}' ");}
break;
case 111:
//#line 275 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una '}' y un ';' ");}
break;
case 112:
//#line 276 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya que la ejecucion_iteracion se encuentre entre { }");}
break;
case 115:
//#line 287 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un '}' antes del ';'");}
break;
case 116:
//#line 290 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una comparacion_bool entre los parentesis");}
break;
case 117:
//#line 292 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una comparacion_bool entre parentesis");}
break;
case 118:
//#line 293 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la comparacion_bool se encuentre entre parentesis");}
break;
case 131:
//#line 315 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se esperan un THEN");}
break;
case 132:
//#line 316 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ELSE")}
break;
case 133:
//#line 317 "gramatica.y"
{agregarError(errores_sintactico,"Error","Se espera bloque de sentencias luego del THEN");}
break;
case 134:
//#line 318 "gramatica.y"
{agregarError(errores_sintactico,"Error","Se espera bloque de sentencias luego del ELSE");}
break;
case 135:
//#line 319 "gramatica.y"
{agregarError(errores_sintactico,"Error","Se espera bloque de sentencias luego del THEN");}
break;
case 138:
//#line 326 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un '}' al de las sentencias del THEN");}
break;
case 139:
//#line 327 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera sentencias dentro del cuerpo del THEN");}
break;
case 140:
//#line 328 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un '{' para comenzar el THEN");}
break;
case 143:
//#line 335 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera sentencias dentro del cuerpo del ELSE");}
break;
case 144:
//#line 336 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un '{' luego del ELSE");}
break;
case 146:
//#line 341 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera '(' al principio de la comparacion");}
break;
case 147:
//#line 342 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera ')' al final de la comparacion_bool");}
break;
case 148:
//#line 343 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la comparacion_bool se encuentre entre parentesis");}
break;
case 149:
//#line 344 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una condicion");}
break;
case 151:
//#line 350 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una expresion luego del comparador");}
break;
case 152:
//#line 351 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una expresion antes del comparador");}
break;
case 153:
//#line 352 "gramatica.y"
{agregarError(errores_sintacticos,"Error","se espera expresiones para poder realizar las comparaciones");}
break;
case 167:
//#line 379 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Conversion explicita no permitida");}
break;
case 168:
//#line 380 "gramatica.y"
{agregarError(erores_sintacticos,"Error","Conversion explicita no permitida");}
break;
case 169:
//#line 381 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Conversion explicita no permitida");}
break;
case 170:
//#line 382 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una termino luego del signo '+' y conversion explicita no permitida");}
break;
case 171:
//#line 383 "gramatica.y"
{agregarError(erroes_sintacticos,"Error","Se espera una termino luego del signo '-' y conversion explicita no permitida");}
break;
case 183:
//#line 416 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una cadena dentro del OUT");}
break;
case 184:
//#line 417 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera () con una cadena dentro");}
break;
case 185:
//#line 418 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un que la CADENA se encuentre entre parentesis");}
break;
//#line 1463 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
