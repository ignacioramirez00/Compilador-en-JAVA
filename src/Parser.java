//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
import EtapaLexico.Semantica.*;
import EtapaLexico.AnalisisLexico;
import EtapaLexico.Lexema;
import EtapaLexico.Tokens.Token;
import EtapaLexico.TablaSimbolos;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//#line 27 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short WHEN=268;
public final static short WHILE=269;
public final static short MAYOR_IGUAL=270;
public final static short MENOR_IGUAL=271;
public final static short ASIGNACION=272;
public final static short DISTINTO=273;
public final static short ENTERO=274;
public final static short DOUBLE=275;
public final static short CONST=276;
public final static short DEFER=277;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    1,    3,    3,    3,    3,    5,
    5,    7,    7,    7,    8,    8,   10,   10,   10,   10,
   10,   12,   12,   13,   13,   13,    4,    4,   11,   11,
   11,   14,   14,   16,   16,   16,   16,   18,   18,   22,
   22,   23,   23,   19,   19,   19,   19,   19,   19,   19,
   19,   20,   20,   20,   20,   20,   20,   20,   20,   20,
    9,   24,   24,    2,    2,   17,   17,   28,   28,   28,
   28,   28,   28,   31,   31,   31,   31,   31,   31,   31,
   32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
   32,   32,   32,   33,   33,   33,   33,   33,   33,   34,
   34,   34,   34,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   37,   37,   37,   37,   37,   37,   27,   27,
   38,   38,   38,   38,   38,   38,   36,   36,   29,   29,
   29,   29,   29,   29,   29,   39,   39,   39,   39,   39,
   40,   40,   40,   40,   21,   21,   21,   21,   21,   25,
   25,   25,   25,   41,   41,   41,   41,   41,   41,   42,
   42,    6,   26,   15,   15,   15,   15,   15,   15,   15,
   15,   43,   43,   43,   45,   45,   45,   44,   44,   44,
   44,   30,   30,   30,   30,
};
final static short yylen[] = {                            2,
    5,    1,    3,    3,    1,    3,    2,    2,    1,    3,
    1,    1,    1,    1,    2,    1,    7,    6,    6,    5,
    6,    1,    3,    2,    1,    1,    1,    1,    9,    8,
    9,    2,    1,    1,    1,    1,    1,    4,    5,    9,
    6,    9,    6,   13,   10,    9,    7,    6,   12,   11,
   10,   16,   18,   15,   13,   12,   13,   17,   14,   15,
    2,    2,    1,    2,    1,    1,    1,    2,    2,    2,
    2,    2,    2,    9,    7,    5,    7,    7,    6,    5,
   12,   10,   14,   12,    9,   11,   11,   11,   11,    9,
    7,    9,    8,    4,    5,    3,    3,    3,    3,    5,
    3,    4,    4,    5,    6,    5,    5,    3,    2,    4,
    3,    3,    9,    7,    8,    8,    6,    5,    2,    1,
    2,    2,    2,    2,    2,    2,    1,    2,    4,    5,
    7,    7,    4,    5,    5,    5,    3,    3,    3,    3,
    5,    3,    4,    4,    3,    2,    2,    1,    2,    3,
    2,    2,    1,    1,    1,    1,    1,    1,    1,    2,
    1,    2,    3,    3,    3,    1,    6,    6,    4,    5,
    5,    3,    3,    1,    1,    1,    2,    1,    6,    4,
    3,    5,    3,    1,    2,
};
final static short yydefred[] = {                         0,
    5,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   27,   28,    0,    0,    4,    0,   12,    0,    0,
    0,   67,   13,   14,    0,   65,    0,   66,    0,    0,
    0,    0,   73,    0,    0,    0,  176,  157,  158,  159,
    0,    0,  154,  155,  156,    0,    0,    0,    0,    0,
    0,  174,  178,  185,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  161,    0,    0,   61,    0,   64,   11,
    0,    8,    0,    7,    0,   15,   68,   69,   70,   71,
   72,    0,    0,    0,  177,  149,    0,    0,    0,    0,
    0,    0,    0,    0,  146,    0,    0,    0,    0,  183,
    0,   25,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  160,    1,    6,   10,    0,    0,    0,
    0,    0,    0,   33,   34,   35,   36,   37,    0,  175,
  181,    0,  145,    0,    0,    0,    0,    0,    0,  133,
    0,    0,    0,    0,    0,   63,    0,  129,    0,    0,
  172,  173,    0,    0,    0,    0,   24,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   32,    0,    0,  180,    0,    0,  169,    0,
    0,    0,  139,    0,  140,   62,  137,  135,    0,  134,
    0,  130,  182,    0,    0,   20,    0,   23,   80,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  170,    0,  171,    0,
    0,    0,    0,  142,    0,    0,    0,   18,    0,   21,
   19,    0,    0,    0,    0,   79,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   38,    0,    0,    0,
    0,    0,    0,  179,  167,  168,  143,    0,  144,  136,
  131,  132,   17,   77,    0,   75,   78,    0,    0,    0,
    0,    0,   91,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  120,    0,    0,    0,    0,    0,   39,
    0,    0,    0,    0,    0,  141,    0,    0,    0,    0,
    0,    0,    0,   93,    0,    0,    0,    0,    0,  128,
    0,    0,  121,    0,  119,  123,  125,  122,  126,  124,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   74,    0,    0,   90,    0,   92,    0,    0,    0,
    0,    0,    0,    0,    0,   97,    0,   98,   99,    0,
    0,    0,   85,    0,    0,    0,    0,    0,   30,   47,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   82,    0,    0,    0,  108,    0,    0,  112,   94,
    0,    0,    0,    0,    0,   41,    0,    0,    0,    0,
    0,    0,   29,   31,    0,    0,   88,   86,   89,   87,
    0,    0,  103,  102,    0,    0,    0,   95,    0,    0,
    0,  118,    0,    0,   43,    0,    0,    0,    0,    0,
    0,   84,   81,  100,  106,    0,  104,    0,  117,    0,
    0,    0,    0,    0,   45,    0,    0,    0,    0,  105,
    0,    0,  114,    0,   40,    0,    0,   50,    0,   83,
  116,    0,  115,    0,   42,    0,    0,    0,    0,  113,
    0,   44,   55,    0,   57,    0,    0,    0,    0,   60,
    0,    0,   52,    0,   53,
};
final static short yydgoto[] = {                          2,
    3,   17,   18,   46,   20,   21,   22,   23,   24,   25,
   76,  105,  106,  123,   47,  124,  125,  126,  127,  128,
   48,  210,  248,  142,   49,   27,  278,  186,   29,   30,
   31,   32,  281,  308,  309,  282,  283,  284,   94,  144,
   50,   65,   51,   52,   53,
};
final static short yysindex[] = {                      -223,
    0,    0,  -85, 1006,  -11,  -55,  414,  -35,   16,  -19,
   52,    0,    0, -205,  688,    0, 1028,    0, -177,   88,
   45,    0,    0,    0,   -9,    0,   66,    0,   91,   94,
  136,  143,    0,   19, -133,  194,    0,    0,    0,    0,
   56,  516,    0,    0,    0,  228,    1, -115,  234,   19,
   59,    0,    0,    0,  -32,  243,  -34,  195,  540,   64,
  546,  281,   65,    0, -205,  -55,    0,  269,    0,    0,
  137,    0,   75,    0, 1475,    0,    0,    0,    0,    0,
    0,   41,  309,    9,    0,    0,  310,   19,   46,   46,
   19, 1100,  688,  -76,    0,   41,   46,   46,  315,    0,
  -12,    0,  300,  104,  327,  319,  688,  115,  329,  266,
  338,  356, -205,    0,    0,    0,    0,   10,  414,  373,
  405,   53, 1497,    0,    0,    0,    0,    0,  632,    0,
    0,  -13,    0,   60,  152,   59,   59,   41,  400,    0,
 1265, 1267,  361,  159, 1282,    0, 1110,    0,  688,  168,
    0,    0,  383,  357,  402,  -69,    0,  404, -178, 1284,
  348,  -63,  688,  442,   68,  466,  214,  -53,   19,  540,
  546,  474,    0,  476,  130,    0,   44,   83,    0, 1299,
 1301,  463,    0, 1317,    0,    0,    0,    0,  267,    0,
 1319,    0,    0,  -69,   36,    0,  -69,    0,    0,  688,
  747,  688, 1333, -205, -205,  109,  417,  493,  -84,   -5,
  384,  496,  498,   19,  486,  504,    0,  392,    0,  416,
  492, 1335,  495,    0,  499,  299,  304,    0,  -69,    0,
    0, 1351,  688,  500, 1365,    0,  522,  528,    4,  686,
  514, 1161,  632,  534, 1265, -100,    0,  312,  523,  -46,
   77,  410,  549,    0,    0,    0,    0,  527,    0,    0,
    0,    0,    0,    0, 1367,    0,    0,  471, 1142, 1144,
  557,  544,    0,  322,  342,  510,  545,  705,  556,  560,
  561,  565,  566,    0,  564,   19, 1183,  586,  688,    0,
  491, 1120,  296,  572, -205,    0,  575, 1161, 1161,  579,
 1161,  589, 1163,    0,  354,  252, -119,  364,  391,    0,
  568,  394,    0,  600,    0,    0,    0,    0,    0,    0,
  603,  446,  625,   19, 1519,  608,   29,  688,    4, 1050,
  629,    0, 1381, 1387,    0, 1401,    0, 1407,  614, 1161,
 1420,  615,   43, 1161,  274,    0,  142,    0,    0,  420,
  641,  419,    0,  643,  631,   19,  449,  651,    0,    0,
   19, 1218,  654,  637, 1073, 1177,  638,  639,  642,  646,
 1435,    0,  772,  656,    0,    0,  -39, 1441,    0,    0,
  439, -113,  462,  668, -205,    0,  452,  673,   19,  455,
  -27, 1197,    0,    0, 1161,  678,    0,    0,    0,    0,
  687,  690,    0,    0,  695,  470,  700,    0, 1161,  706,
 -111,    0,  669,  644,    0,  734,  707,   19,   76, 1407,
 1455,    0,    0,    0,    0,  711,    0, 1469,    0, 1161,
  712, 1199,  713,  653,    0,  751,  729, 1236,  736,    0,
  740,  792,    0, 1161,    0,  741,  676,    0,  -25,    0,
    0,  743,    0, 1250,    0,  749,  753,   19,   86,    0,
   42,    0,    0,  764,    0,   19,   96,  681,  809,    0,
  759,  698,    0,  765,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,  776,    0,    0,   78,    0,  768,    0,    0,
    0,    0,    0,    0,    0,    0,  793,    0,    0,  134,
    0,    0,    0,    0,  204,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  376,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -93,   17,
  443,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  769,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  576,    0,    0,    0,    0,  -50,    0,    0,    0,
   25,    0,    0,    0,    0,   34,    0,    0,    0,    0,
    0,    0,    0,   89,    0,  788,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  599,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  117,  465,  487,   35,    0,    0,
    0,    0, 1422,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1422,    0,  -74,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  775,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  171,    0,  263,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  778,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -74,    0,    0,    0,
    0,  775,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  807,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  583,    0,    0,    0,  790,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  723,    0,    0,  584,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  590,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  836,    0,    0,    0,
    0,    0,    0,    0,    0,  594,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  859,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  892,    0,    0,  917,    0,
    0,    0,    0,    0,    0,    0,  940,    0,    0,    0,
  962,    0,    0,  984,    0,
};
final static short yygindex[] = {                         0,
    0,    0,    0,   15,  841,    0,    0,    0,    0,    0,
    0,  760,  703,  536,  -17, -122,   23,    0,    0,    0,
  -97,    0,    0,  -82,   -6,  -14, 1053,   20,    0,  580,
    0,  593,    0,  562,  525,   74,    0,  717,    0,  -80,
  830,    0,  358,  295,  -68,
};
final static int YYTABLESIZE=1788;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         64,
  173,  405,   35,   60,   55,   41,  103,   93,  100,  409,
  145,  430,  418,  150,  458,  132,   82,   41,   19,   41,
   59,  168,  289,   28,  160,   41,   26,  176,  154,  148,
  175,   19,   96,    1,   67,   87,   28,    4,  245,   69,
   44,   45,   43,   89,  270,   90,  149,   33,  138,  131,
  114,   63,  109,   41,  112,   57,  181,  153,  184,  202,
   44,   45,   43,   41,  181,  151,  191,  167,  361,   93,
  134,  104,  147,  138,  152,  150,  202,   11,  102,   70,
  203,  466,  377,   89,  217,   90,   41,  360,   41,   19,
   41,   61,  171,  229,   28,   12,   13,  222,  166,  457,
   97,  376,  177,   74,  178,   98,  216,  205,  226,   62,
   62,  143,  146,   75,   60,  104,  205,  232,   89,  235,
   90,   11,  174,  219,   77,  206,  146,   41,   89,   26,
   90,   73,   26,    9,  293,   83,   11,   19,   89,  153,
   90,  305,   28,  346,  465,   92,   72,  151,  239,   78,
  265,  211,   79,  275,  470,  275,  152,  150,  182,  166,
  146,  166,  287,  212,  213,  288,  182,  148,  146,  148,
  196,    5,   66,  104,   41,    7,  307,  139,  140,    8,
   73,  244,  146,   10,   11,  147,  148,  138,  138,  237,
  238,  240,  179,   97,   80,  116,  252,  201,   98,  146,
  437,   81,   11,   16,   12,   13,  325,  209,  228,  230,
  147,  231,  147,  164,  292,  164,   34,   36,   37,  146,
  234,  146,  102,   54,  271,  241,   99,  277,  143,   36,
   37,   36,   37,   84,   12,   13,  285,   36,   37,   12,
   13,   58,  173,  263,  102,  362,   12,   13,   12,   13,
   38,   39,  146,   40,   12,   13,  246,  247,    9,  272,
   63,   12,   13,  277,  146,  130,   37,   88,  322,  312,
   38,   39,   56,   40,   95,   36,   37,  153,  240,  153,
  331,   34,  101,  277,  277,  151,  277,  151,  300,  302,
  277,  277,   12,   13,  152,  150,  152,  150,   36,   37,
   36,   37,   36,   37,  351,  165,  357,  165,  146,   12,
   13,  234,  241,   85,  363,   12,   13,  107,  277,  277,
  113,  277,  339,  277,  110,  277,  277,  115,   16,  277,
  277,  117,  379,   11,   11,  329,   34,   11,  387,   36,
   37,   11,   11,  390,   19,   11,   11,  146,  129,   28,
  133,   11,   11,   11,   11,  153,  277,  156,  277,  406,
  157,   42,  159,  277,    5,   66,   41,  158,    7,  162,
  413,  416,    8,  419,  344,  161,   10,   11,  342,   19,
  277,   44,   45,   43,   28,  396,  130,   37,  163,    9,
    9,  151,  152,    9,  277,  164,  165,    9,    9,    9,
  436,    9,    9,  306,  380,  277,  277,    9,    9,    9,
    9,  339,  169,  277,  194,  277,  175,  175,  175,  187,
  175,  188,  175,  277,  249,  384,   89,  277,   90,  277,
  192,  459,  255,   97,  175,  175,  175,  175,   98,  277,
  464,  193,  195,  467,  170,  135,  136,  137,  469,   41,
  294,  396,   89,   42,   90,  410,  256,   97,   41,   16,
   16,  197,   98,   16,   44,   45,   43,   16,   16,   16,
  200,   16,   16,   44,   45,   43,  340,   16,   16,   16,
   16,  204,  208,  166,  431,  166,  355,  166,   89,  388,
   90,   89,  414,   90,   89,  417,   90,   89,  175,   90,
  175,  166,  166,  166,  166,  164,  207,  164,   66,  164,
  426,  274,   89,  214,   90,    8,  215,  343,  275,  276,
   11,  224,  180,  164,  164,  164,  164,  165,  139,  165,
   66,  165,  243,  274,  218,  220,  250,    8,  251,  242,
  275,  276,   11,  253,  254,  165,  165,  165,  165,  311,
  257,    5,   66,  259,   41,    7,   86,  260,  266,    8,
   41,  261,  268,   10,   11,  166,  262,  166,  269,   44,
   45,   43,  273,  286,  290,   44,   45,   43,   36,   37,
  108,  291,  305,  306,   41,  296,  111,  164,  295,  164,
   41,   38,   39,  298,   40,   12,   13,  303,  310,   44,
   45,   43,  304,  313,  321,   44,   45,   43,  350,  165,
   66,  165,   41,  274,  316,  326,  163,    8,  317,  318,
  275,  276,   11,  319,  320,  324,  348,   44,   45,   43,
  330,  175,  175,  332,  163,  175,  175,  335,  175,  175,
  175,  175,   11,  175,  175,  175,  175,  337,  175,  175,
  175,  175,  175,  349,  352,    5,   66,   11,  353,    7,
  354,   36,   37,    8,  356,   58,  359,   10,   11,  366,
   36,   37,  372,  375,   38,   39,   41,   40,   12,   13,
  382,  383,  385,   38,   39,  275,   40,   12,   13,  386,
  389,   44,   45,   43,  392,  393,  397,  398,  166,  166,
  399,  408,  166,  166,  400,  166,  166,  166,  166,  432,
  166,  166,  166,  166,  404,  166,  166,  166,  166,  166,
  164,  164,  411,   11,  164,  164,  412,  164,  164,  164,
  164,  415,  164,  164,  164,  164,  422,  164,  164,  164,
  164,  164,  165,  165,   77,  423,  165,  165,  424,  165,
  165,  165,  165,  425,  165,  165,  165,  165,  427,  165,
  165,  165,  165,  165,  429,  435,   36,   37,  433,  440,
  443,  445,   36,   37,  434,    2,   89,  446,   90,   38,
   39,  101,   40,   12,   13,   38,   39,  448,   40,   12,
   13,  447,    3,   89,  450,   90,   36,   37,  451,  455,
  456,  460,   36,   37,  468,  471,   89,  462,   90,   38,
   39,  463,   40,   12,   13,   38,   39,  473,   40,   12,
   13,  279,  474,  475,   36,   37,  184,  162,   22,  314,
  403,  163,  163,   76,  280,  163,  127,   38,   39,  163,
   40,   12,   13,  163,  163,  109,  111,  126,   96,  472,
  453,   89,  110,   90,   11,   11,  107,  279,   11,   71,
  155,  198,   11,   11,   11,  365,   11,   11,  347,  233,
  280,  381,   11,   11,   11,   11,   91,  279,  279,    0,
  279,    0,    0,    0,  279,  279,    0,    0,   36,   37,
  280,  280,    0,  280,    0,    0,  402,  280,  280,    0,
    0,   38,   39,    0,   40,   12,   13,    0,    0,    0,
    0,    0,  279,  279,    0,  279,  452,  279,    0,  279,
  279,    0,    0,  279,  279,  280,  280,    0,  280,    0,
  280,   48,  280,  280,    0,    0,  280,  280,    0,    0,
    0,    5,   66,    5,   66,    7,    0,    7,    0,    8,
  279,    8,  279,   10,   11,   10,   11,  279,    0,    0,
   46,   66,    0,  280,  274,  280,    0,    0,    8,    0,
  280,  275,  276,   11,  279,    0,    0,    0,    0,  126,
    0,    0,  126,   51,  101,  101,  126,  280,  279,  126,
  126,  126,    0,    0,  315,    0,    0,    0,    0,  279,
  279,  280,    5,   66,    0,    0,    7,  279,    0,  279,
    8,    0,  280,  280,   10,   11,   49,  279,    0,    0,
  280,  279,  280,  279,    0,    0,    0,    0,   66,    0,
  280,  274,    0,  279,  280,    8,  280,    0,  275,  276,
   11,   56,    0,    0,    0,    0,  280,    0,   66,  315,
  315,  274,  315,    0,    0,    8,    0,  315,  275,  276,
   11,  315,   48,   48,   59,    0,   48,    0,    0,    0,
   48,   48,   48,    0,   48,   48,    0,    0,    0,    0,
   48,   48,   48,   48,    0,    0,   54,  315,    0,  315,
    0,   46,   46,    0,  315,   46,    0,    0,    0,   46,
   46,   46,    0,   46,   46,    0,    0,    0,   58,   46,
   46,   46,   46,    0,   51,   51,    0,    0,   51,    0,
    0,    0,   51,   51,   51,    0,   51,   51,    0,    0,
   16,    0,   51,   51,   51,   51,    0,  315,    0,    0,
    0,    0,    0,    0,  315,    0,    0,   49,   49,    0,
    0,   49,   68,    0,  315,   49,   49,   49,  315,   49,
   49,    0,    0,    0,    0,   49,   49,   49,   49,    0,
  315,    0,   56,   56,  364,    0,   56,    0,    0,    0,
   56,   56,   56,    0,   56,   56,    0,    0,    0,    0,
   56,   56,   56,   56,    0,   59,   59,  394,    0,   59,
    0,    0,    0,   59,   59,   59,    0,   59,   59,    0,
    0,    0,    0,   59,   59,   59,   59,   54,   54,    0,
    0,   54,  141,    0,    0,   54,   54,   54,    0,   54,
   54,    0,  180,    0,    0,   54,   54,   54,   54,   58,
   58,    0,  328,   58,    0,    0,    0,   58,   58,   58,
    0,   58,   58,    0,    0,    0,    0,   58,   58,   58,
   58,    5,    6,    0,  299,    7,  301,    0,    0,    8,
    9,    0,    0,   10,   11,    0,    0,    0,    0,   12,
   13,   14,   15,    5,    6,  338,    0,    7,    0,    0,
    0,    8,    9,    0,    0,   10,   11,    0,    0,  395,
    0,   12,   13,   14,   15,    5,  118,  225,    0,  119,
    0,    0,    0,    8,    9,    0,    0,  121,  122,  420,
    0,  444,    0,   12,   13,   14,   15,    0,    5,  118,
    0,    0,  119,    0,    0,    0,    8,    9,    0,    0,
  121,  122,  297,    0,    0,    0,   12,   13,   14,   15,
  333,  334,    0,  336,    0,    5,   66,  341,  345,    7,
  401,  139,  140,    8,    0,    5,   66,   10,   11,    7,
    0,    0,  190,    8,  439,    5,   66,   10,   11,    7,
    0,    0,    0,    8,    0,  327,    0,   10,   11,  183,
  371,  185,  373,    0,    0,    0,  378,    5,   66,    5,
   66,    7,    0,    7,    0,    8,  189,    8,  199,   10,
   11,   10,   11,    0,    0,    0,    0,   66,    5,   66,
  274,    0,    7,  221,    8,  223,    8,  275,  276,   11,
   10,   11,    5,   66,    0,    0,    7,    0,    5,   66,
    8,  225,    7,  227,   10,   11,    8,  421,  323,    0,
   10,   11,    5,   66,    5,   66,    7,  236,    7,  258,
    8,  428,    8,    0,   10,   11,   10,   11,    0,    0,
    0,    0,  438,    5,   66,  264,    0,    7,    0,    0,
    0,    8,  442,  391,    0,   10,   11,    0,    0,  267,
    0,  297,   66,    0,    0,  274,  454,    0,    0,    8,
    0,  449,  275,  276,   11,  367,   66,    0,    0,  274,
    0,  368,    0,    8,    0,  461,  275,  276,   11,    0,
    5,   66,    5,   66,    7,  369,    7,    0,    8,    0,
    8,  370,   10,   11,   10,   11,    0,    5,   66,    5,
   66,    7,    0,    7,  374,    8,   63,    8,    0,   10,
   11,   10,   11,    0,    5,   66,    5,   66,    7,  401,
    7,    0,    8,    0,    8,  407,   10,   11,   10,   11,
    0,    0,    5,   66,    5,   66,    7,    0,    7,  439,
    8,    0,    8,    0,   10,   11,   10,   11,    5,   66,
    5,   66,    7,  441,    7,    0,    8,    0,    8,    0,
   10,   11,   10,   11,    0,    0,    5,   66,    0,    0,
    7,    0,    0,    0,    8,    0,    0,    0,   10,   11,
    5,   66,    5,   66,    7,    0,    7,    0,    8,    0,
    8,    0,   10,   11,   10,   11,    0,   66,    0,    0,
  274,    0,    0,   66,    8,    0,  274,  275,  276,   11,
    8,    0,    0,  275,  276,   11,    0,   66,    0,    0,
  274,    0,    0,   66,    8,    0,  274,  275,  276,   11,
    8,    0,    0,  275,  276,   11,   66,   63,   63,  274,
    0,   63,    0,    8,    0,   63,  275,  276,   11,   63,
   63,   66,    0,    0,  274,    0,    0,   66,    8,    0,
  274,  275,  276,   11,    8,    0,    0,  275,  276,   11,
    0,   66,    0,    0,  274,    0,    0,    0,    8,    0,
    0,  275,  276,   11,    0,   66,    0,    0,  274,    0,
    5,  118,    8,    0,  119,  275,  276,   11,    8,    9,
  120,    0,  121,  122,    0,    0,    0,    0,   12,   13,
   14,   15,    5,  118,    0,    0,  119,    0,    0,    0,
    8,    9,  172,    0,  121,  122,    0,    0,    0,    0,
   12,   13,   14,   15,    5,   66,    0,    0,    7,    0,
    0,    0,    8,    0,  358,    0,   10,   11,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         14,
  123,   41,   58,   10,   40,   45,   41,  123,   41,  123,
   93,  123,   40,   94,   40,   84,   34,   45,    4,   45,
   40,  119,  123,    4,  107,   45,    4,   41,   41,  123,
   44,   17,   50,  257,   15,   42,   17,  123,  123,   17,
   60,   61,   62,   43,   41,   45,  123,   59,  123,   41,
   65,  257,   59,   45,   61,   40,  139,   41,  141,  123,
   60,   61,   62,   45,  147,   41,  149,   58,   40,  123,
   88,   57,  123,   91,   41,   41,  123,    0,  257,  257,
  163,   40,   40,   43,   41,   45,   45,   59,   45,   75,
   45,   40,   40,   58,   75,  274,  275,  180,  113,  125,
   42,   59,   43,   59,   45,   47,  175,   40,  189,   58,
   58,   92,   93,  123,  121,  101,   40,  200,   43,  202,
   45,   44,  129,   41,   59,   58,  107,   45,   43,   41,
   45,   44,   44,    0,   58,  269,   59,  123,   43,  123,
   45,  261,  123,  263,   59,  261,   59,  123,   40,   59,
  233,  169,   59,  267,   59,  267,  123,  123,  139,   43,
  141,   45,  245,  170,  171,  266,  147,  261,  149,  263,
  156,  256,  257,  159,   45,  260,  274,  262,  263,  264,
   44,  266,  163,  268,  269,  262,  263,  262,  263,  204,
  205,  206,   41,   42,   59,   59,  214,  261,   47,  180,
  125,   59,  125,    0,  274,  275,  289,  261,  194,  195,
  261,  197,  263,   43,  261,   45,  272,  257,  258,  200,
  201,  202,  257,  259,  239,  206,  259,  242,  209,  257,
  258,  257,  258,   40,  274,  275,  243,  257,  258,  274,
  275,  261,  365,  229,  257,  328,  274,  275,  274,  275,
  270,  271,  233,  273,  274,  275,  262,  263,  125,  240,
  257,  274,  275,  278,  245,  257,  258,   40,  286,  276,
  270,  271,  257,  273,   41,  257,  258,  261,  293,  263,
  295,  272,   40,  298,  299,  261,  301,  263,  269,  270,
  305,  306,  274,  275,  261,  261,  263,  263,  257,  258,
  257,  258,  257,  258,  311,   43,  324,   45,  289,  274,
  275,  292,  293,  258,  329,  274,  275,  123,  333,  334,
   40,  336,  303,  338,  261,  340,  341,   59,  125,  344,
  345,  257,   59,  256,  257,   40,  272,  260,  356,  257,
  258,  264,  265,  361,  330,  268,  269,  328,   40,  330,
   41,  274,  275,  276,  277,   41,  371,   58,  373,  377,
  257,   40,   44,  378,  256,  257,   45,   41,  260,   41,
  385,  389,  264,  391,  123,  261,  268,  269,  305,  365,
  395,   60,   61,   62,  365,  366,  257,  258,  123,  256,
  257,   97,   98,  260,  409,   58,   41,  264,  265,  266,
  418,  268,  269,  262,  263,  420,  421,  274,  275,  276,
  277,  392,   40,  428,   58,  430,   41,   42,   43,   59,
   45,  263,   47,  438,   41,  352,   43,  442,   45,  444,
  263,  449,   41,   42,   59,   60,   61,   62,   47,  454,
  458,   59,   41,  461,   40,   88,   89,   90,  466,   45,
   41,  432,   43,   40,   45,  382,   41,   42,   45,  256,
  257,   58,   47,  260,   60,   61,   62,  264,  265,  266,
  123,  268,  269,   60,   61,   62,  123,  274,  275,  276,
  277,   40,  269,   41,  411,   43,   41,   45,   43,   41,
   45,   43,   41,   45,   43,   41,   45,   43,  123,   45,
  125,   59,   60,   61,   62,   41,   41,   43,  257,   45,
   41,  260,   43,   40,   45,  264,   41,  266,  267,  268,
  269,   59,  123,   59,   60,   61,   62,   41,  262,   43,
  257,   45,   40,  260,  177,  178,   41,  264,   41,  123,
  267,  268,  269,   58,   41,   59,   60,   61,   62,   40,
   59,  256,  257,   59,   45,  260,   41,   59,   59,  264,
   45,  263,   41,  268,  269,  123,  263,  125,   41,   60,
   61,   62,   59,   40,  263,   60,   61,   62,  257,  258,
   41,   59,  261,  262,   45,   59,   41,  123,   40,  125,
   45,  270,  271,  123,  273,  274,  275,   41,  257,   60,
   61,   62,   59,   59,   41,   60,   61,   62,   41,  123,
  257,  125,   45,  260,   59,  125,   41,  264,   59,   59,
  267,  268,  269,   59,   59,   40,  263,   60,   61,   62,
   59,  256,  257,   59,   59,  260,  261,   59,  263,  264,
  265,  266,   44,  268,  269,  270,  271,   59,  273,  274,
  275,  276,  277,  263,  261,  256,  257,   59,   59,  260,
   58,  257,  258,  264,   40,  261,   59,  268,  269,   41,
  257,  258,   59,   59,  270,  271,   45,  273,  274,  275,
  261,   41,   40,  270,  271,  267,  273,  274,  275,   59,
   40,   60,   61,   62,   41,   59,   59,   59,  256,  257,
   59,  263,  260,  261,   59,  263,  264,  265,  266,   41,
  268,  269,  270,  271,   59,  273,  274,  275,  276,  277,
  256,  257,  261,  125,  260,  261,   59,  263,  264,  265,
  266,   59,  268,  269,  270,  271,   59,  273,  274,  275,
  276,  277,  256,  257,   59,   59,  260,  261,   59,  263,
  264,  265,  266,   59,  268,  269,  270,  271,   59,  273,
  274,  275,  276,  277,   59,   59,  257,  258,  125,   59,
   59,   59,  257,  258,   41,    0,   43,  125,   45,  270,
  271,   59,  273,  274,  275,  270,  271,   59,  273,  274,
  275,   41,    0,   43,   59,   45,  257,  258,   59,   59,
  125,   59,  257,  258,   41,  125,   43,   59,   45,  270,
  271,   59,  273,  274,  275,  270,  271,   59,  273,  274,
  275,  242,  125,   59,  257,  258,   59,   59,   41,  125,
   59,  256,  257,   59,  242,  260,   59,  270,  271,  264,
  273,  274,  275,  268,  269,  263,  263,  125,   59,   41,
   59,   43,  263,   45,  256,  257,  263,  278,  260,   19,
  101,  159,  264,  265,  266,  330,  268,  269,  307,  123,
  278,  347,  274,  275,  276,  277,   47,  298,  299,   -1,
  301,   -1,   -1,   -1,  305,  306,   -1,   -1,  257,  258,
  298,  299,   -1,  301,   -1,   -1,  125,  305,  306,   -1,
   -1,  270,  271,   -1,  273,  274,  275,   -1,   -1,   -1,
   -1,   -1,  333,  334,   -1,  336,  125,  338,   -1,  340,
  341,   -1,   -1,  344,  345,  333,  334,   -1,  336,   -1,
  338,  125,  340,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,  256,  257,  256,  257,  260,   -1,  260,   -1,  264,
  371,  264,  373,  268,  269,  268,  269,  378,   -1,   -1,
  125,  257,   -1,  371,  260,  373,   -1,   -1,  264,   -1,
  378,  267,  268,  269,  395,   -1,   -1,   -1,   -1,  257,
   -1,   -1,  260,  125,  262,  263,  264,  395,  409,  267,
  268,  269,   -1,   -1,  278,   -1,   -1,   -1,   -1,  420,
  421,  409,  256,  257,   -1,   -1,  260,  428,   -1,  430,
  264,   -1,  420,  421,  268,  269,  125,  438,   -1,   -1,
  428,  442,  430,  444,   -1,   -1,   -1,   -1,  257,   -1,
  438,  260,   -1,  454,  442,  264,  444,   -1,  267,  268,
  269,  125,   -1,   -1,   -1,   -1,  454,   -1,  257,  333,
  334,  260,  336,   -1,   -1,  264,   -1,  341,  267,  268,
  269,  345,  256,  257,  125,   -1,  260,   -1,   -1,   -1,
  264,  265,  266,   -1,  268,  269,   -1,   -1,   -1,   -1,
  274,  275,  276,  277,   -1,   -1,  125,  371,   -1,  373,
   -1,  256,  257,   -1,  378,  260,   -1,   -1,   -1,  264,
  265,  266,   -1,  268,  269,   -1,   -1,   -1,  125,  274,
  275,  276,  277,   -1,  256,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,  265,  266,   -1,  268,  269,   -1,   -1,
  125,   -1,  274,  275,  276,  277,   -1,  421,   -1,   -1,
   -1,   -1,   -1,   -1,  428,   -1,   -1,  256,  257,   -1,
   -1,  260,  125,   -1,  438,  264,  265,  266,  442,  268,
  269,   -1,   -1,   -1,   -1,  274,  275,  276,  277,   -1,
  454,   -1,  256,  257,  125,   -1,  260,   -1,   -1,   -1,
  264,  265,  266,   -1,  268,  269,   -1,   -1,   -1,   -1,
  274,  275,  276,  277,   -1,  256,  257,  125,   -1,  260,
   -1,   -1,   -1,  264,  265,  266,   -1,  268,  269,   -1,
   -1,   -1,   -1,  274,  275,  276,  277,  256,  257,   -1,
   -1,  260,  123,   -1,   -1,  264,  265,  266,   -1,  268,
  269,   -1,  123,   -1,   -1,  274,  275,  276,  277,  256,
  257,   -1,  123,  260,   -1,   -1,   -1,  264,  265,  266,
   -1,  268,  269,   -1,   -1,   -1,   -1,  274,  275,  276,
  277,  256,  257,   -1,  123,  260,  123,   -1,   -1,  264,
  265,   -1,   -1,  268,  269,   -1,   -1,   -1,   -1,  274,
  275,  276,  277,  256,  257,  123,   -1,  260,   -1,   -1,
   -1,  264,  265,   -1,   -1,  268,  269,   -1,   -1,  123,
   -1,  274,  275,  276,  277,  256,  257,  125,   -1,  260,
   -1,   -1,   -1,  264,  265,   -1,   -1,  268,  269,  123,
   -1,  123,   -1,  274,  275,  276,  277,   -1,  256,  257,
   -1,   -1,  260,   -1,   -1,   -1,  264,  265,   -1,   -1,
  268,  269,  125,   -1,   -1,   -1,  274,  275,  276,  277,
  298,  299,   -1,  301,   -1,  256,  257,  305,  306,  260,
  125,  262,  263,  264,   -1,  256,  257,  268,  269,  260,
   -1,   -1,  263,  264,  125,  256,  257,  268,  269,  260,
   -1,   -1,   -1,  264,   -1,  266,   -1,  268,  269,  125,
  338,  125,  340,   -1,   -1,   -1,  344,  256,  257,  256,
  257,  260,   -1,  260,   -1,  264,  125,  264,  125,  268,
  269,  268,  269,   -1,   -1,   -1,   -1,  257,  256,  257,
  260,   -1,  260,  125,  264,  125,  264,  267,  268,  269,
  268,  269,  256,  257,   -1,   -1,  260,   -1,  256,  257,
  264,  125,  260,  125,  268,  269,  264,  395,  266,   -1,
  268,  269,  256,  257,  256,  257,  260,  125,  260,  125,
  264,  409,  264,   -1,  268,  269,  268,  269,   -1,   -1,
   -1,   -1,  420,  256,  257,  125,   -1,  260,   -1,   -1,
   -1,  264,  430,  266,   -1,  268,  269,   -1,   -1,  125,
   -1,  125,  257,   -1,   -1,  260,  444,   -1,   -1,  264,
   -1,  266,  267,  268,  269,  125,  257,   -1,   -1,  260,
   -1,  125,   -1,  264,   -1,  266,  267,  268,  269,   -1,
  256,  257,  256,  257,  260,  125,  260,   -1,  264,   -1,
  264,  125,  268,  269,  268,  269,   -1,  256,  257,  256,
  257,  260,   -1,  260,  125,  264,  125,  264,   -1,  268,
  269,  268,  269,   -1,  256,  257,  256,  257,  260,  125,
  260,   -1,  264,   -1,  264,  125,  268,  269,  268,  269,
   -1,   -1,  256,  257,  256,  257,  260,   -1,  260,  125,
  264,   -1,  264,   -1,  268,  269,  268,  269,  256,  257,
  256,  257,  260,  125,  260,   -1,  264,   -1,  264,   -1,
  268,  269,  268,  269,   -1,   -1,  256,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,  269,
  256,  257,  256,  257,  260,   -1,  260,   -1,  264,   -1,
  264,   -1,  268,  269,  268,  269,   -1,  257,   -1,   -1,
  260,   -1,   -1,  257,  264,   -1,  260,  267,  268,  269,
  264,   -1,   -1,  267,  268,  269,   -1,  257,   -1,   -1,
  260,   -1,   -1,  257,  264,   -1,  260,  267,  268,  269,
  264,   -1,   -1,  267,  268,  269,  257,  256,  257,  260,
   -1,  260,   -1,  264,   -1,  264,  267,  268,  269,  268,
  269,  257,   -1,   -1,  260,   -1,   -1,  257,  264,   -1,
  260,  267,  268,  269,  264,   -1,   -1,  267,  268,  269,
   -1,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,
   -1,  267,  268,  269,   -1,  257,   -1,   -1,  260,   -1,
  256,  257,  264,   -1,  260,  267,  268,  269,  264,  265,
  266,   -1,  268,  269,   -1,   -1,   -1,   -1,  274,  275,
  276,  277,  256,  257,   -1,   -1,  260,   -1,   -1,   -1,
  264,  265,  266,   -1,  268,  269,   -1,   -1,   -1,   -1,
  274,  275,  276,  277,  256,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,   -1,  266,   -1,  268,  269,
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=277;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","WHEN","WHILE","MAYOR_IGUAL","MENOR_IGUAL",
"ASIGNACION","DISTINTO","ENTERO","DOUBLE","CONST","DEFER",
};
final static String yyrule[] = {
"$accept : program",
"program : header_program '{' ejecucion '}' ';'",
"program : header_program",
"program : header_program '{' ejecucion",
"program : header_program '{' '}'",
"header_program : ID",
"declaracion_variables : tipo lista_variables ';'",
"declaracion_variables : definicion_constante ';'",
"declaracion_variables : lista_variables ';'",
"declaracion_variables : lista_variables",
"lista_variables : lista_variables ',' ID",
"lista_variables : ID",
"sentencia_declarable : declaracion_variables",
"sentencia_declarable : funcion",
"sentencia_declarable : diferimiento",
"funcion : header_funcion ejecucion_funcion",
"funcion : header_funcion",
"header_funcion : FUN ID '(' lista_parametros ')' ':' tipo",
"header_funcion : FUN ID '(' ')' ':' tipo",
"header_funcion : FUN '(' lista_parametros ')' ':' tipo",
"header_funcion : FUN '(' ')' ':' tipo",
"header_funcion : FUN ID '(' lista_parametros ')' tipo",
"lista_parametros : parametro",
"lista_parametros : parametro ',' parametro",
"parametro : tipo ID",
"parametro : ID",
"parametro : tipo",
"tipo : ENTERO",
"tipo : DOUBLE",
"ejecucion_funcion : '{' bloque_funcion RETURN '(' expresion ')' ';' '}' ';'",
"ejecucion_funcion : '{' RETURN '(' expresion ')' ';' '}' ';'",
"ejecucion_funcion : '{' bloque_funcion RETURN '(' expresion ')' ';' bloque_funcion '}'",
"bloque_funcion : bloque_funcion sentencia_funcion",
"bloque_funcion : sentencia_funcion",
"sentencia_funcion : sentencia",
"sentencia_funcion : seleccion_funcion",
"sentencia_funcion : seleccion_when_funcion",
"sentencia_funcion : iteracion_while_funcion",
"seleccion_funcion : IF condicion_salto_if then_seleccion_funcion ENDIF",
"seleccion_funcion : IF condicion_salto_if then_seleccion_funcion else_seleccion_funcion ENDIF",
"then_seleccion_funcion : THEN '{' ejecucion_control RETURN '(' expresion ')' '}' ';'",
"then_seleccion_funcion : THEN RETURN '(' expresion ')' ';'",
"else_seleccion_funcion : ELSE '{' ejecucion_control RETURN '(' expresion ')' '}' ';'",
"else_seleccion_funcion : ELSE RETURN '(' expresion ')' ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control RETURN '(' expresion ')' '}' ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN RETURN '(' expresion ')' ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN RETURN '(' expresion ')'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN RETURN ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN RETURN",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control RETURN '(' expresion ')' '}'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control RETURN expresion '}' ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control RETURN expresion '}'",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '(' expresion ')' '}' ';'",
"iteracion_while_funcion : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '(' expresion ')' '}' ';'",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '(' expresion ')' '}'",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '}' ';'",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN expresion",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN expresion ';'",
"iteracion_while_funcion : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '(' expresion ')' '}'",
"iteracion_while_funcion : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN expresion",
"iteracion_while_funcion : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN expresion ';'",
"diferimiento : DEFER sentencia_ejecutable",
"ejecucion_control : ejecucion_control sentencia_ejecutable",
"ejecucion_control : sentencia_ejecutable",
"ejecucion : ejecucion sentencia",
"ejecucion : sentencia",
"sentencia : sentencia_ejecutable",
"sentencia : sentencia_declarable",
"sentencia_ejecutable : asignacion ';'",
"sentencia_ejecutable : seleccion ';'",
"sentencia_ejecutable : impresion ';'",
"sentencia_ejecutable : seleccion_when ';'",
"sentencia_ejecutable : iteracion_while ';'",
"sentencia_ejecutable : error ';'",
"seleccion_when : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control '}' ';'",
"seleccion_when : WHEN '(' comparacion_bool ')' THEN sentencia_ejecutable ';'",
"seleccion_when : WHEN '(' comparacion_bool ')' THEN",
"seleccion_when : WHEN '(' ')' THEN '{' ejecucion_control '}'",
"seleccion_when : WHEN '(' comparacion_bool ')' '{' ejecucion_control '}'",
"seleccion_when : WHEN comparacion_bool THEN '{' ejecucion_control '}'",
"seleccion_when : WHEN THEN '{' ejecucion_control '}'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' sentencia_ejecutable ';'",
"iteracion_while : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' sentencia_ejecutable ';'",
"iteracion_while : WHILE ':' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' '}' ';'",
"iteracion_while : WHILE '(' ')' ':' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' '(' asignacion ')' sentencia_ejecutable ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' sentencia_ejecutable ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' ')' sentencia_ejecutable ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' asignacion sentencia_ejecutable ';'",
"seleccion_iteracion : IF condicion_salto_if then_seleccion_iteracion ENDIF",
"seleccion_iteracion : IF condicion_salto_if then_seleccion_iteracion else_seleccion_iteracion ENDIF",
"seleccion_iteracion : IF condicion_salto_if then_seleccion_iteracion",
"seleccion_iteracion : IF condicion_salto_if ENDIF",
"seleccion_iteracion : IF then_seleccion_iteracion ENDIF",
"seleccion_iteracion : IF else_seleccion_iteracion ENDIF",
"then_seleccion_iteracion : THEN '{' ejecucion_iteracion '}' ';'",
"then_seleccion_iteracion : THEN break ';'",
"then_seleccion_iteracion : THEN ejecucion_iteracion '}' ';'",
"then_seleccion_iteracion : THEN '{' ejecucion_iteracion ';'",
"else_seleccion_iteracion : ELSE '{' ejecucion_iteracion '}' ';'",
"else_seleccion_iteracion : ELSE RETURN '(' expresion ')' ';'",
"else_seleccion_iteracion : ELSE RETURN '(' ')' ';'",
"else_seleccion_iteracion : ELSE RETURN '(' expresion ')'",
"else_seleccion_iteracion : ELSE RETURN ';'",
"else_seleccion_iteracion : ELSE RETURN",
"else_seleccion_iteracion : ELSE '{' ejecucion_iteracion '}'",
"else_seleccion_iteracion : ELSE '{' ejecucion_iteracion",
"else_seleccion_iteracion : ELSE ejecucion_iteracion ';'",
"seleccion_when_iteracion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_iteracion '}' ';'",
"seleccion_when_iteracion : WHEN '(' comparacion_bool ')' THEN break ';'",
"seleccion_when_iteracion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_iteracion ';'",
"seleccion_when_iteracion : WHEN '(' ')' THEN '{' ejecucion_iteracion '}' ';'",
"seleccion_when_iteracion : WHEN '(' ')' THEN break ';'",
"seleccion_when_iteracion : WHEN comparacion_bool THEN break ';'",
"ejecucion_iteracion : ejecucion_iteracion sentencia_iteracion",
"ejecucion_iteracion : sentencia_iteracion",
"sentencia_iteracion : asignacion ';'",
"sentencia_iteracion : seleccion_iteracion ';'",
"sentencia_iteracion : impresion ';'",
"sentencia_iteracion : seleccion_when_iteracion ';'",
"sentencia_iteracion : iteracion_while ';'",
"sentencia_iteracion : break ';'",
"break : BREAK",
"break : BREAK ID",
"seleccion : IF condicion_salto_if then_seleccion ENDIF",
"seleccion : IF condicion_salto_if then_seleccion else_seleccion ENDIF",
"seleccion : IF condicion_salto_if '{' ejecucion_control '}' else_seleccion ENDIF",
"seleccion : IF condicion_salto_if then_seleccion '{' ejecucion_control '}' ENDIF",
"seleccion : IF condicion_salto_if THEN ENDIF",
"seleccion : IF condicion_salto_if then_seleccion ELSE ENDIF",
"seleccion : IF condicion_salto_if THEN else_seleccion ENDIF",
"then_seleccion : THEN '{' ejecucion_control '}' ';'",
"then_seleccion : THEN sentencia_ejecutable ';'",
"then_seleccion : THEN '{' ejecucion_control",
"then_seleccion : THEN '{' '}'",
"then_seleccion : THEN ejecucion_control '}'",
"else_seleccion : ELSE '{' ejecucion_control '}' ';'",
"else_seleccion : ELSE sentencia_ejecutable ';'",
"else_seleccion : ELSE '{' '}' ';'",
"else_seleccion : ELSE ejecucion_control '}' ';'",
"condicion_salto_if : '(' comparacion_bool ')'",
"condicion_salto_if : comparacion_bool ')'",
"condicion_salto_if : '(' comparacion_bool",
"condicion_salto_if : comparacion_bool",
"condicion_salto_if : '(' ')'",
"comparacion_bool : expresion comparador expresion",
"comparacion_bool : expresion comparador",
"comparacion_bool : comparador expresion",
"comparacion_bool : comparador",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"comparador : MAYOR_IGUAL",
"comparador : MENOR_IGUAL",
"comparador : DISTINTO",
"lista_asignaciones : lista_asignaciones asignacion",
"lista_asignaciones : asignacion",
"definicion_constante : CONST lista_asignaciones",
"asignacion : ID ASIGNACION expresion",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"expresion : tipo '(' expresion '+' termino ')'",
"expresion : tipo '(' expresion '-' termino ')'",
"expresion : tipo '(' termino ')'",
"expresion : tipo '(' expresion '+' ')'",
"expresion : tipo '(' expresion '-' ')'",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"combinacion_terminales : ID",
"combinacion_terminales : CTE",
"combinacion_terminales : '-' CTE",
"factor : combinacion_terminales",
"factor : ID '(' combinacion_terminales ',' combinacion_terminales ')'",
"factor : ID '(' combinacion_terminales ')'",
"factor : ID '(' ')'",
"impresion : OUT '(' CADENA ')' ';'",
"impresion : OUT '(' ')'",
"impresion : OUT",
"impresion : OUT CADENA",
};

//#line 340 "gramatica.y"


public static final String ERROR = "Error";
public static final String WARNING = "Warning";

public static List<String> errores_sintacticos = new ArrayList<>();
public static List<Character> buffer = new ArrayList<>();
public static List<String> estructura = new ArrayList<>();
public static AnalisisLexico AL;
public static boolean errores_compilacion = false;

void yyerror(String mensaje) {
        // funcion utilizada para imprimir errores que produce yacc
        System.out.println("Error yacc: " + mensaje);
}
public void addEstructura(String s){
    estructura.add(s);
}

public List<String> getEstructura() {
    return estructura;
}

public List<String> getErrores() {
    return errores_sintacticos;
}

public static void agregarEstructura(String s){
    estructura.add(s);
}

public static void agregarError(List<String> errores, String tipo, String error) {
        if (tipo.equals("ERROR")) {
                errores_compilacion = true;
        }

        int linea_actual = AnalisisLexico.getLineaActual();

        errores.add(tipo + " (Linea " + linea_actual + "): " + error);
}


int yylex() {
    int tok = 0;
    //System.out.print("YYLEX, " + buffer.get(0) + " - ");
    Token t = AL.getToken(buffer);
    if (t != null) {
        if (t.getId() == 0) {
                return 0;
        }
        tok = t.getId();
        if (t.getAtributo() != null) {
            yylval = new ParserVal(t.getAtributo());
        }
    }
    System.out.println("YYLEX - " + tok);
    return tok;
}

public Double getDouble(String d){
    if (d.contains("D")){
        var w = d.split("D");
        return Math.pow(Double.valueOf(w[0]),Double.valueOf(w[1]));
    } else {
        return Double.valueOf(d);
    }

}

public String negarConstante(String c) { // AHORA?
    String ptr = TablaSimbolos.obtenerSimbolo(c);
    String nuevo = '-' + c;
    if (c.contains(".")) {
        Double d = getDouble(c);
        if ((d > Math.pow(-1.7976931348623157,308) && d < Math.pow(-2.2250738585072014,-308))){
            if (TablaSimbolos.obtenerSimbolo(nuevo) == null){ // si no es null es porque ya se agrego anteriormente la misma constante.
                Lexema lexema = new Lexema(d);
                TablaSimbolos.agregarSimbolo(nuevo,lexema); // falta chequear que no se este usando la misma constante positiva y asi borrarla.
            }
        } else {
            agregarError(errores_sintacticos, "ERROR", "El numero " + c + " esta fuera de rango.");
            nuevo = "";
        }
    } else {
        agregarError(errores_sintacticos, "WARNING", "El numero " + c + " fue truncado al valor minimo (0), ya que es menor que este mismo");
        nuevo = "0";
        TablaSimbolos.truncarEntero(ptr,nuevo);
    }
    return nuevo;
}

public void setSintactico(List<Character> buffer, AnalisisLexico AL) {
    this.AL = AL;
    this.buffer = buffer;
}
//#line 1003 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 22 "gramatica.y"
{addEstructura("programa");}
break;
case 2:
//#line 23 "gramatica.y"
{addEstructura("programa sin ejecucion");}
break;
case 3:
//#line 24 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se esperaba un '}' al final del programa");}
break;
case 4:
//#line 25 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se esperaba una sentencia de ejecucion");}
break;
case 8:
//#line 38 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un tipo para declaracion_variable");}
break;
case 9:
//#line 39 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' al final de la declaracion");}
break;
case 12:
//#line 46 "gramatica.y"
{addEstructura("declaracion variables");}
break;
case 13:
//#line 47 "gramatica.y"
{addEstructura("declaracion funcion");}
break;
case 14:
//#line 48 "gramatica.y"
{addEstructura("diferimiento");}
break;
case 16:
//#line 52 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una ejecucion_funcion");}
break;
case 19:
//#line 57 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el nombre de la funcion");}
break;
case 20:
//#line 58 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el nombre de la funcion");}
break;
case 21:
//#line 59 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el ':' luego de asignar los parametros");}
break;
case 25:
//#line 70 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el tipo del parametro");}
break;
case 26:
//#line 71 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el nombre del parametro");}
break;
case 31:
//#line 82 "gramatica.y"
{agregarError(errores_sintacticos,"Error", "El RETURN debe ser la ultima sentencia de la funcion");}
break;
case 35:
//#line 92 "gramatica.y"
{addEstructura("if en funcion");}
break;
case 36:
//#line 93 "gramatica.y"
{addEstructura("when en funcion");}
break;
case 37:
//#line 94 "gramatica.y"
{addEstructura("while en funcion");}
break;
case 46:
//#line 112 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' al final de la expresion");}
break;
case 47:
//#line 113 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera la expresion de retorno");}
break;
case 48:
//#line 114 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una expresion de retorno y un ';' al final");}
break;
case 49:
//#line 115 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' al final de '}'");}
break;
case 50:
//#line 116 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la expresion este entre parentesis");}
break;
case 51:
//#line 117 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' al final y que la expresion se encuentre entre parentesis");}
break;
case 54:
//#line 123 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' luego de '}' ");}
break;
case 55:
//#line 124 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una expresion luego del RETURN");}
break;
case 56:
//#line 125 "gramatica.y"
{agregarError(errores_sintacticos,"Error","falta los parentesis en la expresion, falta '}' y un ';'");}
break;
case 57:
//#line 126 "gramatica.y"
{agregarError(errores_sintacticos,"Error","falta los parentesis en la expresion y un '}' para el cierre");}
break;
case 58:
//#line 127 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' luego de '}' ");}
break;
case 59:
//#line 128 "gramatica.y"
{agregarError(errores_sintacticos,"Error","falta los parentesis en la expresion, falta '}' y un ';'");}
break;
case 60:
//#line 129 "gramatica.y"
{agregarError(errores_sintacticos,"Error","falta los parentesis en la expresion y un '}' para el cierre");}
break;
case 69:
//#line 149 "gramatica.y"
{addEstructura("if");}
break;
case 70:
//#line 150 "gramatica.y"
{addEstructura("impresion");}
break;
case 71:
//#line 151 "gramatica.y"
{addEstructura("when");}
break;
case 72:
//#line 152 "gramatica.y"
{addEstructura("while");}
break;
case 76:
//#line 160 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una ejecucion y un ';' ");}
break;
case 77:
//#line 161 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una comparacion_bool dentro de '(' ')' ");}
break;
case 78:
//#line 162 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un THEN luego de la comparacion_bool");}
break;
case 79:
//#line 163 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la comparacion_bool se encuentre encerrada con '(' ')' ");}
break;
case 80:
//#line 164 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una comparacion_bool encerrado entre '(' ')' ");}
break;
case 85:
//#line 172 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una comparacion_bool antes del ':' ");}
break;
case 86:
//#line 173 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera ':' luego de la comparacion_bool");}
break;
case 87:
//#line 174 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una ejecucion luego de la ASIGNACION");}
break;
case 88:
//#line 175 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una comparacion_bool dentro de los '(' ')' ");}
break;
case 89:
//#line 176 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una asignacion dentro de los '(' ')'  ");}
break;
case 90:
//#line 177 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ':' luego de la comparacion_bool");}
break;
case 91:
//#line 178 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una asignacion luego del ':' ");}
break;
case 92:
//#line 179 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una asignacion entre los parentesis");}
break;
case 93:
//#line 180 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la asignacion se encuentre entre parentesis");}
break;
case 96:
//#line 185 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ENDIF al final del IF");}
break;
case 97:
//#line 186 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya then_seleccion_iteracion ");}
break;
case 98:
//#line 187 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una condicion_salto_if");}
break;
case 99:
//#line 188 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una condicion_salto_if");}
break;
case 102:
//#line 193 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que antes de la ejecucucion_iteracion haya una { ");}
break;
case 103:
//#line 194 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que luego de la ejecucion_iteracion haya una llave");}
break;
case 106:
//#line 203 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una expresion entre los parentesis");}
break;
case 107:
//#line 204 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya un ';' luego de la expresion ");}
break;
case 108:
//#line 205 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que luego del return haya una expresion entre parentesis");}
break;
case 109:
//#line 206 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que luego del return haya una expresion entre parentesis y un ';'al final");}
break;
case 110:
//#line 207 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya un ';' luego de '}' ");}
break;
case 111:
//#line 208 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una '}' y un ';' ");}
break;
case 112:
//#line 209 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya que la ejecucion_iteracion se encuentre entre { }");}
break;
case 115:
//#line 218 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un '}' antes del ';'");}
break;
case 116:
//#line 219 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una comparacion_bool entre los parentesis");}
break;
case 117:
//#line 220 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una comparacion_bool entre parentesis");}
break;
case 118:
//#line 221 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la comparacion_bool se encuentre entre parentesis");}
break;
case 121:
//#line 228 "gramatica.y"
{addEstructura("asignacion");}
break;
case 122:
//#line 229 "gramatica.y"
{addEstructura("if en iteracion");}
break;
case 123:
//#line 230 "gramatica.y"
{addEstructura("impresion");}
break;
case 124:
//#line 231 "gramatica.y"
{addEstructura("when en iteracion");}
break;
case 125:
//#line 232 "gramatica.y"
{addEstructura("while");}
break;
case 126:
//#line 233 "gramatica.y"
{addEstructura("break");}
break;
case 131:
//#line 243 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se esperan un THEN");}
break;
case 132:
//#line 244 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ELSE");}
break;
case 133:
//#line 245 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera bloque de sentencias luego del THEN");}
break;
case 134:
//#line 246 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera bloque de sentencias luego del ELSE");}
break;
case 135:
//#line 247 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera bloque de sentencias luego del THEN");}
break;
case 138:
//#line 254 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un '}' al de las sentencias del THEN");}
break;
case 139:
//#line 255 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera sentencias dentro del cuerpo del THEN");}
break;
case 140:
//#line 256 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un '{' para comenzar el THEN");}
break;
case 143:
//#line 262 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera sentencias dentro del cuerpo del ELSE");}
break;
case 144:
//#line 263 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un '{' luego del ELSE");}
break;
case 146:
//#line 268 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera '(' al principio de la comparacion");}
break;
case 147:
//#line 269 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera ')' al final de la comparacion_bool");}
break;
case 148:
//#line 270 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la comparacion_bool se encuentre entre parentesis");}
break;
case 149:
//#line 271 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una condicion");}
break;
case 150:
//#line 274 "gramatica.y"
{addEstructura("comparacion");}
break;
case 151:
//#line 277 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una expresion luego del comparador");}
break;
case 152:
//#line 278 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una expresion antes del comparador");}
break;
case 153:
//#line 279 "gramatica.y"
{agregarError(errores_sintacticos,"Error","se espera expresiones para poder realizar las comparaciones");}
break;
case 163:
//#line 296 "gramatica.y"
{addEstructura(val_peek(2).sval + " asignacion " + val_peek(0).sval);}
break;
case 167:
//#line 303 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Conversion explicita no permitida");}
break;
case 168:
//#line 304 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Conversion explicita no permitida");}
break;
case 169:
//#line 305 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Conversion explicita no permitida");}
break;
case 170:
//#line 306 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una termino luego del signo '+' y conversion explicita no permitida");}
break;
case 171:
//#line 307 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una termino luego del signo '-' y conversion explicita no permitida");}
break;
case 177:
//#line 318 "gramatica.y"
{
            String ptr = TablaSimbolos.obtenerSimbolo(val_peek(0).sval);
            negarConstante(val_peek(0).sval);
    }
break;
case 183:
//#line 333 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una cadena dentro del OUT");}
break;
case 184:
//#line 334 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera () con una cadena dentro");}
break;
case 185:
//#line 335 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un que la CADENA se encuentre entre parentesis");}
break;
//#line 1559 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
