//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
import EtapaLexico.Semantica.*;
import EtapaLexico.AnalisisLexico;
import EtapaLexico.Lexema;
import EtapaLexico.Tokens.Token;
import EtapaLexico.TablaSimbolos;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//#line 27 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short WHEN=268;
public final static short WHILE=269;
public final static short MAYOR_IGUAL=270;
public final static short MENOR_IGUAL=271;
public final static short ASIGNACION=272;
public final static short DISTINTO=273;
public final static short ENTERO=274;
public final static short DOUBLE=275;
public final static short CONST=276;
public final static short DEFER=277;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    1,    3,    3,    3,    3,    5,
    5,    7,    7,    7,    8,    8,   10,   10,   10,   10,
   10,   12,   12,   13,   13,   13,    4,    4,   11,   11,
   11,   14,   14,   16,   16,   16,   16,   18,   18,   18,
   18,   22,   22,   23,   23,   19,   19,   19,   19,   19,
   19,   19,   19,   20,   20,   20,   20,   20,   20,   20,
   20,   20,    9,   26,   26,    2,    2,   17,   17,   30,
   30,   30,   30,   30,   30,   33,   33,   33,   33,   33,
   33,   33,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,   34,   34,   34,   35,   35,   35,   35,   35,
   35,   36,   36,   36,   36,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   39,   39,   39,   39,   39,   39,
   29,   29,   40,   40,   40,   40,   40,   40,   38,   38,
   31,   31,   31,   31,   31,   31,   31,   24,   24,   24,
   24,   24,   25,   25,   25,   25,   21,   21,   21,   21,
   21,   27,   27,   27,   27,   41,   41,   41,   41,   41,
   41,   42,   42,    6,   28,   15,   15,   15,   15,   15,
   15,   15,   15,   43,   43,   43,   45,   45,   45,   44,
   44,   44,   44,   32,   32,   32,   32,
};
final static short yylen[] = {                            2,
    5,    1,    3,    3,    1,    3,    2,    2,    1,    3,
    1,    1,    1,    1,    2,    1,    7,    6,    6,    5,
    6,    1,    3,    2,    1,    1,    1,    1,    9,    8,
    9,    2,    1,    1,    2,    1,    1,    4,    5,    5,
    5,   10,    6,   10,    6,   14,   10,    9,    7,    6,
   12,   11,   10,   17,   19,   15,   13,   12,   13,   17,
   14,   15,    2,    2,    1,    2,    1,    1,    1,    2,
    2,    2,    2,    1,    2,    9,    7,    5,    7,    7,
    6,    5,   12,    9,   14,   11,    9,   11,   11,   11,
   11,    9,    7,    9,    8,    4,    5,    3,    3,    3,
    3,    5,    3,    4,    4,    5,    3,    5,    5,    3,
    2,    4,    3,    3,    9,    7,    8,    8,    6,    5,
    2,    1,    2,    2,    2,    2,    1,    2,    1,    2,
    4,    5,    7,    7,    4,    5,    5,    5,    2,    3,
    3,    3,    5,    2,    4,    4,    3,    2,    2,    1,
    2,    3,    2,    2,    1,    1,    1,    1,    1,    1,
    1,    2,    1,    2,    3,    3,    3,    1,    6,    6,
    4,    5,    5,    3,    3,    1,    1,    1,    2,    1,
    6,    4,    3,    4,    3,    1,    2,
};
final static short yydefred[] = {                         0,
    5,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   27,   28,    0,    0,    4,    0,   12,    0,    0,
    0,   69,   13,   14,    0,   67,    0,   68,    0,    0,
    0,   74,   75,    0,    0,    0,  178,  159,  160,  161,
    0,    0,  156,  157,  158,    0,    0,    0,    0,    0,
    0,  176,  180,  187,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  163,    0,    0,   63,    0,   66,   11,
    0,    8,    0,    7,    0,   15,   70,   71,   72,   73,
    0,    0,    0,  179,  151,    0,    0,    0,    0,    0,
    0,    0,    0,  148,    0,    0,    0,    0,  185,    0,
   25,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  162,    1,    6,   10,    0,    0,    0,    0,
    0,    0,   33,   34,    0,   36,   37,    0,  177,  183,
    0,  147,    0,    0,    0,    0,    0,    0,  135,    0,
    0,    0,    0,    0,   65,    0,  131,    0,    0,  174,
  175,  184,    0,    0,    0,   24,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   32,   35,    0,    0,  182,    0,    0,  171,    0,
    0,    0,  141,    0,  137,  142,   64,    0,  136,    0,
  132,    0,    0,   20,    0,   23,   82,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  172,    0,  173,    0,    0,
    0,    0,    0,    0,    0,   18,    0,   21,   19,    0,
    0,    0,    0,   81,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   38,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  181,  169,  170,  145,    0,  146,
  138,  133,  134,   17,   79,    0,   77,   80,    0,    0,
    0,    0,    0,   93,    0,    0,    0,    0,    0,    0,
  127,    0,    0,    0,  122,    0,    0,    0,    0,    0,
   39,   41,   40,    0,    0,    0,    0,    0,  143,    0,
    0,    0,    0,    0,    0,    0,   95,    0,    0,    0,
    0,    0,  130,    0,    0,  123,    0,  121,  125,  124,
  128,  126,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   76,    0,    0,   92,    0,   94,    0,
   84,    0,    0,    0,    0,    0,    0,    0,   99,    0,
  100,  101,    0,    0,    0,   87,    0,    0,    0,    0,
    0,   30,   49,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  110,    0,    0,
  114,    0,   96,    0,    0,    0,    0,    0,   43,    0,
    0,    0,    0,    0,    0,   29,   31,    0,   86,   90,
   88,   91,   89,    0,    0,  105,  104,    0,    0,    0,
   97,    0,    0,    0,  120,    0,    0,   45,    0,    0,
    0,    0,    0,    0,   83,  102,  108,  109,  106,    0,
  119,    0,    0,    0,    0,    0,   47,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,   52,    0,
   85,  118,    0,  117,    0,   42,    0,   51,    0,    0,
    0,    0,  115,    0,   44,    0,   57,    0,   59,    0,
    0,   46,    0,    0,   62,   56,    0,    0,    0,   60,
    0,   54,    0,   55,
};
final static short yydgoto[] = {                          2,
    3,   17,   18,   46,   20,   21,   22,   23,   24,   25,
   76,  104,  105,  122,   47,  123,  124,  125,  126,  127,
   48,  208,  246,   93,  141,  181,   49,   27,  279,  187,
   29,   30,   31,   32,  282,  311,  312,  283,  284,  285,
   50,   65,   51,   52,   53,
};
final static short yysindex[] = {                      -230,
    0,    0,  -35, 1044,   43,  -38,  595,  -30,  -33,  375,
   28,    0,    0, -160,  374,    0, 1066,    0, -134,   -1,
  102,    0,    0,    0,   14,    0,  115,    0,  124,  140,
  144,    0,    0,   39,  -54,  204,    0,    0,    0,    0,
   16,  411,    0,    0,    0,  246,   86, -104,  248,   39,
   19,    0,    0,    0,  -28,  253,  -39,  180,  559,   51,
  646,  290,   67,    0, -160,  -38,    0,  275,    0,    0,
   62,    0,   88,    0, 1549,    0,    0,    0,    0,    0,
   87,  306,    9,    0,    0,  308,   39,  -37,  -37,   39,
  586,  374,  -91,    0,   87,  -37,  -37,  309,    0,  -18,
    0,  296,   98,  323,  334,  374,  118,  341,  271,  344,
  359, -160,    0,    0,    0,    0,  -23,  595,  365,  443,
   38, 1571,    0,    0,  349,    0,    0,  291,    0,    0,
  109,    0,  111,   93,   19,   19,   87,  686,    0, 1333,
  148, 1339,    0, 1349,    0,  -52,    0,  374,  159,    0,
    0,    0,  367,  366, -210,    0,  369, -174, 1355,  311,
  -94,  374,  398,   41,  399,  170,  -74,   39,  559,  646,
  405,    0,    0,  407,   48,    0,   34,   44,    0, 1373,
 1375,    0,    0, 1389,    0,    0,    0,  187,    0, 1395,
    0, -210,  -11,    0, -210,    0,    0,  374, 1187,  374,
 1410, -160, -160,  112,  335,  417,  868, -149,  -78,  282,
  418,  423,   39,  419,  424,    0,   97,    0,  172,  421,
 1416,  422,  432,  219,  229,    0, -210,    0,    0, 1426,
  374,  435, 1436,    0,  459,  465,  -29,  800,  461,  706,
  291,  478, 1333, 1147,    0,  258,  261,  -87,  262,  477,
  -67,   50,  322,  507,    0,    0,    0,    0,  491,    0,
    0,    0,    0,    0,    0, 1442,    0,    0,  433, 1193,
 1209,  517,  509,    0,  352,  332,  614,  532,  928,  544,
    0,  546,  547,  552,    0,  560,   39,  915,  562, 1373,
    0,    0,    0,  483, 1161,  567,  553, -160,    0,  557,
  706,  706,  565,  706,  582, 1215,    0, 1225, 1171,  -68,
  355,  381,    0,  777,  386,    0,  592,    0,    0,    0,
    0,    0,  594,  342,  613,   39, 1274,  599,   13,  374,
  -29, 1089,  620,    0, 1456, 1469,    0, 1475,    0, 1489,
    0,  706, 1495,  604,   36,  706,  633,  605,    0,   53,
    0,    0,  404,  625,  400,    0,  630,  612,   39,  348,
  632,    0,    0,   39, 1289,  636,  619, 1111, 1239,  621,
  624,  629,  631, 1509,  700,  634,    0,    0,    3, 1515,
    0,    0,    0,  410, -109,  428,  635, -160,    0,  376,
  637,   39,  500,   -6, 1249,    0,    0,  706,    0,    0,
    0,    0,    0,  638,  639,    0,    0,  640,  501,  644,
    0,  706,  651, -108,    0,  654,  661,    0,  536,  662,
   39,   24, 1489, 1529,    0,    0,    0,    0,    0, 1535,
    0,  706,  663, 1255,  554,  666,    0,  542,  669,  303,
  673,  678,  769,    0,  706,  683,  577,  -43,    0,   -3,
    0,    0,  691,    0, 1308,    0,  692,    0,  580,  695,
   39,   66,    0,    1,    0,  705,    0,  543,    0,   39,
   83,    0,  -34,  549,    0,    0,  647,  -31,  714,    0,
  667,    0,  717,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,  786,    0,    0,  186,    0,  740,    0,    0,
    0,    0,    0,    0,    0,    0,  804,    0,    0,  210,
    0,    0,    0,    0,  233,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  470,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -99,  -36,
  492,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  756,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  455,    0,    0,    0,    0,  -83,    0,    0,    0,  -20,
    0,    0,    0,    0,   18,    0,    0,    0,    0,    0,
    0,    0,  209,    0,  778,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  737,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  164,  514,  537,   22,    0,    0,    0,
    0,    0, 1133,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1323,    0,   78,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  124,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  343,    0,  356,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  761,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   78,    0,    0,
    0,    0,    0,    0,  124,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  883,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  558,    0,    0,    0,    0,  767,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  670,    0,    0,  578,
    0,  259,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  581,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  952,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  974,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  997,    0,    0,    0,    0,    0,    0,    0,    0,
 1021,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,    0,    5,  821,    0,    0,    0,    0,    0,
    0,  745,  689,  519,  -17, -121,  116,    0,    0,    0,
 -107,    0,  648,  693,  215,  -88,   -4,  -14, 1224,  100,
    0,  643,    0,  770,    0,  548,  506, -278,    0,  746,
  814,    0,  451,  223,  -57,
};
final static int YYTABLESIZE=1848;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         64,
  172,  102,  142,  144,  155,   60,   57,   41,   19,   55,
  167,  271,   99,  412,  432,  459,   81,  159,   92,   35,
  153,   19,  153,  150,  477,  131,    1,  481,  200,  344,
  348,  148,   95,  421,  166,  290,  461,   86,   41,  149,
  470,   41,   73,  408,  148,   41,  227,   41,   92,  130,
  113,  184,  364,   41,  108,  200,  111,   72,  154,  190,
   96,  103,  152,   12,   13,   97,   88,   61,   89,  133,
  180,  363,  137,  201,  216,  379,  387,  170,   41,   19,
  203,  458,  101,   41,  218,   62,  155,    4,   41,  203,
  476,  221,   41,  480,  378,   62,   63,  165,  204,   12,
   13,   33,  153,   28,  103,   73,  413,  296,   88,  230,
   89,  233,  244,  245,   67,   60,   28,  215,  142,   26,
  115,  460,   70,  174,  469,   88,   19,   89,   88,   88,
   89,   89,   69,  179,   96,  433,   75,  256,   96,   97,
  154,  475,  266,   97,  152,   44,   45,   43,  439,  176,
  210,  237,  175,  177,  288,  178,   91,  276,  276,  194,
   74,  150,  103,  150,  211,  212,  199,  310,    5,   66,
  146,  147,    7,   77,   28,  189,    8,  149,  289,  149,
   10,   11,   78,  248,  147,   11,  207,  235,  236,  238,
  143,  145,  308,  295,  349,  253,  226,  228,   79,  229,
  140,  327,   80,    5,   66,  145,  168,    7,  168,    9,
  189,    8,  257,   96,   82,   10,   11,  101,   97,   36,
   37,   28,  272,   56,  155,  278,  155,   63,   54,   11,
   98,  264,   16,   34,   12,   13,  286,  182,  101,  145,
  153,  365,  153,   83,   11,  182,  172,  145,   34,   26,
   36,   37,   26,   36,   37,   12,   13,   36,   37,   36,
   37,  145,   12,   13,  278,  129,   37,   12,   13,  324,
   12,   13,  315,   84,   12,   13,   12,   13,  154,  145,
  154,  238,  152,  333,  152,   87,  278,  278,   94,  278,
   36,   37,  100,  278,  278,   36,   37,  145,  232,  145,
   36,   37,  106,  239,  129,   37,  143,  149,  360,  354,
   11,  109,   12,   13,  309,  383,  366,  128,  150,  151,
  278,  278,  250,  278,   88,  278,   89,  278,  278,  112,
  145,  278,  278,  114,    9,   41,   19,  273,   34,  140,
  140,  390,  145,  182,  116,  128,  393,  182,  132,  152,
   44,   45,   43,  155,  156,   38,   39,   16,   40,  278,
  278,  409,  297,  157,   88,  278,   89,    5,   66,  303,
  305,    7,   19,  416,  419,    8,  422,  158,  160,   10,
   11,  161,  358,  278,   88,  166,   89,  166,  391,  145,
   88,   42,   89,  162,  232,  239,   41,  278,  167,  164,
  167,  163,  224,  438,  168,  341,  193,  173,  278,  278,
  185,   44,   45,   43,   59,  278,  417,  278,   88,   41,
   89,  191,  247,  149,  192,  278,  195,  404,  278,  145,
  278,   28,  462,  198,   44,   45,   43,  202,  206,  205,
  278,   11,   11,  468,  213,   11,  471,  214,  138,   11,
   11,   85,  474,   11,   11,   41,  241,  240,  251,   11,
   11,   11,   11,  252,  255,    9,    9,   28,  399,    9,
   44,   45,   43,    9,    9,    9,  254,    9,    9,  258,
  260,  262,  169,    9,    9,    9,    9,   41,   16,   16,
  261,  263,   16,  267,  341,  165,   16,   16,   16,  269,
   16,   16,   44,   45,   43,  270,   16,   16,   16,   16,
  177,  177,  177,  165,  177,  128,  177,  287,  128,  274,
  291,  107,  128,  292,  293,  128,  128,  128,  177,  177,
  177,  177,  168,  399,  168,  294,  168,  134,  135,  136,
  420,  428,   88,   88,   89,   89,  298,   36,   37,  299,
  168,  168,  168,  168,  166,  301,  166,  306,  166,   66,
   38,   39,  275,   40,   12,   13,    8,  307,  450,  276,
  277,   11,  166,  166,  166,  166,  436,  167,   88,  167,
   89,  167,  448,  473,   88,   88,   89,   89,  313,  478,
  316,   88,  177,   89,  177,  167,  167,  167,  167,  107,
  323,  326,  319,   41,  320,  321,  331,  328,   36,   37,
  322,  332,  308,  309,  168,  334,  168,  351,   44,   45,
   43,   38,   39,  337,   40,   12,   13,  217,  219,    5,
   66,   36,   37,    7,   42,   58,  166,    8,  166,   41,
  339,   10,   11,  352,   38,   39,  355,   40,   12,   13,
  356,  357,  359,  314,   44,   45,   43,  362,   41,  167,
  369,  167,  377,  382,  385,  386,  276,   36,   37,  388,
  389,  392,  411,   44,   45,   43,  395,  396,  446,  400,
   38,   39,  401,   40,   12,   13,  110,  402,  414,  403,
   41,  381,  407,  415,  434,  418,  425,  426,  427,   36,
   37,  457,  429,   58,  466,   44,   45,   43,  140,  431,
  165,  165,   38,   39,  165,   40,   12,   13,  165,  435,
  437,  444,  165,  165,  447,  177,  177,  449,  103,  177,
  177,  451,  177,  177,  177,  177,  452,  177,  177,  177,
  177,  456,  177,  177,  177,  177,  177,  168,  168,  463,
  465,  168,  168,  467,  168,  168,  168,  168,  406,  168,
  168,  168,  168,  472,  168,  168,  168,  168,  168,  166,
  166,  479,  482,  166,  166,  484,  166,  166,  166,  166,
   11,  166,  166,  166,  166,    2,  166,  166,  166,  166,
  166,  483,  167,  167,  128,   11,  167,  167,  186,  167,
  167,  167,  167,    3,  167,  167,  167,  167,  180,  167,
  167,  167,  167,  167,  164,   36,   37,  353,   22,  129,
  111,   41,    5,   66,  405,   98,    7,  454,   38,   39,
    8,   40,   12,   13,   10,   11,   44,   45,   43,   71,
  113,    5,   66,  112,  154,    7,  196,  138,  139,    8,
  368,   36,   37,   10,   11,  384,  249,  350,   77,  209,
   90,   11,    0,    0,   38,   39,    0,   40,   12,   13,
   36,   37,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  280,   38,   39,    0,   40,   12,   13,   66,
    0,    0,  275,  453,    0,    0,    8,    0,    0,  276,
  277,   11,   36,   37,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   38,   39,    0,   40,   12,
   13,  280,    0,    0,    0,    0,  128,    0,    0,  128,
    0,  103,  103,  128,    0,    0,  128,  128,  128,    0,
    0,    5,   66,  280,  280,    7,  280,    0,    0,    8,
  280,  280,    0,   10,   11,    0,   66,    0,    0,  275,
    0,    0,   66,    8,    0,  275,  276,  277,   11,    8,
    0,    0,  276,  277,   11,    0,    0,  280,  280,    0,
  280,    0,  280,    0,  280,  280,    0,    0,  280,  280,
  243,    0,   11,   11,    0,    0,   11,    0,    0,    0,
   11,   11,   11,    0,   11,   11,    0,   50,    0,  281,
   11,   11,   11,   11,    0,    0,  280,  280,    0,    0,
    0,    0,  280,    0,  318,   66,    0,    0,  275,    0,
    0,    0,    8,   36,   37,  276,  277,   11,    0,  223,
  280,    0,    0,    0,    0,    0,   38,   39,  281,   40,
   12,   13,  317,    0,  280,    5,   66,    0,    0,    7,
    0,    0,    0,    8,    0,  280,  280,   10,   11,    0,
  281,  281,  280,  281,  280,    0,   48,  281,  281,    0,
  318,  318,  280,  318,    0,  280,    0,  280,  318,    0,
    0,    0,  318,    0,    0,    0,    0,  280,   53,    0,
    0,    0,    0,    0,  281,  281,    0,  281,    0,  281,
    0,  281,  281,    0,    0,  281,  281,    0,    0,  318,
  318,   58,    0,    5,   66,  318,    0,    7,    0,  138,
  139,    8,    0,  242,    0,   10,   11,    0,   50,   50,
    0,    0,   50,  281,  281,   61,   50,   50,   50,  281,
   50,   50,    0,    0,    0,    0,   50,   50,   50,   50,
    0,    0,    0,    0,    0,    0,    0,  281,   16,  318,
    5,   66,    0,    0,    7,  318,    0,    0,    8,    0,
  325,  281,   10,   11,   66,  318,    0,  275,  318,    0,
   68,    8,  281,  281,  276,  277,   11,    0,    0,  281,
  318,  281,    0,    0,    0,    0,    0,   48,   48,  281,
    0,   48,  281,  367,  281,   48,   48,   48,    0,   48,
   48,    0,    0,    0,  281,   48,   48,   48,   48,   53,
   53,    0,    0,   53,    0,  397,    0,   53,   53,   53,
    0,   53,   53,    0,    0,    0,    0,   53,   53,   53,
   53,    0,   58,   58,    0,  139,   58,   65,    0,    0,
   58,   58,   58,    0,   58,   58,    0,    0,    0,  290,
   58,   58,   58,   58,    0,    0,   61,   61,    0,    0,
   61,    0,    0,  330,   61,   61,   61,    0,   61,   61,
    0,    0,    0,  346,   61,   61,   61,   61,    0,    5,
    6,    0,    0,    7,    0,    0,    0,    8,    9,  231,
    0,   10,   11,    0,    0,  302,    0,   12,   13,   14,
   15,    5,    6,    0,    0,    7,    0,    0,    0,    8,
    9,  304,    0,   10,   11,    0,    0,  340,    0,   12,
   13,   14,   15,    0,    5,  117,    0,  342,  118,    0,
    0,    0,    8,    9,    0,    0,  120,  121,    0,    0,
    0,  398,   12,   13,   14,   15,    5,  117,    0,    0,
  118,  423,    0,    0,    8,    9,    0,  445,  120,  121,
    0,    0,    0,    0,   12,   13,   14,   15,   65,   65,
    0,    0,   65,    0,  139,  139,   65,    0,  259,    0,
   65,   65,    5,   66,    0,    0,    7,    0,    0,    0,
    8,    0,  289,  300,   10,   11,    5,   66,    0,    0,
    7,    0,    0,    0,    8,    0,  329,   66,   10,   11,
  275,    0,  441,    0,    8,    0,  345,  276,  277,   11,
    0,    0,    5,   66,    0,    0,    7,   65,    5,   66,
    8,    0,    7,    0,   10,   11,    8,  183,    0,    0,
   10,   11,    0,  186,    5,   66,    0,    0,    7,    0,
    5,   66,    8,  188,    7,    0,   10,   11,    8,  197,
    0,   66,   10,   11,  275,    0,    0,    0,    8,    0,
    0,  276,  277,   11,    5,   66,    0,  220,    7,  222,
    0,    0,    8,    0,    5,   66,   10,   11,    7,    0,
    5,   66,    8,  223,    7,    0,   10,   11,    8,  225,
    0,    0,   10,   11,  335,  336,    0,  338,    0,    5,
   66,  343,  347,    7,  234,    0,    0,    8,    0,  361,
  259,   10,   11,    0,    5,   66,    0,    0,    7,    0,
  265,    0,    8,    0,  394,    0,   10,   11,    0,    0,
  268,    0,    0,  374,   66,  375,  300,  275,    0,  380,
    0,    8,    0,  464,  276,  277,   11,    0,   65,   65,
  370,    0,   65,    0,    0,  144,   65,    0,    5,   66,
   65,   65,    7,  371,    5,   66,    8,    0,    7,  372,
   10,   11,    8,    0,    5,   66,   10,   11,    7,    0,
    5,   66,    8,  373,    7,    0,   10,   11,    8,  376,
    0,  424,   10,   11,    0,    0,    0,    0,    5,   66,
    5,   66,    7,  404,    7,  430,    8,    0,    8,  410,
   10,   11,   10,   11,    5,   66,  440,    0,    7,    0,
    5,   66,    8,  441,    7,  443,   10,   11,    8,  442,
    0,    0,   10,   11,    0,    5,   66,    0,  455,    7,
    0,    5,   66,    8,    0,    7,    0,   10,   11,    8,
    0,    5,   66,   10,   11,    7,    0,    0,    0,    8,
    0,    5,   66,   10,   11,    7,    0,    5,   66,    8,
    0,    7,    0,   10,   11,    8,    0,    0,    0,   10,
   11,    0,   66,    0,    0,  275,    0,    0,    0,    8,
    0,    0,  276,  277,   11,   66,    0,    0,  275,    0,
    0,   66,    8,    0,  275,  276,  277,   11,    8,    0,
    0,  276,  277,   11,    0,   66,    0,    0,  275,    0,
    0,   66,    8,    0,  275,  276,  277,   11,    8,    0,
    0,  276,  277,   11,    0,   66,    0,    0,  275,    0,
    0,   66,    8,    0,  275,  276,  277,   11,    8,    0,
    0,  276,  277,   11,    0,   66,    0,    0,  275,    0,
    0,   66,    8,    0,  275,  276,  277,   11,    8,    0,
    0,  276,  277,   11,    5,  117,    0,    0,  118,    0,
    0,    0,    8,    9,  119,    0,  120,  121,    0,    0,
    0,    0,   12,   13,   14,   15,    5,  117,    0,    0,
  118,    0,    0,    0,    8,    9,  171,    0,  120,  121,
    0,    0,    0,    0,   12,   13,   14,   15,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         14,
  122,   41,   91,   92,   41,   10,   40,   45,    4,   40,
  118,   41,   41,  123,  123,   59,   34,  106,  123,   58,
   41,   17,   41,  123,   59,   83,  257,   59,  123,  308,
  309,  123,   50,   40,   58,  123,   40,   42,   45,  123,
   40,   45,   44,   41,  123,   45,   58,   45,  123,   41,
   65,  140,   40,   45,   59,  123,   61,   59,   41,  148,
   42,   57,   41,  274,  275,   47,   43,   40,   45,   87,
  123,   59,   90,  162,   41,   40,  355,   40,   45,   75,
   40,  125,  257,   45,   41,   58,  123,  123,   45,   40,
  125,  180,   45,  125,   59,   58,  257,  112,   58,  274,
  275,   59,  123,    4,  100,   44,  385,   58,   43,  198,
   45,  200,  262,  263,   15,  120,   17,  175,  207,    4,
   59,  125,  257,  128,   59,   43,  122,   45,   43,   43,
   45,   45,   17,   41,   42,  414,  123,   41,   42,   47,
  123,   59,  231,   47,  123,   60,   61,   62,  125,   41,
  168,   40,   44,   43,  243,   45,  261,  267,  267,  155,
   59,  261,  158,  263,  169,  170,  261,  275,  256,  257,
  262,  263,  260,   59,   75,  263,  264,  261,  266,  263,
  268,  269,   59,  262,  263,    0,  261,  202,  203,  204,
   91,   92,  261,  261,  263,  213,  192,  193,   59,  195,
  123,  290,   59,  256,  257,  106,   43,  260,   45,    0,
  263,  264,   41,   42,  269,  268,  269,  257,   47,  257,
  258,  122,  237,  257,  261,  240,  263,  257,  259,   44,
  259,  227,    0,  272,  274,  275,  241,  138,  257,  140,
  261,  330,  263,   40,   59,  146,  368,  148,  272,   41,
  257,  258,   44,  257,  258,  274,  275,  257,  258,  257,
  258,  162,  274,  275,  279,  257,  258,  274,  275,  287,
  274,  275,  277,  258,  274,  275,  274,  275,  261,  180,
  263,  296,  261,  298,  263,   40,  301,  302,   41,  304,
  257,  258,   40,  308,  309,  257,  258,  198,  199,  200,
  257,  258,  123,  204,  257,  258,  207,   93,  326,  314,
  125,  261,  274,  275,  262,  263,  331,   59,   96,   97,
  335,  336,   41,  338,   43,  340,   45,  342,  343,   40,
  231,  346,  347,   59,  125,   45,  332,  238,  272,  262,
  263,  359,  243,  244,  257,   40,  364,  248,   41,   41,
   60,   61,   62,   58,  257,  270,  271,  125,  273,  374,
  375,  379,   41,   41,   43,  380,   45,  256,  257,  270,
  271,  260,  368,  388,  392,  264,  394,   44,  261,  268,
  269,   41,   41,  398,   43,   43,   45,   45,   41,  290,
   43,   40,   45,  123,  295,  296,   45,  412,   43,   41,
   45,   58,  188,  421,   40,  306,   41,   59,  423,  424,
  263,   60,   61,   62,   40,  430,   41,  432,   43,   45,
   45,  263,  208,  209,   58,  440,   58,  125,  443,  330,
  445,  332,  450,  123,   60,   61,   62,   40,  269,   41,
  455,  256,  257,  461,   40,  260,  464,   41,  262,  264,
  265,   41,  470,  268,  269,   45,   40,  123,   41,  274,
  275,  276,  277,   41,   41,  256,  257,  368,  369,  260,
   60,   61,   62,  264,  265,  266,   58,  268,  269,   59,
   59,  263,   40,  274,  275,  276,  277,   45,  256,  257,
   59,  263,  260,   59,  395,   41,  264,  265,  266,   41,
  268,  269,   60,   61,   62,   41,  274,  275,  276,  277,
   41,   42,   43,   59,   45,  257,   47,   40,  260,   59,
  263,  263,  264,  263,  263,  267,  268,  269,   59,   60,
   61,   62,   41,  434,   43,   59,   45,   87,   88,   89,
   41,   41,   43,   43,   45,   45,   40,  257,  258,   59,
   59,   60,   61,   62,   41,  123,   43,   41,   45,  257,
  270,  271,  260,  273,  274,  275,  264,   59,  266,  267,
  268,  269,   59,   60,   61,   62,   41,   41,   43,   43,
   45,   45,   41,   41,   43,   43,   45,   45,  257,   41,
   59,   43,  123,   45,  125,   59,   60,   61,   62,   41,
   41,   40,   59,   45,   59,   59,   40,  125,  257,  258,
   59,   59,  261,  262,  123,   59,  125,  263,   60,   61,
   62,  270,  271,   59,  273,  274,  275,  177,  178,  256,
  257,  257,  258,  260,   40,  261,  123,  264,  125,   45,
   59,  268,  269,  263,  270,  271,  261,  273,  274,  275,
   59,   58,   40,   40,   60,   61,   62,   59,   45,  123,
   41,  125,   59,   59,  261,   41,  267,  257,  258,   40,
   59,   40,  263,   60,   61,   62,   41,   59,  125,   59,
  270,  271,   59,  273,  274,  275,   41,   59,  261,   59,
   45,   59,   59,   59,   41,   59,   59,   59,   59,  257,
  258,  125,   59,  261,  125,   60,   61,   62,  123,   59,
  256,  257,  270,  271,  260,  273,  274,  275,  264,   59,
   59,   59,  268,  269,   59,  256,  257,   59,   59,  260,
  261,   59,  263,  264,  265,  266,   59,  268,  269,  270,
  271,   59,  273,  274,  275,  276,  277,  256,  257,   59,
   59,  260,  261,   59,  263,  264,  265,  266,   59,  268,
  269,  270,  271,   59,  273,  274,  275,  276,  277,  256,
  257,  125,   59,  260,  261,   59,  263,  264,  265,  266,
   44,  268,  269,  270,  271,    0,  273,  274,  275,  276,
  277,  125,  256,  257,  125,   59,  260,  261,   59,  263,
  264,  265,  266,    0,  268,  269,  270,  271,  123,  273,
  274,  275,  276,  277,   59,  257,  258,   41,   41,   59,
  263,   45,  256,  257,  125,   59,  260,   59,  270,  271,
  264,  273,  274,  275,  268,  269,   60,   61,   62,   19,
  263,  256,  257,  263,  100,  260,  158,  262,  263,  264,
  332,  257,  258,  268,  269,  350,  209,  310,   59,  167,
   47,  125,   -1,   -1,  270,  271,   -1,  273,  274,  275,
  257,  258,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  240,  270,  271,   -1,  273,  274,  275,  257,
   -1,   -1,  260,  125,   -1,   -1,  264,   -1,   -1,  267,
  268,  269,  257,  258,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  270,  271,   -1,  273,  274,
  275,  279,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,
   -1,  262,  263,  264,   -1,   -1,  267,  268,  269,   -1,
   -1,  256,  257,  301,  302,  260,  304,   -1,   -1,  264,
  308,  309,   -1,  268,  269,   -1,  257,   -1,   -1,  260,
   -1,   -1,  257,  264,   -1,  260,  267,  268,  269,  264,
   -1,   -1,  267,  268,  269,   -1,   -1,  335,  336,   -1,
  338,   -1,  340,   -1,  342,  343,   -1,   -1,  346,  347,
  123,   -1,  256,  257,   -1,   -1,  260,   -1,   -1,   -1,
  264,  265,  266,   -1,  268,  269,   -1,  125,   -1,  240,
  274,  275,  276,  277,   -1,   -1,  374,  375,   -1,   -1,
   -1,   -1,  380,   -1,  279,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,  257,  258,  267,  268,  269,   -1,  125,
  398,   -1,   -1,   -1,   -1,   -1,  270,  271,  279,  273,
  274,  275,  125,   -1,  412,  256,  257,   -1,   -1,  260,
   -1,   -1,   -1,  264,   -1,  423,  424,  268,  269,   -1,
  301,  302,  430,  304,  432,   -1,  125,  308,  309,   -1,
  335,  336,  440,  338,   -1,  443,   -1,  445,  343,   -1,
   -1,   -1,  347,   -1,   -1,   -1,   -1,  455,  125,   -1,
   -1,   -1,   -1,   -1,  335,  336,   -1,  338,   -1,  340,
   -1,  342,  343,   -1,   -1,  346,  347,   -1,   -1,  374,
  375,  125,   -1,  256,  257,  380,   -1,  260,   -1,  262,
  263,  264,   -1,  266,   -1,  268,  269,   -1,  256,  257,
   -1,   -1,  260,  374,  375,  125,  264,  265,  266,  380,
  268,  269,   -1,   -1,   -1,   -1,  274,  275,  276,  277,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  398,  125,  424,
  256,  257,   -1,   -1,  260,  430,   -1,   -1,  264,   -1,
  266,  412,  268,  269,  257,  440,   -1,  260,  443,   -1,
  125,  264,  423,  424,  267,  268,  269,   -1,   -1,  430,
  455,  432,   -1,   -1,   -1,   -1,   -1,  256,  257,  440,
   -1,  260,  443,  125,  445,  264,  265,  266,   -1,  268,
  269,   -1,   -1,   -1,  455,  274,  275,  276,  277,  256,
  257,   -1,   -1,  260,   -1,  125,   -1,  264,  265,  266,
   -1,  268,  269,   -1,   -1,   -1,   -1,  274,  275,  276,
  277,   -1,  256,  257,   -1,  123,  260,  125,   -1,   -1,
  264,  265,  266,   -1,  268,  269,   -1,   -1,   -1,  123,
  274,  275,  276,  277,   -1,   -1,  256,  257,   -1,   -1,
  260,   -1,   -1,  123,  264,  265,  266,   -1,  268,  269,
   -1,   -1,   -1,  123,  274,  275,  276,  277,   -1,  256,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,  265,  123,
   -1,  268,  269,   -1,   -1,  123,   -1,  274,  275,  276,
  277,  256,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,
  265,  123,   -1,  268,  269,   -1,   -1,  123,   -1,  274,
  275,  276,  277,   -1,  256,  257,   -1,  123,  260,   -1,
   -1,   -1,  264,  265,   -1,   -1,  268,  269,   -1,   -1,
   -1,  123,  274,  275,  276,  277,  256,  257,   -1,   -1,
  260,  123,   -1,   -1,  264,  265,   -1,  123,  268,  269,
   -1,   -1,   -1,   -1,  274,  275,  276,  277,  256,  257,
   -1,   -1,  260,   -1,  262,  263,  264,   -1,  125,   -1,
  268,  269,  256,  257,   -1,   -1,  260,   -1,   -1,   -1,
  264,   -1,  266,  125,  268,  269,  256,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,   -1,  266,  257,  268,  269,
  260,   -1,  125,   -1,  264,   -1,  266,  267,  268,  269,
   -1,   -1,  256,  257,   -1,   -1,  260,  125,  256,  257,
  264,   -1,  260,   -1,  268,  269,  264,  125,   -1,   -1,
  268,  269,   -1,  125,  256,  257,   -1,   -1,  260,   -1,
  256,  257,  264,  125,  260,   -1,  268,  269,  264,  125,
   -1,  257,  268,  269,  260,   -1,   -1,   -1,  264,   -1,
   -1,  267,  268,  269,  256,  257,   -1,  125,  260,  125,
   -1,   -1,  264,   -1,  256,  257,  268,  269,  260,   -1,
  256,  257,  264,  125,  260,   -1,  268,  269,  264,  125,
   -1,   -1,  268,  269,  301,  302,   -1,  304,   -1,  256,
  257,  308,  309,  260,  125,   -1,   -1,  264,   -1,  266,
  125,  268,  269,   -1,  256,  257,   -1,   -1,  260,   -1,
  125,   -1,  264,   -1,  266,   -1,  268,  269,   -1,   -1,
  125,   -1,   -1,  340,  257,  342,  125,  260,   -1,  346,
   -1,  264,   -1,  266,  267,  268,  269,   -1,  256,  257,
  125,   -1,  260,   -1,   -1,  263,  264,   -1,  256,  257,
  268,  269,  260,  125,  256,  257,  264,   -1,  260,  125,
  268,  269,  264,   -1,  256,  257,  268,  269,  260,   -1,
  256,  257,  264,  125,  260,   -1,  268,  269,  264,  125,
   -1,  398,  268,  269,   -1,   -1,   -1,   -1,  256,  257,
  256,  257,  260,  125,  260,  412,  264,   -1,  264,  125,
  268,  269,  268,  269,  256,  257,  423,   -1,  260,   -1,
  256,  257,  264,  125,  260,  432,  268,  269,  264,  125,
   -1,   -1,  268,  269,   -1,  256,  257,   -1,  445,  260,
   -1,  256,  257,  264,   -1,  260,   -1,  268,  269,  264,
   -1,  256,  257,  268,  269,  260,   -1,   -1,   -1,  264,
   -1,  256,  257,  268,  269,  260,   -1,  256,  257,  264,
   -1,  260,   -1,  268,  269,  264,   -1,   -1,   -1,  268,
  269,   -1,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,
   -1,   -1,  267,  268,  269,  257,   -1,   -1,  260,   -1,
   -1,  257,  264,   -1,  260,  267,  268,  269,  264,   -1,
   -1,  267,  268,  269,   -1,  257,   -1,   -1,  260,   -1,
   -1,  257,  264,   -1,  260,  267,  268,  269,  264,   -1,
   -1,  267,  268,  269,   -1,  257,   -1,   -1,  260,   -1,
   -1,  257,  264,   -1,  260,  267,  268,  269,  264,   -1,
   -1,  267,  268,  269,   -1,  257,   -1,   -1,  260,   -1,
   -1,  257,  264,   -1,  260,  267,  268,  269,  264,   -1,
   -1,  267,  268,  269,  256,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,  265,  266,   -1,  268,  269,   -1,   -1,
   -1,   -1,  274,  275,  276,  277,  256,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,  265,  266,   -1,  268,  269,
   -1,   -1,   -1,   -1,  274,  275,  276,  277,
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=277;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","WHEN","WHILE","MAYOR_IGUAL","MENOR_IGUAL",
"ASIGNACION","DISTINTO","ENTERO","DOUBLE","CONST","DEFER",
};
final static String yyrule[] = {
"$accept : program",
"program : header_program '{' ejecucion '}' ';'",
"program : header_program",
"program : header_program '{' ejecucion",
"program : header_program '{' '}'",
"header_program : ID",
"declaracion_variables : tipo lista_variables ';'",
"declaracion_variables : definicion_constante ';'",
"declaracion_variables : lista_variables ';'",
"declaracion_variables : lista_variables",
"lista_variables : lista_variables ',' ID",
"lista_variables : ID",
"sentencia_declarable : declaracion_variables",
"sentencia_declarable : funcion",
"sentencia_declarable : diferimiento",
"funcion : header_funcion ejecucion_funcion",
"funcion : header_funcion",
"header_funcion : FUN ID '(' lista_parametros ')' ':' tipo",
"header_funcion : FUN ID '(' ')' ':' tipo",
"header_funcion : FUN '(' lista_parametros ')' ':' tipo",
"header_funcion : FUN '(' ')' ':' tipo",
"header_funcion : FUN ID '(' lista_parametros ')' tipo",
"lista_parametros : parametro",
"lista_parametros : parametro ',' parametro",
"parametro : tipo ID",
"parametro : ID",
"parametro : tipo",
"tipo : ENTERO",
"tipo : DOUBLE",
"ejecucion_funcion : '{' bloque_funcion RETURN '(' expresion ')' ';' '}' ';'",
"ejecucion_funcion : '{' RETURN '(' expresion ')' ';' '}' ';'",
"ejecucion_funcion : '{' bloque_funcion RETURN '(' expresion ')' ';' bloque_funcion '}'",
"bloque_funcion : bloque_funcion sentencia_funcion",
"bloque_funcion : sentencia_funcion",
"sentencia_funcion : sentencia",
"sentencia_funcion : seleccion_funcion ';'",
"sentencia_funcion : seleccion_when_funcion",
"sentencia_funcion : iteracion_while_funcion",
"seleccion_funcion : IF condicion_salto_if then_seleccion_funcion ENDIF",
"seleccion_funcion : IF condicion_salto_if then_seleccion_funcion else_seleccion_funcion ENDIF",
"seleccion_funcion : IF condicion_salto_if then_seleccion else_seleccion_funcion ENDIF",
"seleccion_funcion : IF condicion_salto_if then_seleccion_funcion else_seleccion ENDIF",
"then_seleccion_funcion : THEN '{' ejecucion_control RETURN '(' expresion ')' ';' '}' ';'",
"then_seleccion_funcion : THEN RETURN '(' expresion ')' ';'",
"else_seleccion_funcion : ELSE '{' ejecucion_control RETURN '(' expresion ')' ';' '}' ';'",
"else_seleccion_funcion : ELSE RETURN '(' expresion ')' ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control RETURN '(' expresion ')' ';' '}' ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN RETURN '(' expresion ')' ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN RETURN '(' expresion ')'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN RETURN ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN RETURN",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control RETURN '(' expresion ')' '}'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control RETURN expresion '}' ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control RETURN expresion '}'",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '(' expresion ')' ';' '}' ';'",
"iteracion_while_funcion : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '(' expresion ')' ';' '}' ';'",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '(' expresion ')' '}'",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '}' ';'",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN expresion",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN expresion ';'",
"iteracion_while_funcion : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '(' expresion ')' '}'",
"iteracion_while_funcion : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN expresion",
"iteracion_while_funcion : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN expresion ';'",
"diferimiento : DEFER sentencia_ejecutable",
"ejecucion_control : ejecucion_control sentencia_ejecutable",
"ejecucion_control : sentencia_ejecutable",
"ejecucion : ejecucion sentencia",
"ejecucion : sentencia",
"sentencia : sentencia_ejecutable",
"sentencia : sentencia_declarable",
"sentencia_ejecutable : asignacion ';'",
"sentencia_ejecutable : seleccion ';'",
"sentencia_ejecutable : impresion ';'",
"sentencia_ejecutable : seleccion_when ';'",
"sentencia_ejecutable : iteracion_while",
"sentencia_ejecutable : error ';'",
"seleccion_when : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control '}' ';'",
"seleccion_when : WHEN '(' comparacion_bool ')' THEN sentencia_ejecutable ';'",
"seleccion_when : WHEN '(' comparacion_bool ')' THEN",
"seleccion_when : WHEN '(' ')' THEN '{' ejecucion_control '}'",
"seleccion_when : WHEN '(' comparacion_bool ')' '{' ejecucion_control '}'",
"seleccion_when : WHEN comparacion_bool THEN '{' ejecucion_control '}'",
"seleccion_when : WHEN THEN '{' ejecucion_control '}'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' sentencia_ejecutable",
"iteracion_while : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' sentencia_ejecutable",
"iteracion_while : WHILE ':' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' '}' ';'",
"iteracion_while : WHILE '(' ')' ':' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' '(' asignacion ')' sentencia_ejecutable ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' sentencia_ejecutable ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' ')' sentencia_ejecutable ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' asignacion sentencia_ejecutable ';'",
"seleccion_iteracion : IF condicion_salto_if then_seleccion_iteracion ENDIF",
"seleccion_iteracion : IF condicion_salto_if then_seleccion_iteracion else_seleccion_iteracion ENDIF",
"seleccion_iteracion : IF condicion_salto_if then_seleccion_iteracion",
"seleccion_iteracion : IF condicion_salto_if ENDIF",
"seleccion_iteracion : IF then_seleccion_iteracion ENDIF",
"seleccion_iteracion : IF else_seleccion_iteracion ENDIF",
"then_seleccion_iteracion : THEN '{' ejecucion_iteracion '}' ';'",
"then_seleccion_iteracion : THEN break ';'",
"then_seleccion_iteracion : THEN ejecucion_iteracion '}' ';'",
"then_seleccion_iteracion : THEN '{' ejecucion_iteracion ';'",
"else_seleccion_iteracion : ELSE '{' ejecucion_iteracion '}' ';'",
"else_seleccion_iteracion : ELSE break ';'",
"else_seleccion_iteracion : ELSE RETURN '(' ')' ';'",
"else_seleccion_iteracion : ELSE RETURN '(' expresion ')'",
"else_seleccion_iteracion : ELSE RETURN ';'",
"else_seleccion_iteracion : ELSE RETURN",
"else_seleccion_iteracion : ELSE '{' ejecucion_iteracion '}'",
"else_seleccion_iteracion : ELSE '{' ejecucion_iteracion",
"else_seleccion_iteracion : ELSE ejecucion_iteracion ';'",
"seleccion_when_iteracion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_iteracion '}' ';'",
"seleccion_when_iteracion : WHEN '(' comparacion_bool ')' THEN break ';'",
"seleccion_when_iteracion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_iteracion ';'",
"seleccion_when_iteracion : WHEN '(' ')' THEN '{' ejecucion_iteracion '}' ';'",
"seleccion_when_iteracion : WHEN '(' ')' THEN break ';'",
"seleccion_when_iteracion : WHEN comparacion_bool THEN break ';'",
"ejecucion_iteracion : ejecucion_iteracion sentencia_iteracion",
"ejecucion_iteracion : sentencia_iteracion",
"sentencia_iteracion : asignacion ';'",
"sentencia_iteracion : seleccion_iteracion ';'",
"sentencia_iteracion : impresion ';'",
"sentencia_iteracion : seleccion_when_iteracion ';'",
"sentencia_iteracion : iteracion_while",
"sentencia_iteracion : break ';'",
"break : BREAK",
"break : BREAK ID",
"seleccion : IF condicion_salto_if then_seleccion ENDIF",
"seleccion : IF condicion_salto_if then_seleccion else_seleccion ENDIF",
"seleccion : IF condicion_salto_if '{' ejecucion_control '}' else_seleccion ENDIF",
"seleccion : IF condicion_salto_if then_seleccion '{' ejecucion_control '}' ENDIF",
"seleccion : IF condicion_salto_if THEN ENDIF",
"seleccion : IF condicion_salto_if then_seleccion ELSE ENDIF",
"seleccion : IF condicion_salto_if THEN else_seleccion ENDIF",
"then_seleccion : THEN '{' ejecucion_control '}' ';'",
"then_seleccion : THEN sentencia_ejecutable",
"then_seleccion : THEN '{' ejecucion_control",
"then_seleccion : THEN '{' '}'",
"then_seleccion : THEN ejecucion_control '}'",
"else_seleccion : ELSE '{' ejecucion_control '}' ';'",
"else_seleccion : ELSE sentencia_ejecutable",
"else_seleccion : ELSE '{' '}' ';'",
"else_seleccion : ELSE ejecucion_control '}' ';'",
"condicion_salto_if : '(' comparacion_bool ')'",
"condicion_salto_if : comparacion_bool ')'",
"condicion_salto_if : '(' comparacion_bool",
"condicion_salto_if : comparacion_bool",
"condicion_salto_if : '(' ')'",
"comparacion_bool : expresion comparador expresion",
"comparacion_bool : expresion comparador",
"comparacion_bool : comparador expresion",
"comparacion_bool : comparador",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"comparador : MAYOR_IGUAL",
"comparador : MENOR_IGUAL",
"comparador : DISTINTO",
"lista_asignaciones : lista_asignaciones asignacion",
"lista_asignaciones : asignacion",
"definicion_constante : CONST lista_asignaciones",
"asignacion : ID ASIGNACION expresion",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"expresion : tipo '(' expresion '+' termino ')'",
"expresion : tipo '(' expresion '-' termino ')'",
"expresion : tipo '(' termino ')'",
"expresion : tipo '(' expresion '+' ')'",
"expresion : tipo '(' expresion '-' ')'",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"combinacion_terminales : ID",
"combinacion_terminales : CTE",
"combinacion_terminales : '-' CTE",
"factor : combinacion_terminales",
"factor : ID '(' combinacion_terminales ',' combinacion_terminales ')'",
"factor : ID '(' combinacion_terminales ')'",
"factor : ID '(' ')'",
"impresion : OUT '(' CADENA ')'",
"impresion : OUT '(' ')'",
"impresion : OUT",
"impresion : OUT CADENA",
};

//#line 340 "gramatica.y"


public static final String ERROR = "Error";
public static final String WARNING = "Warning";

public static List<String> errores_sintacticos = new ArrayList<>();
public static List<Character> buffer = new ArrayList<>();
public static List<String> estructura = new ArrayList<>();
public static AnalisisLexico AL;
public static boolean errores_compilacion = false;

void yyerror(String mensaje) {
        // funcion utilizada para imprimir errores que produce yacc
        System.out.println("Error yacc: " + mensaje);
}
public void addEstructura(String s){
    estructura.add(s);
}

public List<String> getEstructura() {
    return estructura;
}

public List<String> getErrores() {
    return errores_sintacticos;
}

public static void agregarEstructura(String s){
    estructura.add(s);
}

public static void agregarError(List<String> errores, String tipo, String error) {
        if (tipo.equals("ERROR")) {
                errores_compilacion = true;
        }

        int linea_actual = AnalisisLexico.getLineaActual();

        errores.add(tipo + " (Linea " + linea_actual + "): " + error);
}


int yylex() {
    int tok = 0;
    //System.out.print("YYLEX, " + buffer.get(0) + " - ");
    Token t = AL.getToken(buffer);
    if (t != null) {
        if (t.getId() == 0) {
                return 0;
        }
        tok = t.getId();
        if (t.getAtributo() != null) {
            yylval = new ParserVal(t.getAtributo());
        }
    }
    //System.out.println("YYLEX - " + tok);
    return tok;
}

public Double getDouble(String d){
    if (d.contains("D")){
        var w = d.split("D");
        return Math.pow(Double.valueOf(w[0]),Double.valueOf(w[1]));
    } else {
        return Double.valueOf(d);
    }

}

public String negarConstante(String c) { // AHORA?
    String ptr = TablaSimbolos.obtenerSimbolo(c);
    String nuevo = '-' + c;
    if (c.contains(".")) {
        Double d = getDouble(c);
        if ((d > Math.pow(-1.7976931348623157,308) && d < Math.pow(-2.2250738585072014,-308))){
            if (TablaSimbolos.obtenerSimbolo(nuevo) == null){ // si no es null es porque ya se agrego anteriormente la misma constante.
                Lexema lexema = new Lexema(d);
                TablaSimbolos.agregarSimbolo(nuevo,lexema); // falta chequear que no se este usando la misma constante positiva y asi borrarla.
            }
        } else {
            agregarError(errores_sintacticos, "ERROR", "El numero " + c + " esta fuera de rango.");
            nuevo = "";
        }
    } else {
        agregarError(errores_sintacticos, "WARNING", "El numero " + c + " fue truncado al valor minimo (0), ya que es menor que este mismo");
        nuevo = "0";
        TablaSimbolos.truncarEntero(ptr,nuevo);
    }
    return nuevo;
}

public void setSintactico(List<Character> buffer, AnalisisLexico AL) {
    this.AL = AL;
    this.buffer = buffer;
}
//#line 1020 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 22 "gramatica.y"
{addEstructura("programa");}
break;
case 2:
//#line 23 "gramatica.y"
{addEstructura("programa sin ejecucion");}
break;
case 3:
//#line 24 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se esperaba un '}' al final del programa");}
break;
case 4:
//#line 25 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se esperaba una sentencia de ejecucion");}
break;
case 8:
//#line 38 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un tipo para declaracion_variable");}
break;
case 9:
//#line 39 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' al final de la declaracion");}
break;
case 12:
//#line 46 "gramatica.y"
{addEstructura("declaracion variables");}
break;
case 13:
//#line 47 "gramatica.y"
{addEstructura("declaracion funcion");}
break;
case 14:
//#line 48 "gramatica.y"
{addEstructura("diferimiento");}
break;
case 16:
//#line 52 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una ejecucion_funcion");}
break;
case 19:
//#line 57 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el nombre de la funcion");}
break;
case 20:
//#line 58 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el nombre de la funcion");}
break;
case 21:
//#line 59 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el ':' luego de asignar los parametros");}
break;
case 25:
//#line 70 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el tipo del parametro");}
break;
case 26:
//#line 71 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el nombre del parametro");}
break;
case 31:
//#line 82 "gramatica.y"
{agregarError(errores_sintacticos,"Error", "El RETURN debe ser la ultima sentencia de la funcion");}
break;
case 35:
//#line 92 "gramatica.y"
{addEstructura("if en funcion");}
break;
case 36:
//#line 93 "gramatica.y"
{addEstructura("when en funcion");}
break;
case 37:
//#line 94 "gramatica.y"
{addEstructura("while en funcion");}
break;
case 48:
//#line 114 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' al final de la expresion");}
break;
case 49:
//#line 115 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera la expresion de retorno");}
break;
case 50:
//#line 116 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una expresion de retorno y un ';' al final");}
break;
case 51:
//#line 117 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' al final de '}'");}
break;
case 52:
//#line 118 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la expresion este entre parentesis");}
break;
case 53:
//#line 119 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' al final y que la expresion se encuentre entre parentesis");}
break;
case 56:
//#line 125 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' luego de '}' ");}
break;
case 57:
//#line 126 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una expresion luego del RETURN");}
break;
case 58:
//#line 127 "gramatica.y"
{agregarError(errores_sintacticos,"Error","falta los parentesis en la expresion, falta '}' y un ';'");}
break;
case 59:
//#line 128 "gramatica.y"
{agregarError(errores_sintacticos,"Error","falta los parentesis en la expresion y un '}' para el cierre");}
break;
case 60:
//#line 129 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' luego de '}' ");}
break;
case 61:
//#line 130 "gramatica.y"
{agregarError(errores_sintacticos,"Error","falta los parentesis en la expresion, falta '}' y un ';'");}
break;
case 62:
//#line 131 "gramatica.y"
{agregarError(errores_sintacticos,"Error","falta los parentesis en la expresion y un '}' para el cierre");}
break;
case 71:
//#line 151 "gramatica.y"
{addEstructura("if");}
break;
case 72:
//#line 152 "gramatica.y"
{addEstructura("impresion");}
break;
case 73:
//#line 153 "gramatica.y"
{addEstructura("when");}
break;
case 74:
//#line 154 "gramatica.y"
{addEstructura("while");}
break;
case 75:
//#line 155 "gramatica.y"
{addEstructura("error");}
break;
case 78:
//#line 162 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una ejecucion y un ';' ");}
break;
case 79:
//#line 163 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una comparacion_bool dentro de '(' ')' ");}
break;
case 80:
//#line 164 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un THEN luego de la comparacion_bool");}
break;
case 81:
//#line 165 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la comparacion_bool se encuentre encerrada con '(' ')' ");}
break;
case 82:
//#line 166 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una comparacion_bool encerrado entre '(' ')' ");}
break;
case 87:
//#line 174 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una comparacion_bool antes del ':' ");}
break;
case 88:
//#line 175 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera ':' luego de la comparacion_bool");}
break;
case 89:
//#line 176 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una ejecucion luego de la ASIGNACION");}
break;
case 90:
//#line 177 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una comparacion_bool dentro de los '(' ')' ");}
break;
case 91:
//#line 178 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una asignacion dentro de los '(' ')'  ");}
break;
case 92:
//#line 179 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ':' luego de la comparacion_bool");}
break;
case 93:
//#line 180 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una asignacion luego del ':' ");}
break;
case 94:
//#line 181 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una asignacion entre los parentesis");}
break;
case 95:
//#line 182 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la asignacion se encuentre entre parentesis");}
break;
case 98:
//#line 187 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ENDIF al final del IF");}
break;
case 99:
//#line 188 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya then_seleccion_iteracion ");}
break;
case 100:
//#line 189 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una condicion_salto_if");}
break;
case 101:
//#line 190 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una condicion_salto_if");}
break;
case 104:
//#line 195 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que antes de la ejecucucion_iteracion haya una { ");}
break;
case 105:
//#line 196 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que luego de la ejecucion_iteracion haya una llave");}
break;
case 108:
//#line 203 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una expresion entre los parentesis");}
break;
case 109:
//#line 204 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya un ';' luego de la expresion ");}
break;
case 110:
//#line 205 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que luego del return haya una expresion entre parentesis");}
break;
case 111:
//#line 206 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que luego del return haya una expresion entre parentesis y un ';'al final");}
break;
case 112:
//#line 207 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya un ';' luego de '}' ");}
break;
case 113:
//#line 208 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una '}' y un ';' ");}
break;
case 114:
//#line 209 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya que la ejecucion_iteracion se encuentre entre { }");}
break;
case 117:
//#line 218 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un '}' antes del ';'");}
break;
case 118:
//#line 219 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una comparacion_bool entre los parentesis");}
break;
case 119:
//#line 220 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una comparacion_bool entre parentesis");}
break;
case 120:
//#line 221 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la comparacion_bool se encuentre entre parentesis");}
break;
case 124:
//#line 229 "gramatica.y"
{addEstructura("if en iteracion");}
break;
case 125:
//#line 230 "gramatica.y"
{addEstructura("impresion");}
break;
case 126:
//#line 231 "gramatica.y"
{addEstructura("when en iteracion");}
break;
case 127:
//#line 232 "gramatica.y"
{addEstructura("while");}
break;
case 128:
//#line 233 "gramatica.y"
{addEstructura("break");}
break;
case 133:
//#line 243 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se esperan un THEN");}
break;
case 134:
//#line 244 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ELSE");}
break;
case 135:
//#line 245 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera bloque de sentencias luego del THEN");}
break;
case 136:
//#line 246 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera bloque de sentencias luego del ELSE");}
break;
case 137:
//#line 247 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera bloque de sentencias luego del THEN");}
break;
case 140:
//#line 254 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un '}' al de las sentencias del THEN");}
break;
case 141:
//#line 255 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera sentencias dentro del cuerpo del THEN");}
break;
case 142:
//#line 256 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un '{' para comenzar el THEN");}
break;
case 145:
//#line 262 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera sentencias dentro del cuerpo del ELSE");}
break;
case 146:
//#line 263 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un '{' luego del ELSE");}
break;
case 148:
//#line 268 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera '(' al principio de la comparacion");}
break;
case 149:
//#line 269 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera ')' al final de la comparacion_bool");}
break;
case 150:
//#line 270 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la comparacion_bool se encuentre entre parentesis");}
break;
case 151:
//#line 271 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una condicion");}
break;
case 152:
//#line 274 "gramatica.y"
{addEstructura("comparacion");}
break;
case 153:
//#line 277 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una expresion luego del comparador");}
break;
case 154:
//#line 278 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una expresion antes del comparador");}
break;
case 155:
//#line 279 "gramatica.y"
{agregarError(errores_sintacticos,"Error","se espera expresiones para poder realizar las comparaciones");}
break;
case 165:
//#line 296 "gramatica.y"
{addEstructura(val_peek(2).sval + " asignacion " + val_peek(0).sval);}
break;
case 169:
//#line 303 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Conversion explicita no permitida");}
break;
case 170:
//#line 304 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Conversion explicita no permitida");}
break;
case 171:
//#line 305 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Conversion explicita no permitida");}
break;
case 172:
//#line 306 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una termino luego del signo '+' y conversion explicita no permitida");}
break;
case 173:
//#line 307 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una termino luego del signo '-' y conversion explicita no permitida");}
break;
case 179:
//#line 318 "gramatica.y"
{
            String ptr = TablaSimbolos.obtenerSimbolo(val_peek(0).sval);
            negarConstante(val_peek(0).sval);
    }
break;
case 185:
//#line 333 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una cadena dentro del OUT");}
break;
case 186:
//#line 334 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera () con una cadena dentro");}
break;
case 187:
//#line 335 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un que la CADENA se encuentre entre parentesis");}
break;
//#line 1576 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
