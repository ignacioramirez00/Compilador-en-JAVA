//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
import EtapaLexico.Semantica.*;
import EtapaLexico.AnalisisLexico;
import EtapaLexico.Lexema;
import EtapaLexico.Tokens.Token;
import EtapaLexico.TablaSimbolos;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//#line 27 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short WHEN=268;
public final static short WHILE=269;
public final static short MAYOR_IGUAL=270;
public final static short MENOR_IGUAL=271;
public final static short ASIGNACION=272;
public final static short DISTINTO=273;
public final static short ENTERO=274;
public final static short DOUBLE=275;
public final static short CONST=276;
public final static short DEFER=277;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    1,    3,    3,    3,    3,    5,
    5,    7,    7,    7,    8,    8,   10,   10,   10,   10,
   10,   12,   12,   13,   13,   13,    4,    4,   11,   11,
   11,   14,   14,   16,   16,   16,   16,   18,   18,   22,
   22,   23,   23,   19,   19,   19,   19,   19,   19,   19,
   19,   20,   20,   20,   20,   20,   20,   20,   20,   20,
    9,   24,   24,    2,    2,   17,   17,   28,   28,   28,
   28,   28,   28,   31,   31,   31,   31,   31,   31,   31,
   32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
   32,   32,   32,   33,   33,   33,   33,   33,   33,   34,
   34,   34,   34,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   37,   37,   37,   37,   37,   37,   27,   27,
   38,   38,   38,   38,   38,   38,   36,   36,   29,   29,
   29,   29,   29,   29,   29,   39,   39,   39,   39,   39,
   40,   40,   40,   40,   21,   21,   21,   21,   21,   25,
   25,   25,   25,   41,   41,   41,   41,   41,   41,   42,
   42,    6,   26,   15,   15,   15,   15,   15,   15,   15,
   15,   43,   43,   43,   45,   45,   45,   44,   44,   44,
   44,   30,   30,   30,   30,
};
final static short yylen[] = {                            2,
    5,    1,    3,    3,    1,    3,    2,    2,    1,    3,
    1,    1,    1,    1,    2,    1,    7,    6,    6,    5,
    6,    1,    3,    2,    1,    1,    1,    1,    9,    8,
    9,    2,    1,    1,    2,    1,    1,    4,    5,   10,
    6,   10,    6,   14,   10,    9,    7,    6,   12,   11,
   10,   17,   19,   15,   13,   12,   13,   17,   14,   15,
    2,    2,    1,    2,    1,    1,    1,    2,    2,    2,
    2,    1,    2,    9,    7,    5,    7,    7,    6,    5,
   12,   10,   14,   12,    9,   11,   11,   11,   11,    9,
    7,    9,    8,    4,    5,    3,    3,    3,    3,    5,
    3,    4,    4,    5,    6,    5,    5,    3,    2,    4,
    3,    3,    9,    7,    8,    8,    6,    5,    2,    1,
    2,    2,    2,    2,    2,    2,    1,    2,    4,    5,
    7,    7,    4,    5,    5,    5,    3,    3,    3,    3,
    5,    3,    4,    4,    3,    2,    2,    1,    2,    3,
    2,    2,    1,    1,    1,    1,    1,    1,    1,    2,
    1,    2,    3,    3,    3,    1,    6,    6,    4,    5,
    5,    3,    3,    1,    1,    1,    2,    1,    6,    4,
    3,    4,    3,    1,    2,
};
final static short yydefred[] = {                         0,
    5,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   27,   28,    0,    0,    4,    0,   12,    0,    0,
    0,   67,   13,   14,    0,   65,    0,   66,    0,    0,
    0,   72,   73,    0,    0,    0,  176,  157,  158,  159,
    0,    0,  154,  155,  156,    0,    0,    0,    0,    0,
    0,  174,  178,  185,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  161,    0,    0,   61,    0,   64,   11,
    0,    8,    0,    7,    0,   15,   68,   69,   70,   71,
    0,    0,    0,  177,  149,    0,    0,    0,    0,    0,
    0,    0,    0,  146,    0,    0,    0,    0,  183,    0,
   25,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  160,    1,    6,   10,    0,    0,    0,    0,
    0,    0,   33,   34,    0,   36,   37,    0,  175,  181,
    0,  145,    0,    0,    0,    0,    0,    0,  133,    0,
    0,    0,    0,    0,   63,    0,  129,    0,    0,  172,
  173,  182,    0,    0,    0,   24,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   32,   35,    0,    0,  180,    0,    0,  169,    0,
    0,    0,  139,    0,  140,   62,  137,  135,    0,  134,
    0,  130,    0,    0,   20,    0,   23,   80,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  170,    0,  171,    0,    0,
    0,    0,  142,    0,    0,    0,   18,    0,   21,   19,
    0,    0,    0,    0,   79,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   38,    0,    0,    0,    0,
    0,    0,  179,  167,  168,  143,    0,  144,  136,  131,
  132,   17,   77,    0,   75,   78,    0,    0,    0,    0,
    0,   91,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  120,    0,    0,    0,    0,    0,   39,    0,
    0,    0,    0,    0,  141,    0,    0,    0,    0,    0,
    0,    0,   93,    0,    0,    0,    0,    0,  128,    0,
    0,  121,    0,  119,  123,  125,  122,  126,  124,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   74,    0,    0,   90,    0,   92,    0,    0,    0,    0,
    0,    0,    0,    0,   97,    0,   98,   99,    0,    0,
    0,   85,    0,    0,    0,    0,    0,   30,   47,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   82,    0,    0,    0,  108,    0,    0,  112,   94,    0,
    0,    0,    0,    0,   41,    0,    0,    0,    0,    0,
    0,   29,   31,    0,    0,   88,   86,   89,   87,    0,
    0,  103,  102,    0,    0,    0,   95,    0,    0,    0,
  118,    0,    0,   43,    0,    0,    0,    0,    0,    0,
   84,   81,  100,  106,    0,  104,    0,  117,    0,    0,
    0,    0,    0,   45,    0,    0,    0,    0,  105,    0,
    0,  114,    0,    0,    0,    0,   50,    0,   83,  116,
    0,  115,    0,   40,    0,   49,    0,    0,    0,    0,
  113,    0,   42,    0,   55,    0,   57,    0,    0,   44,
    0,    0,   60,   54,    0,    0,    0,   58,    0,   52,
    0,   53,
};
final static short yydgoto[] = {                          2,
    3,   17,   18,   46,   20,   21,   22,   23,   24,   25,
   76,  104,  105,  122,   47,  123,  124,  125,  126,  127,
   48,  209,  247,  141,   49,   27,  277,  186,   29,   30,
   31,   32,  280,  307,  308,  281,  282,  283,   93,  143,
   50,   65,   51,   52,   53,
};
final static short yysindex[] = {                      -236,
    0,    0,  -70, 1000,   51,  -43,  541,  -37,   -7,  314,
   34,    0,    0, -181,  597,    0, 1022,    0, -167,   80,
  112,    0,    0,    0,   74,    0,  176,    0,  180,  187,
  210,    0,    0,  -41, -148,  141,    0,    0,    0,    0,
   16,  572,    0,    0,    0,  237,   -5,  -75,  240,  -41,
   90,    0,    0,    0,  -33,  261,    1,  197,  620,   52,
  626,  284,   63,    0, -181,  -43,    0,  281,    0,    0,
   84,    0,   87,    0, 1457,    0,    0,    0,    0,    0,
  167,  310,  -16,    0,    0,  320,  -41,   58,   58,  -41,
 -112,  597,  -93,    0,  167,   58,   58,  327,    0,   22,
    0,  311,  120,  351,  337,  597,  139,  360,  286,  346,
  371, -181,    0,    0,    0,    0,   10,  541,  376,  518,
   43, 1479,    0,    0,  362,    0,    0,  561,    0,    0,
   37,    0,  170,  325,   90,   90,  167,  803,    0, 1002,
 1224,  363,  173, 1230,    0, 1094,    0,  597,  178,    0,
    0,    0,  395,  414, -229,    0,  404, -161, 1240,  341,
  -65,  597,  432,   57,  434,  207,  -62,  -41,  620,  626,
  437,    0,    0,  440,   85,    0,   41,   46,    0, 1246,
 1264,  425,    0, 1274,    0,    0,    0,    0,  223,    0,
 1280,    0, -229,   35,    0, -229,    0,    0,  597, 1104,
  597, 1290, -181, -181,  190,  364,  446,  827, -128,  163,
  463,  474,  -41,  467,  481,    0,  361,    0,  391,  471,
 1296,  491,    0,  492,  296,  297,    0, -229,    0,    0,
 1306,  597,  508, 1321,    0,  527,  528,  -39,  603,  511,
  689,  561,  533, 1002, -111,    0,  319,  524,  -54,   62,
  452,  537,    0,    0,    0,    0,  532,    0,    0,    0,
    0,    0,    0, 1327,    0,    0,  469, 1124, 1126,  552,
  535,    0,  291,  342,  550,  546, 1337,  555,  556,  557,
  560,  571,    0,  590,  -41, 1110,  595,  597,    0,  512,
  765,  433,  577, -181,    0,  579,  689,  689,  582,  689,
  586, 1140,    0,  340,  260, -209,  379,  387,    0,  740,
  394,    0,  605,    0,    0,    0,    0,    0,    0,  614,
  457,  636,  -41,  888,  618,   -9,  597,  -39, 1045,  637,
    0, 1350, 1364,    0, 1370,    0, 1386,  624,  689, 1392,
  625,   30,  689,  150,    0,  -87,    0,    0,  418,  644,
  424,    0,  652,  635,  -41,  458,  655,    0,    0,  -41,
 1181,  657,  640, 1067, 1150,  641,  645,  646,  647, 1410,
    0,  703,  650,    0,    0,   -2, 1416,    0,    0,  447,
 -118,  435,  654, -181,    0,  464,  664,  -41,  478,  -13,
 1160,    0,    0,  689,  672,    0,    0,    0,    0,  673,
  676,    0,    0,  681,  496,  686,    0,  689,  694, -114,
    0,  713,  698,    0,  501,  708,  -41,    4, 1386, 1430,
    0,    0,    0,    0,  714,    0, 1436,    0,  689,  715,
 1166,  653,  718,    0,  502,  721, 1191,  723,    0,  724,
  727,    0,  689,  728,  665,  -52,    0,  -26,    0,    0,
  735,    0, 1204,    0,  736,    0,  671,  738,  -41,  134,
    0,   -4,    0,  744,    0,  583,    0,  -41,  312,    0,
    8,  584,    0,    0,  679,   48,  746,    0,  684,    0,
  747,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,  810,    0,    0,  192,    0,  754,    0,    0,
    0,    0,    0,    0,    0,    0,  817,    0,    0,  122,
    0,    0,    0,    0,  214,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  383,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -100,  -23,
  451,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  763,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   77,    0,    0,    0,    0,  -89,    0,    0,    0,   24,
    0,    0,    0,    0,   31,    0,    0,    0,    0,    0,
    0,    0,  157,    0,  785,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  659,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  262,  473,  495,   39,    0,    0,    0,
    0, 1451,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1451,    0,  -79,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  768,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  350,    0,  392,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  774,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -79,    0,    0,    0,    0,
  768,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  841,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  574,    0,    0,    0,  779,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  406,    0,    0,  576,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  578,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  864,    0,    0,    0,    0,
    0,    0,    0,    0,  581,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  933,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  955,
    0,    0,    0,    0,    0,    0,    0,    0,  977,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,    0,    9,  821,    0,    0,    0,    0,    0,
    0,  748,  692,  522,  -28, -121,   71,    0,    0,    0,
 -108,    0,    0,  -21,   18,  -14, 1048,   20,    0,  608,
    0,  742,    0,  549,  510, -287,    0,  722,    0,  -73,
  811,    0,   17,  268,  -67,
};
final static int YYTABLESIZE=1756;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         64,
  172,  269,   55,   41,  408,   81,  457,   99,  429,  167,
  140,  288,   19,  459,   35,  131,  341,  153,   41,  149,
    1,   95,  148,   28,  130,   19,  417,   60,   41,  148,
  360,   41,   57,  147,   67,  468,   28,   88,  404,   89,
   41,  102,   41,  138,   12,   13,   88,   92,   89,  359,
  113,  304,    4,  345,   44,   45,   43,  201,  133,   86,
   92,  137,  153,  383,  151,  103,  475,  166,  201,  376,
  144,  152,  456,   61,   26,   63,  108,  176,  111,  150,
  175,  216,  170,   19,  159,   41,  218,   69,  375,   70,
   41,   62,  228,  409,   28,  101,  204,  165,  458,  153,
   62,  204,   41,  134,  135,  136,  479,  215,  103,   33,
  142,  145,   12,   13,  205,  225,  181,  163,  184,  292,
   82,    9,  430,   73,  181,  145,  191,   73,  436,   41,
   19,   96,  474,  245,  246,  163,   97,   60,   72,  210,
  202,   28,  115,    5,   66,  174,  151,    7,  274,  138,
  139,    8,  274,  152,  287,   10,   11,  182,  221,  145,
  148,  150,  148,  195,  306,  182,  103,  145,  146,  147,
   74,  147,  478,  147,  305,  379,   88,  231,   89,  234,
   83,  145,  138,  138,  251,   91,  211,  212,  236,  237,
  239,   11,  467,  217,  219,  200,   75,   26,  208,  145,
   26,  227,  229,  248,  230,   88,  291,   89,  378,   88,
  264,   89,  177,   16,  178,   36,   37,   63,  145,  233,
  145,   54,  286,  270,  240,   98,  276,  142,   34,  238,
   36,   37,   12,   13,   77,   11,  262,  153,   78,  153,
  129,   37,  172,   36,   37,   79,    9,   12,   13,   56,
   11,  145,   36,   37,   36,   37,  321,  101,  271,  284,
   12,   13,  276,  145,   38,   39,  324,   40,   80,   12,
   13,   12,   13,   84,   12,   13,   87,  239,  101,  330,
   94,   34,  276,  276,  151,  276,  151,  299,  301,  276,
  276,  152,  311,  152,  356,   12,   13,   36,   37,  150,
  100,  150,   36,   37,  166,  361,  166,  145,   12,   13,
  233,  240,  109,  362,   36,   37,   11,  276,  276,  106,
  276,  338,  276,  112,  276,  276,  386,  350,  276,  276,
   42,  389,  163,  163,   34,   41,  163,   19,   16,  114,
  163,  129,   37,  116,  163,  163,  145,  405,   28,  128,
   44,   45,   43,   59,   88,  276,   89,  276,   41,  415,
  132,  418,  276,  150,  151,  179,   96,  152,  155,  412,
  473,   97,   19,   44,   45,   43,  156,    9,    9,  276,
  158,    9,  343,   28,  395,    9,    9,    9,  435,    9,
    9,  157,  164,  276,  164,    9,    9,    9,    9,  160,
  161,  254,   96,  163,  276,  276,   66,   97,  162,  273,
  338,  164,  276,    8,  276,  168,  274,  275,   11,  460,
  173,  187,  276,  175,  175,  175,  276,  175,  276,  175,
  466,  255,   96,  469,  165,  188,  165,   97,  276,  472,
  192,  175,  175,  175,  175,    5,   66,   11,   11,    7,
  395,   11,  193,    8,  194,   11,   11,   10,   11,   11,
   11,  196,  339,  199,  101,   11,   11,   11,   11,   16,
   16,  203,  328,   16,  206,  207,  213,   16,   16,   16,
  214,   16,   16,  223,  138,  242,  241,   16,   16,   16,
   16,  166,  293,  166,   88,  166,   89,  354,  387,   88,
   88,   89,   89,  249,  413,  175,   88,  175,   89,  166,
  166,  166,  166,  164,  250,  164,   66,  164,  416,  273,
   88,  253,   89,    8,  252,  342,  274,  275,   11,  256,
  126,  164,  164,  164,  164,  165,  425,  165,   88,  165,
   89,  433,  446,   88,   88,   89,   89,   36,   37,  258,
  259,  304,  305,  165,  165,  165,  165,  169,  260,  261,
   38,   39,   41,   40,   12,   13,  265,  267,  268,  272,
   36,   37,  285,  166,   58,  166,  294,   44,   45,   43,
   42,  289,  290,   38,   39,   41,   40,   12,   13,  310,
  295,  297,  302,  303,   41,  164,   66,  164,  309,  273,
   44,   45,   43,    8,  312,   41,  274,  275,   11,   44,
   45,   43,   85,  315,  316,  317,   41,  165,  318,  165,
   44,   45,   43,  471,  476,   88,   88,   89,   89,  319,
  320,   44,   45,   43,  323,  329,  325,  331,  175,  175,
  334,  347,  175,  175,  336,  175,  175,  175,  175,  348,
  175,  175,  175,  175,  351,  175,  175,  175,  175,  175,
  107,   77,  126,  352,   41,  126,  110,  101,  101,  126,
   41,  353,  126,  126,  126,  355,  358,  365,  381,   44,
   45,   43,  371,  374,  382,   44,   45,   43,    5,   66,
  274,  384,    7,  385,  388,  410,    8,  391,  392,  396,
   10,   11,   11,  397,  398,  399,  166,  166,  403,  407,
  166,  166,  411,  166,  166,  166,  166,   11,  166,  166,
  166,  166,  414,  166,  166,  166,  166,  166,  164,  164,
  421,  422,  164,  164,  423,  164,  164,  164,  164,  424,
  164,  164,  164,  164,  426,  164,  164,  164,  164,  164,
  165,  165,  428,  431,  165,  165,  432,  165,  165,  165,
  165,  402,  165,  165,  165,  165,  434,  165,  165,  165,
  165,  165,  439,  442,   36,   37,  445,  444,   58,  447,
  349,  449,  450,   11,   41,  452,  454,   38,   39,  455,
   40,   12,   13,  461,  463,  464,  465,   36,   37,   44,
   45,   43,  470,  477,  480,  482,   36,   37,  481,    2,
   38,   39,  184,   40,   12,   13,    3,   36,   37,   38,
   39,  162,   40,   12,   13,   22,   76,  401,   36,   37,
   38,   39,  127,   40,   12,   13,  109,   96,  111,   71,
  110,   38,   39,  107,   40,   12,   13,  154,  278,  197,
  364,  451,    5,   66,  346,  380,    7,   90,    5,   66,
    8,    0,    7,    0,   10,   11,    8,    0,    0,    0,
   10,   11,    0,    0,    0,    0,   36,   37,    0,    0,
    0,    0,   36,   37,  278,    0,    0,  327,    0,   38,
   39,    0,   40,   12,   13,   38,   39,    0,   40,   12,
   13,    0,    0,    0,  278,  278,    0,  278,    0,    0,
    0,  278,  278,    0,   11,   11,    0,    0,   11,    0,
    0,    0,   11,   11,   11,  180,   11,   11,    0,    0,
    0,    0,   11,   11,   11,   11,    0,    0,    0,  278,
  278,    0,  278,    0,  278,   66,  278,  278,  273,  244,
  278,  278,    8,    0,    0,  274,  275,   11,    0,   66,
    0,    0,  273,    0,    0,   48,    8,    0,    0,  274,
  275,   11,    0,    0,    0,    0,    0,  278,    0,  278,
    0,    0,  279,   66,  278,    0,  273,    0,   46,    0,
    8,    0,    0,  274,  275,   11,   36,   37,  314,    0,
    0,  278,    0,    0,    0,    0,    0,    0,    0,   38,
   39,    0,   40,   12,   13,  278,    0,    0,  279,    0,
    5,   66,    0,    0,    7,    0,  278,  278,    8,    0,
  326,    0,   10,   11,  278,    0,  278,    0,  279,  279,
    0,  279,    0,    0,  278,  279,  279,    0,  278,    0,
  278,    0,    0,  314,  314,    0,  314,   51,    5,   66,
  278,  314,    7,    0,    0,  314,    8,    0,    0,    0,
   10,   11,    0,  279,  279,    0,  279,    0,  279,   56,
  279,  279,    5,   66,  279,  279,    7,    0,  138,  139,
    8,  314,  243,  314,   10,   11,   48,   48,  314,    0,
   48,   59,    0,    0,   48,   48,   48,    0,   48,   48,
    0,  279,    0,  279,   48,   48,   48,   48,  279,   46,
   46,    0,    0,   46,   16,    0,  183,   46,   46,   46,
    0,   46,   46,    0,    0,  279,    0,   46,   46,   46,
   46,  314,    0,    5,   66,    0,   68,    7,  314,  279,
    0,    8,    0,  357,    0,   10,   11,    0,  314,    0,
  279,  279,  314,    0,    0,    0,    0,    0,  279,  363,
  279,    0,    0,    0,  314,    0,    0,    0,  279,    0,
    0,    0,  279,    0,  279,    0,    0,    0,   51,   51,
    0,  393,   51,    0,  279,    0,   51,   51,   51,    0,
   51,   51,    0,    0,    0,    0,   51,   51,   51,   51,
   56,   56,    0,    0,   56,    0,  180,    0,   56,   56,
   56,    0,   56,   56,    0,    0,  232,    0,   56,   56,
   56,   56,   59,   59,  224,    0,   59,    0,    0,    0,
   59,   59,   59,    0,   59,   59,  298,    0,  300,    0,
   59,   59,   59,   59,    0,    5,    6,    5,   66,    7,
    0,    7,  337,    8,    9,    8,    0,   10,   11,   10,
   11,    0,  394,   12,   13,   14,   15,    5,    6,    0,
    0,    7,  419,    0,    0,    8,    9,    0,  443,   10,
   11,    0,    0,    0,    0,   12,   13,   14,   15,    0,
    5,  117,    0,    0,  118,  296,    0,    0,    8,    9,
    0,    0,  120,  121,    0,  400,    0,    0,   12,   13,
   14,   15,    5,  117,    0,    0,  118,    0,  438,    0,
    8,    9,    0,    0,  120,  121,    0,    0,    0,    0,
   12,   13,   14,   15,  332,  333,    0,  335,  185,    5,
   66,  340,  344,    7,  189,    0,  190,    8,    0,    5,
   66,   10,   11,    7,  198,    5,   66,    8,    0,    7,
  220,   10,   11,    8,    0,  322,    0,   10,   11,    5,
   66,    5,   66,    7,  370,    7,  372,    8,  222,    8,
  377,   10,   11,   10,   11,    5,   66,    0,  224,    7,
    0,    0,    0,    8,  226,    5,   66,   10,   11,    7,
    0,    0,    0,    8,  235,    5,   66,   10,   11,    7,
  257,    5,   66,    8,    0,    7,    0,   10,   11,    8,
  263,    0,    0,   10,   11,    0,    5,   66,    0,    0,
    7,  420,    0,    0,    8,  266,  390,   66,   10,   11,
  273,  296,    0,    0,    8,  427,  448,  274,  275,   11,
   66,  313,    0,  273,    0,    0,  437,    8,    0,  462,
  274,  275,   11,    0,  366,    0,  441,    0,    0,    5,
   66,    0,    0,    7,    0,    5,   66,    8,  367,    7,
  453,   10,   11,    8,  368,    5,   66,   10,   11,    7,
    0,    5,   66,    8,    0,    7,    0,   10,   11,    8,
  369,    0,    0,   10,   11,    0,  373,    0,    0,    5,
   66,    0,    0,    7,    0,    0,    0,    8,    0,    5,
   66,   10,   11,    7,  400,    5,   66,    8,    0,    7,
  406,   10,   11,    8,    0,    5,   66,   10,   11,    7,
    0,    5,   66,    8,  438,    7,    0,   10,   11,    8,
  440,    5,   66,   10,   11,    7,    0,    0,    0,    8,
    0,    0,    0,   10,   11,   63,    5,   66,    0,    0,
    7,    0,    5,   66,    8,    0,    7,    0,   10,   11,
    8,    0,    0,   66,   10,   11,  273,    0,    0,    0,
    8,    0,    0,  274,  275,   11,   66,    0,    0,  273,
    0,    0,    0,    8,    0,    0,  274,  275,   11,    0,
   66,    0,    0,  273,    0,    0,   66,    8,    0,  273,
  274,  275,   11,    8,    0,    0,  274,  275,   11,    0,
    0,    0,   66,    0,    0,  273,    0,    0,   66,    8,
    0,  273,  274,  275,   11,    8,    0,    0,  274,  275,
   11,    0,    0,    0,    0,    0,   66,    0,    0,  273,
    0,    0,   66,    8,    0,  273,  274,  275,   11,    8,
    0,    0,  274,  275,   11,    0,   66,    0,    0,  273,
    0,    0,   66,    8,    0,  273,  274,  275,   11,    8,
    0,    0,  274,  275,   11,    0,   63,   63,    0,    0,
   63,    0,    5,  117,   63,    0,  118,    0,   63,   63,
    8,    9,  119,    0,  120,  121,    0,    0,    0,    0,
   12,   13,   14,   15,    5,  117,    0,    0,  118,    0,
    0,    0,    8,    9,  171,    0,  120,  121,    0,    0,
    0,    0,   12,   13,   14,   15,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         14,
  122,   41,   40,   45,  123,   34,   59,   41,  123,  118,
  123,  123,    4,   40,   58,   83,  304,   41,   45,   93,
  257,   50,  123,    4,   41,   17,   40,   10,   45,  123,
   40,   45,   40,  123,   15,   40,   17,   43,   41,   45,
   45,   41,   45,  123,  274,  275,   43,  123,   45,   59,
   65,  261,  123,  263,   60,   61,   62,  123,   87,   42,
  123,   90,   41,  351,   41,   57,   59,   58,  123,   40,
   92,   41,  125,   40,    4,  257,   59,   41,   61,   41,
   44,   41,   40,   75,  106,   45,   41,   17,   59,  257,
   45,   58,   58,  381,   75,  257,   40,  112,  125,  123,
   58,   40,   45,   87,   88,   89,   59,  175,  100,   59,
   91,   92,  274,  275,   58,  189,  138,   41,  140,   58,
  269,    0,  410,   44,  146,  106,  148,   44,  125,   45,
  122,   42,  125,  262,  263,   59,   47,  120,   59,  168,
  162,  122,   59,  256,  257,  128,  123,  260,  267,  262,
  263,  264,  267,  123,  266,  268,  269,  138,  180,  140,
  261,  123,  263,  155,  273,  146,  158,  148,  262,  263,
   59,  261,  125,  263,  262,  263,   43,  199,   45,  201,
   40,  162,  262,  263,  213,  261,  169,  170,  203,  204,
  205,    0,   59,  177,  178,  261,  123,   41,  261,  180,
   44,  193,  194,   41,  196,   43,  261,   45,   59,   43,
  232,   45,   43,    0,   45,  257,  258,  257,  199,  200,
  201,  259,  244,  238,  205,  259,  241,  208,  272,   40,
  257,  258,  274,  275,   59,   44,  228,  261,   59,  263,
  257,  258,  364,  257,  258,   59,  125,  274,  275,  257,
   59,  232,  257,  258,  257,  258,  285,  257,  239,  242,
  274,  275,  277,  244,  270,  271,  288,  273,   59,  274,
  275,  274,  275,  258,  274,  275,   40,  292,  257,  294,
   41,  272,  297,  298,  261,  300,  263,  268,  269,  304,
  305,  261,  275,  263,  323,  274,  275,  257,  258,  261,
   40,  263,  257,  258,   43,  327,   45,  288,  274,  275,
  291,  292,  261,  328,  257,  258,  125,  332,  333,  123,
  335,  302,  337,   40,  339,  340,  355,  310,  343,  344,
   40,  360,  256,  257,  272,   45,  260,  329,  125,   59,
  264,  257,  258,  257,  268,  269,  327,  376,  329,   40,
   60,   61,   62,   40,   43,  370,   45,  372,   45,  388,
   41,  390,  377,   96,   97,   41,   42,   41,   58,  384,
   59,   47,  364,   60,   61,   62,  257,  256,  257,  394,
   44,  260,  123,  364,  365,  264,  265,  266,  417,  268,
  269,   41,   43,  408,   45,  274,  275,  276,  277,  261,
   41,   41,   42,   58,  419,  420,  257,   47,  123,  260,
  391,   41,  427,  264,  429,   40,  267,  268,  269,  448,
   59,   59,  437,   41,   42,   43,  441,   45,  443,   47,
  459,   41,   42,  462,   43,  263,   45,   47,  453,  468,
  263,   59,   60,   61,   62,  256,  257,  256,  257,  260,
  431,  260,   58,  264,   41,  264,  265,  268,  269,  268,
  269,   58,  123,  123,   59,  274,  275,  276,  277,  256,
  257,   40,   40,  260,   41,  269,   40,  264,  265,  266,
   41,  268,  269,   59,  262,   40,  123,  274,  275,  276,
  277,   41,   41,   43,   43,   45,   45,   41,   41,   43,
   43,   45,   45,   41,   41,  123,   43,  125,   45,   59,
   60,   61,   62,   41,   41,   43,  257,   45,   41,  260,
   43,   41,   45,  264,   58,  266,  267,  268,  269,   59,
  125,   59,   60,   61,   62,   41,   41,   43,   43,   45,
   45,   41,   41,   43,   43,   45,   45,  257,  258,   59,
   59,  261,  262,   59,   60,   61,   62,   40,  263,  263,
  270,  271,   45,  273,  274,  275,   59,   41,   41,   59,
  257,  258,   40,  123,  261,  125,   40,   60,   61,   62,
   40,  263,   59,  270,  271,   45,  273,  274,  275,   40,
   59,  123,   41,   59,   45,  123,  257,  125,  257,  260,
   60,   61,   62,  264,   59,   45,  267,  268,  269,   60,
   61,   62,   41,   59,   59,   59,   45,  123,   59,  125,
   60,   61,   62,   41,   41,   43,   43,   45,   45,   59,
   41,   60,   61,   62,   40,   59,  125,   59,  256,  257,
   59,  263,  260,  261,   59,  263,  264,  265,  266,  263,
  268,  269,  270,  271,  261,  273,  274,  275,  276,  277,
   41,   59,  257,   59,   45,  260,   41,  262,  263,  264,
   45,   58,  267,  268,  269,   40,   59,   41,  261,   60,
   61,   62,   59,   59,   41,   60,   61,   62,  256,  257,
  267,   40,  260,   59,   40,  261,  264,   41,   59,   59,
  268,  269,   44,   59,   59,   59,  256,  257,   59,  263,
  260,  261,   59,  263,  264,  265,  266,   59,  268,  269,
  270,  271,   59,  273,  274,  275,  276,  277,  256,  257,
   59,   59,  260,  261,   59,  263,  264,  265,  266,   59,
  268,  269,  270,  271,   59,  273,  274,  275,  276,  277,
  256,  257,   59,   41,  260,  261,   59,  263,  264,  265,
  266,   59,  268,  269,  270,  271,   59,  273,  274,  275,
  276,  277,   59,   59,  257,  258,   59,  125,  261,   59,
   41,   59,   59,  125,   45,   59,   59,  270,  271,  125,
  273,  274,  275,   59,   59,  125,   59,  257,  258,   60,
   61,   62,   59,  125,   59,   59,  257,  258,  125,    0,
  270,  271,   59,  273,  274,  275,    0,  257,  258,  270,
  271,   59,  273,  274,  275,   41,   59,  125,  257,  258,
  270,  271,   59,  273,  274,  275,  263,   59,  263,   19,
  263,  270,  271,  263,  273,  274,  275,  100,  241,  158,
  329,  125,  256,  257,  306,  346,  260,   47,  256,  257,
  264,   -1,  260,   -1,  268,  269,  264,   -1,   -1,   -1,
  268,  269,   -1,   -1,   -1,   -1,  257,  258,   -1,   -1,
   -1,   -1,  257,  258,  277,   -1,   -1,  123,   -1,  270,
  271,   -1,  273,  274,  275,  270,  271,   -1,  273,  274,
  275,   -1,   -1,   -1,  297,  298,   -1,  300,   -1,   -1,
   -1,  304,  305,   -1,  256,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,  265,  266,  123,  268,  269,   -1,   -1,
   -1,   -1,  274,  275,  276,  277,   -1,   -1,   -1,  332,
  333,   -1,  335,   -1,  337,  257,  339,  340,  260,  123,
  343,  344,  264,   -1,   -1,  267,  268,  269,   -1,  257,
   -1,   -1,  260,   -1,   -1,  125,  264,   -1,   -1,  267,
  268,  269,   -1,   -1,   -1,   -1,   -1,  370,   -1,  372,
   -1,   -1,  241,  257,  377,   -1,  260,   -1,  125,   -1,
  264,   -1,   -1,  267,  268,  269,  257,  258,  277,   -1,
   -1,  394,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  270,
  271,   -1,  273,  274,  275,  408,   -1,   -1,  277,   -1,
  256,  257,   -1,   -1,  260,   -1,  419,  420,  264,   -1,
  266,   -1,  268,  269,  427,   -1,  429,   -1,  297,  298,
   -1,  300,   -1,   -1,  437,  304,  305,   -1,  441,   -1,
  443,   -1,   -1,  332,  333,   -1,  335,  125,  256,  257,
  453,  340,  260,   -1,   -1,  344,  264,   -1,   -1,   -1,
  268,  269,   -1,  332,  333,   -1,  335,   -1,  337,  125,
  339,  340,  256,  257,  343,  344,  260,   -1,  262,  263,
  264,  370,  266,  372,  268,  269,  256,  257,  377,   -1,
  260,  125,   -1,   -1,  264,  265,  266,   -1,  268,  269,
   -1,  370,   -1,  372,  274,  275,  276,  277,  377,  256,
  257,   -1,   -1,  260,  125,   -1,  125,  264,  265,  266,
   -1,  268,  269,   -1,   -1,  394,   -1,  274,  275,  276,
  277,  420,   -1,  256,  257,   -1,  125,  260,  427,  408,
   -1,  264,   -1,  266,   -1,  268,  269,   -1,  437,   -1,
  419,  420,  441,   -1,   -1,   -1,   -1,   -1,  427,  125,
  429,   -1,   -1,   -1,  453,   -1,   -1,   -1,  437,   -1,
   -1,   -1,  441,   -1,  443,   -1,   -1,   -1,  256,  257,
   -1,  125,  260,   -1,  453,   -1,  264,  265,  266,   -1,
  268,  269,   -1,   -1,   -1,   -1,  274,  275,  276,  277,
  256,  257,   -1,   -1,  260,   -1,  123,   -1,  264,  265,
  266,   -1,  268,  269,   -1,   -1,  123,   -1,  274,  275,
  276,  277,  256,  257,  125,   -1,  260,   -1,   -1,   -1,
  264,  265,  266,   -1,  268,  269,  123,   -1,  123,   -1,
  274,  275,  276,  277,   -1,  256,  257,  256,  257,  260,
   -1,  260,  123,  264,  265,  264,   -1,  268,  269,  268,
  269,   -1,  123,  274,  275,  276,  277,  256,  257,   -1,
   -1,  260,  123,   -1,   -1,  264,  265,   -1,  123,  268,
  269,   -1,   -1,   -1,   -1,  274,  275,  276,  277,   -1,
  256,  257,   -1,   -1,  260,  125,   -1,   -1,  264,  265,
   -1,   -1,  268,  269,   -1,  125,   -1,   -1,  274,  275,
  276,  277,  256,  257,   -1,   -1,  260,   -1,  125,   -1,
  264,  265,   -1,   -1,  268,  269,   -1,   -1,   -1,   -1,
  274,  275,  276,  277,  297,  298,   -1,  300,  125,  256,
  257,  304,  305,  260,  125,   -1,  263,  264,   -1,  256,
  257,  268,  269,  260,  125,  256,  257,  264,   -1,  260,
  125,  268,  269,  264,   -1,  266,   -1,  268,  269,  256,
  257,  256,  257,  260,  337,  260,  339,  264,  125,  264,
  343,  268,  269,  268,  269,  256,  257,   -1,  125,  260,
   -1,   -1,   -1,  264,  125,  256,  257,  268,  269,  260,
   -1,   -1,   -1,  264,  125,  256,  257,  268,  269,  260,
  125,  256,  257,  264,   -1,  260,   -1,  268,  269,  264,
  125,   -1,   -1,  268,  269,   -1,  256,  257,   -1,   -1,
  260,  394,   -1,   -1,  264,  125,  266,  257,  268,  269,
  260,  125,   -1,   -1,  264,  408,  266,  267,  268,  269,
  257,  125,   -1,  260,   -1,   -1,  419,  264,   -1,  266,
  267,  268,  269,   -1,  125,   -1,  429,   -1,   -1,  256,
  257,   -1,   -1,  260,   -1,  256,  257,  264,  125,  260,
  443,  268,  269,  264,  125,  256,  257,  268,  269,  260,
   -1,  256,  257,  264,   -1,  260,   -1,  268,  269,  264,
  125,   -1,   -1,  268,  269,   -1,  125,   -1,   -1,  256,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,  256,
  257,  268,  269,  260,  125,  256,  257,  264,   -1,  260,
  125,  268,  269,  264,   -1,  256,  257,  268,  269,  260,
   -1,  256,  257,  264,  125,  260,   -1,  268,  269,  264,
  125,  256,  257,  268,  269,  260,   -1,   -1,   -1,  264,
   -1,   -1,   -1,  268,  269,  125,  256,  257,   -1,   -1,
  260,   -1,  256,  257,  264,   -1,  260,   -1,  268,  269,
  264,   -1,   -1,  257,  268,  269,  260,   -1,   -1,   -1,
  264,   -1,   -1,  267,  268,  269,  257,   -1,   -1,  260,
   -1,   -1,   -1,  264,   -1,   -1,  267,  268,  269,   -1,
  257,   -1,   -1,  260,   -1,   -1,  257,  264,   -1,  260,
  267,  268,  269,  264,   -1,   -1,  267,  268,  269,   -1,
   -1,   -1,  257,   -1,   -1,  260,   -1,   -1,  257,  264,
   -1,  260,  267,  268,  269,  264,   -1,   -1,  267,  268,
  269,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,
   -1,   -1,  257,  264,   -1,  260,  267,  268,  269,  264,
   -1,   -1,  267,  268,  269,   -1,  257,   -1,   -1,  260,
   -1,   -1,  257,  264,   -1,  260,  267,  268,  269,  264,
   -1,   -1,  267,  268,  269,   -1,  256,  257,   -1,   -1,
  260,   -1,  256,  257,  264,   -1,  260,   -1,  268,  269,
  264,  265,  266,   -1,  268,  269,   -1,   -1,   -1,   -1,
  274,  275,  276,  277,  256,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,  265,  266,   -1,  268,  269,   -1,   -1,
   -1,   -1,  274,  275,  276,  277,
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=277;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","WHEN","WHILE","MAYOR_IGUAL","MENOR_IGUAL",
"ASIGNACION","DISTINTO","ENTERO","DOUBLE","CONST","DEFER",
};
final static String yyrule[] = {
"$accept : program",
"program : header_program '{' ejecucion '}' ';'",
"program : header_program",
"program : header_program '{' ejecucion",
"program : header_program '{' '}'",
"header_program : ID",
"declaracion_variables : tipo lista_variables ';'",
"declaracion_variables : definicion_constante ';'",
"declaracion_variables : lista_variables ';'",
"declaracion_variables : lista_variables",
"lista_variables : lista_variables ',' ID",
"lista_variables : ID",
"sentencia_declarable : declaracion_variables",
"sentencia_declarable : funcion",
"sentencia_declarable : diferimiento",
"funcion : header_funcion ejecucion_funcion",
"funcion : header_funcion",
"header_funcion : FUN ID '(' lista_parametros ')' ':' tipo",
"header_funcion : FUN ID '(' ')' ':' tipo",
"header_funcion : FUN '(' lista_parametros ')' ':' tipo",
"header_funcion : FUN '(' ')' ':' tipo",
"header_funcion : FUN ID '(' lista_parametros ')' tipo",
"lista_parametros : parametro",
"lista_parametros : parametro ',' parametro",
"parametro : tipo ID",
"parametro : ID",
"parametro : tipo",
"tipo : ENTERO",
"tipo : DOUBLE",
"ejecucion_funcion : '{' bloque_funcion RETURN '(' expresion ')' ';' '}' ';'",
"ejecucion_funcion : '{' RETURN '(' expresion ')' ';' '}' ';'",
"ejecucion_funcion : '{' bloque_funcion RETURN '(' expresion ')' ';' bloque_funcion '}'",
"bloque_funcion : bloque_funcion sentencia_funcion",
"bloque_funcion : sentencia_funcion",
"sentencia_funcion : sentencia",
"sentencia_funcion : seleccion_funcion ';'",
"sentencia_funcion : seleccion_when_funcion",
"sentencia_funcion : iteracion_while_funcion",
"seleccion_funcion : IF condicion_salto_if then_seleccion_funcion ENDIF",
"seleccion_funcion : IF condicion_salto_if then_seleccion_funcion else_seleccion_funcion ENDIF",
"then_seleccion_funcion : THEN '{' ejecucion_control RETURN '(' expresion ')' ';' '}' ';'",
"then_seleccion_funcion : THEN RETURN '(' expresion ')' ';'",
"else_seleccion_funcion : ELSE '{' ejecucion_control RETURN '(' expresion ')' ';' '}' ';'",
"else_seleccion_funcion : ELSE RETURN '(' expresion ')' ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control RETURN '(' expresion ')' ';' '}' ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN RETURN '(' expresion ')' ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN RETURN '(' expresion ')'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN RETURN ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN RETURN",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control RETURN '(' expresion ')' '}'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control RETURN expresion '}' ';'",
"seleccion_when_funcion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control RETURN expresion '}'",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '(' expresion ')' ';' '}' ';'",
"iteracion_while_funcion : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '(' expresion ')' ';' '}' ';'",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '(' expresion ')' '}'",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '}' ';'",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN expresion",
"iteracion_while_funcion : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN expresion ';'",
"iteracion_while_funcion : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN '(' expresion ')' '}'",
"iteracion_while_funcion : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN expresion",
"iteracion_while_funcion : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion RETURN expresion ';'",
"diferimiento : DEFER sentencia_ejecutable",
"ejecucion_control : ejecucion_control sentencia_ejecutable",
"ejecucion_control : sentencia_ejecutable",
"ejecucion : ejecucion sentencia",
"ejecucion : sentencia",
"sentencia : sentencia_ejecutable",
"sentencia : sentencia_declarable",
"sentencia_ejecutable : asignacion ';'",
"sentencia_ejecutable : seleccion ';'",
"sentencia_ejecutable : impresion ';'",
"sentencia_ejecutable : seleccion_when ';'",
"sentencia_ejecutable : iteracion_while",
"sentencia_ejecutable : error ';'",
"seleccion_when : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_control '}' ';'",
"seleccion_when : WHEN '(' comparacion_bool ')' THEN sentencia_ejecutable ';'",
"seleccion_when : WHEN '(' comparacion_bool ')' THEN",
"seleccion_when : WHEN '(' ')' THEN '{' ejecucion_control '}'",
"seleccion_when : WHEN '(' comparacion_bool ')' '{' ejecucion_control '}'",
"seleccion_when : WHEN comparacion_bool THEN '{' ejecucion_control '}'",
"seleccion_when : WHEN THEN '{' ejecucion_control '}'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' sentencia_ejecutable ';'",
"iteracion_while : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : ID ':' WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' sentencia_ejecutable ';'",
"iteracion_while : WHILE ':' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' asignacion ')' '{' '}' ';'",
"iteracion_while : WHILE '(' ')' ':' '(' asignacion ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' ')' '{' ejecucion_iteracion '}' ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' '(' asignacion ')' sentencia_ejecutable ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' sentencia_ejecutable ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' '(' ')' sentencia_ejecutable ';'",
"iteracion_while : WHILE '(' comparacion_bool ')' ':' asignacion sentencia_ejecutable ';'",
"seleccion_iteracion : IF condicion_salto_if then_seleccion_iteracion ENDIF",
"seleccion_iteracion : IF condicion_salto_if then_seleccion_iteracion else_seleccion_iteracion ENDIF",
"seleccion_iteracion : IF condicion_salto_if then_seleccion_iteracion",
"seleccion_iteracion : IF condicion_salto_if ENDIF",
"seleccion_iteracion : IF then_seleccion_iteracion ENDIF",
"seleccion_iteracion : IF else_seleccion_iteracion ENDIF",
"then_seleccion_iteracion : THEN '{' ejecucion_iteracion '}' ';'",
"then_seleccion_iteracion : THEN break ';'",
"then_seleccion_iteracion : THEN ejecucion_iteracion '}' ';'",
"then_seleccion_iteracion : THEN '{' ejecucion_iteracion ';'",
"else_seleccion_iteracion : ELSE '{' ejecucion_iteracion '}' ';'",
"else_seleccion_iteracion : ELSE RETURN '(' expresion ')' ';'",
"else_seleccion_iteracion : ELSE RETURN '(' ')' ';'",
"else_seleccion_iteracion : ELSE RETURN '(' expresion ')'",
"else_seleccion_iteracion : ELSE RETURN ';'",
"else_seleccion_iteracion : ELSE RETURN",
"else_seleccion_iteracion : ELSE '{' ejecucion_iteracion '}'",
"else_seleccion_iteracion : ELSE '{' ejecucion_iteracion",
"else_seleccion_iteracion : ELSE ejecucion_iteracion ';'",
"seleccion_when_iteracion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_iteracion '}' ';'",
"seleccion_when_iteracion : WHEN '(' comparacion_bool ')' THEN break ';'",
"seleccion_when_iteracion : WHEN '(' comparacion_bool ')' THEN '{' ejecucion_iteracion ';'",
"seleccion_when_iteracion : WHEN '(' ')' THEN '{' ejecucion_iteracion '}' ';'",
"seleccion_when_iteracion : WHEN '(' ')' THEN break ';'",
"seleccion_when_iteracion : WHEN comparacion_bool THEN break ';'",
"ejecucion_iteracion : ejecucion_iteracion sentencia_iteracion",
"ejecucion_iteracion : sentencia_iteracion",
"sentencia_iteracion : asignacion ';'",
"sentencia_iteracion : seleccion_iteracion ';'",
"sentencia_iteracion : impresion ';'",
"sentencia_iteracion : seleccion_when_iteracion ';'",
"sentencia_iteracion : iteracion_while ';'",
"sentencia_iteracion : break ';'",
"break : BREAK",
"break : BREAK ID",
"seleccion : IF condicion_salto_if then_seleccion ENDIF",
"seleccion : IF condicion_salto_if then_seleccion else_seleccion ENDIF",
"seleccion : IF condicion_salto_if '{' ejecucion_control '}' else_seleccion ENDIF",
"seleccion : IF condicion_salto_if then_seleccion '{' ejecucion_control '}' ENDIF",
"seleccion : IF condicion_salto_if THEN ENDIF",
"seleccion : IF condicion_salto_if then_seleccion ELSE ENDIF",
"seleccion : IF condicion_salto_if THEN else_seleccion ENDIF",
"then_seleccion : THEN '{' ejecucion_control '}' ';'",
"then_seleccion : THEN sentencia_ejecutable ';'",
"then_seleccion : THEN '{' ejecucion_control",
"then_seleccion : THEN '{' '}'",
"then_seleccion : THEN ejecucion_control '}'",
"else_seleccion : ELSE '{' ejecucion_control '}' ';'",
"else_seleccion : ELSE sentencia_ejecutable ';'",
"else_seleccion : ELSE '{' '}' ';'",
"else_seleccion : ELSE ejecucion_control '}' ';'",
"condicion_salto_if : '(' comparacion_bool ')'",
"condicion_salto_if : comparacion_bool ')'",
"condicion_salto_if : '(' comparacion_bool",
"condicion_salto_if : comparacion_bool",
"condicion_salto_if : '(' ')'",
"comparacion_bool : expresion comparador expresion",
"comparacion_bool : expresion comparador",
"comparacion_bool : comparador expresion",
"comparacion_bool : comparador",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"comparador : MAYOR_IGUAL",
"comparador : MENOR_IGUAL",
"comparador : DISTINTO",
"lista_asignaciones : lista_asignaciones asignacion",
"lista_asignaciones : asignacion",
"definicion_constante : CONST lista_asignaciones",
"asignacion : ID ASIGNACION expresion",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"expresion : tipo '(' expresion '+' termino ')'",
"expresion : tipo '(' expresion '-' termino ')'",
"expresion : tipo '(' termino ')'",
"expresion : tipo '(' expresion '+' ')'",
"expresion : tipo '(' expresion '-' ')'",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"combinacion_terminales : ID",
"combinacion_terminales : CTE",
"combinacion_terminales : '-' CTE",
"factor : combinacion_terminales",
"factor : ID '(' combinacion_terminales ',' combinacion_terminales ')'",
"factor : ID '(' combinacion_terminales ')'",
"factor : ID '(' ')'",
"impresion : OUT '(' CADENA ')'",
"impresion : OUT '(' ')'",
"impresion : OUT",
"impresion : OUT CADENA",
};

//#line 340 "gramatica.y"


public static final String ERROR = "Error";
public static final String WARNING = "Warning";

public static List<String> errores_sintacticos = new ArrayList<>();
public static List<Character> buffer = new ArrayList<>();
public static List<String> estructura = new ArrayList<>();
public static AnalisisLexico AL;
public static boolean errores_compilacion = false;

void yyerror(String mensaje) {
        // funcion utilizada para imprimir errores que produce yacc
        System.out.println("Error yacc: " + mensaje);
}
public void addEstructura(String s){
    estructura.add(s);
}

public List<String> getEstructura() {
    return estructura;
}

public List<String> getErrores() {
    return errores_sintacticos;
}

public static void agregarEstructura(String s){
    estructura.add(s);
}

public static void agregarError(List<String> errores, String tipo, String error) {
        if (tipo.equals("ERROR")) {
                errores_compilacion = true;
        }

        int linea_actual = AnalisisLexico.getLineaActual();

        errores.add(tipo + " (Linea " + linea_actual + "): " + error);
}


int yylex() {
    int tok = 0;
    //System.out.print("YYLEX, " + buffer.get(0) + " - ");
    Token t = AL.getToken(buffer);
    if (t != null) {
        if (t.getId() == 0) {
                return 0;
        }
        tok = t.getId();
        if (t.getAtributo() != null) {
            yylval = new ParserVal(t.getAtributo());
        }
    }
    System.out.println("YYLEX - " + tok);
    return tok;
}

public Double getDouble(String d){
    if (d.contains("D")){
        var w = d.split("D");
        return Math.pow(Double.valueOf(w[0]),Double.valueOf(w[1]));
    } else {
        return Double.valueOf(d);
    }

}

public String negarConstante(String c) { // AHORA?
    String ptr = TablaSimbolos.obtenerSimbolo(c);
    String nuevo = '-' + c;
    if (c.contains(".")) {
        Double d = getDouble(c);
        if ((d > Math.pow(-1.7976931348623157,308) && d < Math.pow(-2.2250738585072014,-308))){
            if (TablaSimbolos.obtenerSimbolo(nuevo) == null){ // si no es null es porque ya se agrego anteriormente la misma constante.
                Lexema lexema = new Lexema(d);
                TablaSimbolos.agregarSimbolo(nuevo,lexema); // falta chequear que no se este usando la misma constante positiva y asi borrarla.
            }
        } else {
            agregarError(errores_sintacticos, "ERROR", "El numero " + c + " esta fuera de rango.");
            nuevo = "";
        }
    } else {
        agregarError(errores_sintacticos, "WARNING", "El numero " + c + " fue truncado al valor minimo (0), ya que es menor que este mismo");
        nuevo = "0";
        TablaSimbolos.truncarEntero(ptr,nuevo);
    }
    return nuevo;
}

public void setSintactico(List<Character> buffer, AnalisisLexico AL) {
    this.AL = AL;
    this.buffer = buffer;
}
//#line 1000 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 22 "gramatica.y"
{addEstructura("programa");}
break;
case 2:
//#line 23 "gramatica.y"
{addEstructura("programa sin ejecucion");}
break;
case 3:
//#line 24 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se esperaba un '}' al final del programa");}
break;
case 4:
//#line 25 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se esperaba una sentencia de ejecucion");}
break;
case 8:
//#line 38 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un tipo para declaracion_variable");}
break;
case 9:
//#line 39 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' al final de la declaracion");}
break;
case 12:
//#line 46 "gramatica.y"
{addEstructura("declaracion variables");}
break;
case 13:
//#line 47 "gramatica.y"
{addEstructura("declaracion funcion");}
break;
case 14:
//#line 48 "gramatica.y"
{addEstructura("diferimiento");}
break;
case 16:
//#line 52 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una ejecucion_funcion");}
break;
case 19:
//#line 57 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el nombre de la funcion");}
break;
case 20:
//#line 58 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el nombre de la funcion");}
break;
case 21:
//#line 59 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el ':' luego de asignar los parametros");}
break;
case 25:
//#line 70 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el tipo del parametro");}
break;
case 26:
//#line 71 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera el nombre del parametro");}
break;
case 31:
//#line 82 "gramatica.y"
{agregarError(errores_sintacticos,"Error", "El RETURN debe ser la ultima sentencia de la funcion");}
break;
case 35:
//#line 92 "gramatica.y"
{addEstructura("if en funcion");}
break;
case 36:
//#line 93 "gramatica.y"
{addEstructura("when en funcion");}
break;
case 37:
//#line 94 "gramatica.y"
{addEstructura("while en funcion");}
break;
case 46:
//#line 112 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' al final de la expresion");}
break;
case 47:
//#line 113 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera la expresion de retorno");}
break;
case 48:
//#line 114 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una expresion de retorno y un ';' al final");}
break;
case 49:
//#line 115 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' al final de '}'");}
break;
case 50:
//#line 116 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la expresion este entre parentesis");}
break;
case 51:
//#line 117 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' al final y que la expresion se encuentre entre parentesis");}
break;
case 54:
//#line 123 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' luego de '}' ");}
break;
case 55:
//#line 124 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una expresion luego del RETURN");}
break;
case 56:
//#line 125 "gramatica.y"
{agregarError(errores_sintacticos,"Error","falta los parentesis en la expresion, falta '}' y un ';'");}
break;
case 57:
//#line 126 "gramatica.y"
{agregarError(errores_sintacticos,"Error","falta los parentesis en la expresion y un '}' para el cierre");}
break;
case 58:
//#line 127 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ';' luego de '}' ");}
break;
case 59:
//#line 128 "gramatica.y"
{agregarError(errores_sintacticos,"Error","falta los parentesis en la expresion, falta '}' y un ';'");}
break;
case 60:
//#line 129 "gramatica.y"
{agregarError(errores_sintacticos,"Error","falta los parentesis en la expresion y un '}' para el cierre");}
break;
case 69:
//#line 149 "gramatica.y"
{addEstructura("if");}
break;
case 70:
//#line 150 "gramatica.y"
{addEstructura("impresion");}
break;
case 71:
//#line 151 "gramatica.y"
{addEstructura("when");}
break;
case 72:
//#line 152 "gramatica.y"
{addEstructura("while");}
break;
case 73:
//#line 153 "gramatica.y"
{addEstructura("error");}
break;
case 76:
//#line 160 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una ejecucion y un ';' ");}
break;
case 77:
//#line 161 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una comparacion_bool dentro de '(' ')' ");}
break;
case 78:
//#line 162 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un THEN luego de la comparacion_bool");}
break;
case 79:
//#line 163 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la comparacion_bool se encuentre encerrada con '(' ')' ");}
break;
case 80:
//#line 164 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una comparacion_bool encerrado entre '(' ')' ");}
break;
case 85:
//#line 172 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una comparacion_bool antes del ':' ");}
break;
case 86:
//#line 173 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera ':' luego de la comparacion_bool");}
break;
case 87:
//#line 174 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una ejecucion luego de la ASIGNACION");}
break;
case 88:
//#line 175 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una comparacion_bool dentro de los '(' ')' ");}
break;
case 89:
//#line 176 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una asignacion dentro de los '(' ')'  ");}
break;
case 90:
//#line 177 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ':' luego de la comparacion_bool");}
break;
case 91:
//#line 178 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una asignacion luego del ':' ");}
break;
case 92:
//#line 179 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una asignacion entre los parentesis");}
break;
case 93:
//#line 180 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la asignacion se encuentre entre parentesis");}
break;
case 96:
//#line 185 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ENDIF al final del IF");}
break;
case 97:
//#line 186 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya then_seleccion_iteracion ");}
break;
case 98:
//#line 187 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una condicion_salto_if");}
break;
case 99:
//#line 188 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una condicion_salto_if");}
break;
case 102:
//#line 193 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que antes de la ejecucucion_iteracion haya una { ");}
break;
case 103:
//#line 194 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que luego de la ejecucion_iteracion haya una llave");}
break;
case 106:
//#line 203 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una expresion entre los parentesis");}
break;
case 107:
//#line 204 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya un ';' luego de la expresion ");}
break;
case 108:
//#line 205 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que luego del return haya una expresion entre parentesis");}
break;
case 109:
//#line 206 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que luego del return haya una expresion entre parentesis y un ';'al final");}
break;
case 110:
//#line 207 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya un ';' luego de '}' ");}
break;
case 111:
//#line 208 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una '}' y un ';' ");}
break;
case 112:
//#line 209 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya que la ejecucion_iteracion se encuentre entre { }");}
break;
case 115:
//#line 218 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un '}' antes del ';'");}
break;
case 116:
//#line 219 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una comparacion_bool entre los parentesis");}
break;
case 117:
//#line 220 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que haya una comparacion_bool entre parentesis");}
break;
case 118:
//#line 221 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la comparacion_bool se encuentre entre parentesis");}
break;
case 122:
//#line 229 "gramatica.y"
{addEstructura("if en iteracion");}
break;
case 123:
//#line 230 "gramatica.y"
{addEstructura("impresion");}
break;
case 124:
//#line 231 "gramatica.y"
{addEstructura("when en iteracion");}
break;
case 125:
//#line 232 "gramatica.y"
{addEstructura("while");}
break;
case 126:
//#line 233 "gramatica.y"
{addEstructura("break");}
break;
case 131:
//#line 243 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se esperan un THEN");}
break;
case 132:
//#line 244 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un ELSE");}
break;
case 133:
//#line 245 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera bloque de sentencias luego del THEN");}
break;
case 134:
//#line 246 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera bloque de sentencias luego del ELSE");}
break;
case 135:
//#line 247 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera bloque de sentencias luego del THEN");}
break;
case 138:
//#line 254 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un '}' al de las sentencias del THEN");}
break;
case 139:
//#line 255 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera sentencias dentro del cuerpo del THEN");}
break;
case 140:
//#line 256 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un '{' para comenzar el THEN");}
break;
case 143:
//#line 262 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera sentencias dentro del cuerpo del ELSE");}
break;
case 144:
//#line 263 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un '{' luego del ELSE");}
break;
case 146:
//#line 268 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera '(' al principio de la comparacion");}
break;
case 147:
//#line 269 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera ')' al final de la comparacion_bool");}
break;
case 148:
//#line 270 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera que la comparacion_bool se encuentre entre parentesis");}
break;
case 149:
//#line 271 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una condicion");}
break;
case 150:
//#line 274 "gramatica.y"
{addEstructura("comparacion");}
break;
case 151:
//#line 277 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una expresion luego del comparador");}
break;
case 152:
//#line 278 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una expresion antes del comparador");}
break;
case 153:
//#line 279 "gramatica.y"
{agregarError(errores_sintacticos,"Error","se espera expresiones para poder realizar las comparaciones");}
break;
case 163:
//#line 296 "gramatica.y"
{addEstructura(val_peek(2).sval + " asignacion " + val_peek(0).sval);}
break;
case 167:
//#line 303 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Conversion explicita no permitida");}
break;
case 168:
//#line 304 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Conversion explicita no permitida");}
break;
case 169:
//#line 305 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Conversion explicita no permitida");}
break;
case 170:
//#line 306 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una termino luego del signo '+' y conversion explicita no permitida");}
break;
case 171:
//#line 307 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una termino luego del signo '-' y conversion explicita no permitida");}
break;
case 177:
//#line 318 "gramatica.y"
{
            String ptr = TablaSimbolos.obtenerSimbolo(val_peek(0).sval);
            negarConstante(val_peek(0).sval);
    }
break;
case 183:
//#line 333 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera una cadena dentro del OUT");}
break;
case 184:
//#line 334 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera () con una cadena dentro");}
break;
case 185:
//#line 335 "gramatica.y"
{agregarError(errores_sintacticos,"Error","Se espera un que la CADENA se encuentre entre parentesis");}
break;
//#line 1556 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
